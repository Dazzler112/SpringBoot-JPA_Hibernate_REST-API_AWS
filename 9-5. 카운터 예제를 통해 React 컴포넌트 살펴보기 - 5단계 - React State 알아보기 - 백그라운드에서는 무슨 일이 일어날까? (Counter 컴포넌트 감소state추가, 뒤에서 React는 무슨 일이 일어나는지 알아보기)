

지난 시간에는 컴포넌트에 상태(State)를 추가했다, 
상태 값을 가져오고 업데이트하는 건 아주 쉽고 간단했다
쉽고 간단한 방식으로 증가 버튼의 기능을 구현했다

이제 카운터에 1을 더하는 기능이 아니라 1을 빼는 기능을 추가해 보겠다
+1 버튼을 구현한 방식을 사용하면 -1 버튼도 구현할 수 있을 것이다

decrementCounterFunction()을 구현하는 건 어렵지 않았을 것이다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import './Counter.css'

export default function Counter() {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + 1)

    }

    //1: function을 입력하고 'decrementCounterFunction()'을 만든 다음 //1-1: return으로...
    function decrementCounterFunction() {

        //1-2: 그리고 계산식을 count-1로 바꾸겠다, 이러면 될까? 한번 실행해 보자
        setCount(count - 1)
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+1</button>

        //1-1: 아래쪽에 버튼을 하나 더 추가하고 텍스트에 '-1'로 바꾸겠다 
        //이 버튼이 클릭되며 decrementCounterFunction 함수를 호출해야겠지 (onClick에 {decrementCounterFunction}함수를 삽입) //1-2:decrementCounterFunction()으로..
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-1</button>
        </div>
    </div>
    )
}
-----------------------------------------------------------------------------------------------
                                               |
                                               V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                          
                                          -1               (자세한 건 직점 확인)
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1    |
                              ◟ _______ ◞    ◟ _______ ◞

-------------------------------------------------------------------------------------------
+1, +1, -1, -1, -1..
보는 것처럼 아주 쉽게 상태를 업데이트할 수 있다
이런 식으로 아주 쉽고 간단하게 함수를 추가하고 필요한 상태를 업데이트할 수 있다

지금까지 본 것 중 눈여겨볼 점은, 우리는 상태 업데이트만 했다는 것이다
+1 버튼을 클릭했을 때, 우리가 한 건 상태 업데이트이다, 뷰는 자동으로 업데이트되었다
우리는 뷰를 직접 업데이트하지 않았다

우리가 코드에서 한 건 뷰, 즉 Counter 컴포넌트를 count에 연결한 것뿐이다
-------------------------------------
export default function Counter() {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + 1)

    }

    function decrementCounterFunction() {
        
        setCount(count - 1)
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+1</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-1</button>
        </div>
    </div>
    )
}
-------------------------------------
여기서 +1을 클릭하면 그 즉시 상태가 업데이트된다, 1에서 한번 더 하면 상태가 2로 업데이트되지
상태가 2로 업데이트되며 뷰도 함께 업데이트된다
                        -------------------------------------
                                          -1               
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1    |
                              ◟ _______ ◞    ◟ _______ ◞
                        -------------------------------------
이 뷰는 count라는 클래스 이름을 가진 span 요소 안에 있다 ( <span className='count'>{count}</span> )
이 뷰도 함께 2로 업데이트된다




그럼 리액트 백그라운드에서 무슨 일이 일어나는지 한번 알아보자






1️⃣ What's happening in the background with React?

● We updated the state => React updated the view                                      _______________ 
  ■ How can you update an HTML element?                                              ⁽  Virtual DOM  ⁾
    ○ A HTML page is represented by DOM(Document Object Model)                        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    ○ Each element in a HTML page is a node in the DOM                               /diff&update    ↖ creates
    ○ You need to update the DOM to update the element                             ↙                   \
    ○ HOWEVER, writing code to update the DOM can be complex and slow!         __________  events __________
                                                                              ⁽   DOM    ⁾  ㅡ→  ⁽   App    ⁾
                                                                               ‾‾‾‾‾‾‾‾‾‾         ‾‾‾‾‾‾‾‾‾‾



● We updated the state => React updated the view
우리는 상태를 업데이트했다
상태를 1->, 2->3 이런 식으로 업데이트했고, 리액트가 뷰를 업데이트했다
그게 어떻게 가능할까?
  ■ How can you update an HTML element? 
한 걸음 뒤에서 살펴보자
HTML 요소는 일반적으로 어떻게 업데이트될까?
    ○ A HTML page is represented by DOM(Document Object Model)
HTML 페이지는 일반적으로 DOM 요소로 표현된다, 문서 객체 모델의 줄임말이지
    ○ Each element in a HTML page is a node in the DOM 
HTML 페이지의 각 요소는 DOM 노드에 해당한다
    ○ You need to update the DOM to update the element
요소를 업데이트하려면 DOM을 업데이트해야 한다
    ○ HOWEVER, writing code to update the DOM can be complex and slow!
하지만 DOM 업데이트 코드를 작성하는 건 복잡하고 시간이 많이 든다


