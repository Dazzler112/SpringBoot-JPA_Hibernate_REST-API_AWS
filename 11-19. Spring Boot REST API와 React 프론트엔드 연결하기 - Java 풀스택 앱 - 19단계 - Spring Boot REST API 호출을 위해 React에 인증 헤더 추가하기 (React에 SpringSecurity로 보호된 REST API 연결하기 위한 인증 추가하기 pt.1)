

지난 단계에서 우린 REST API에 보안을 활성화했고 
이번 단계에선 프론트엔드를 백엔드에 연결해보자

그럼 프론트엔드 리액트 애플리케이션으로 가서 로그아웃을 해보자, 그리고 다시 로그인한다
로그인이 작동할 건데 그럼 Call Hello World를 클릭해보자

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
 ❌ Access to XMLHttpRequest at                                          in28minutes:1
    'http://localhost:8080/hello-world/path-variable/Ranga' from 
     origin 'http://localhost:3000' has been blocked by CORS 
     policy: No 'Access-Control-Allow-Origin' header is present on 
     the requested resource.
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                               WelcomeComponent.jsx:28
  ▶ AxiosError {message: 'Network Error', name: 'AxiosError', 
    code: 'ERR_NETWORK', config: {…}, request: XMLHttpRequest, …}

 ❌ ▶ GET                                                   HelloWorldApiService.js:17
     http://localhost:8080/hello-world/path-variable/Ranga 
     net::ERR_FAILED 401 (Unauthorized)     
--------------------------------------------------------------------------------------------      

오류이다
어떤 오류가 났는지 볼까?
이 URL에서 오리진으로부터의 XMLHttpRequest에 대한 액세스가 차단되었다
Network Error와 AxiosError도 나왔지 message: 'Network Error', name: 'AxiosError'
이렇게 차단된 이유는 이 API들이 모두 보호되고 있기 때문이지 
우린 이 모든 요청 호출에 기본 인증 헤더를 전송해야 한다 

예를 들면 Call Hello World의 경우에
너는 기본 인증 헤더를 받아서 그걸 전송할 수 있어야 할 것이다
그럼 실제로 프론트엔드 애플리케이션으로 가보자   

WelcomeComponent.jsx로 가보겠다
여기서 우린 retrieveHelloWorldPathVariable()를 호출하고 있지
그 메서드로 가보면
--------------------------      
export const retrieveHelloWorldPathVariable 
        = (username) => apiClient.get(`/hello-world/path-variable/${username}`)
--------------------------
여기에 너는 인증 헤더도 넣어주어야 한다
  
------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ HelloWorldApiService.js


  
import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

export const retrieveHelloWorldBean 
        = () => apiClient.get('/hello-world-bean')

export const retrieveHelloWorldPathVariable 
          //1: 그럼 여기 이 메서드에 넌 이렇게 해줄 수 있다, 즉 객체로 만들고 
  = (username) => apiClient.get(`/hello-world/path-variable/${username}`, {
    //1-1: 이 객체의 일부로서 너는 Authorization이라는 걸 넣어줄 수 있다 그럼 headers:{}라고 하고
    headers:{
      //1-2: Authorization이라고 해줄 수 있지, 그리고 우리가 전송하려는 인증 헤더는 뭐지?
      Authorization:
    }
  })
------------------------------------------------------------------------------------------------------------------ 

우리가 전송하려는 인증 헤더는   
Talend API Tester로 가서 받을 수 있다   

--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________       ____________________________________________________________    ___________________
 | POST     | ▼  |    |    http://localhost:8080/users/in28minutes/todos           |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾       ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |   ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   _______________     __________________      |    
☑ | Accept        | : |application/json  | x   |     {                         
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |      "username": "in28minutes",
   _______________     __________________      |      "description": "Learn To Dance",
☑ | Content-Type  | : |application/json  | x   |      "targetDate": "2033-08-04",                       
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |      "done": false  
   _______________     __________________      |      }
☑ | Authorization | : |Basic aW4yOG1pbnV0| x 🗝|                             
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |                                     
  ______________                               |                                 
 ( + Add header )  🗝 Add authorization     🗑  |                                  
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                               |       
                                               |                
                                               |      
                                               |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body | ☑ Enable body evaluation

                                   

--------------------------------------------------------------------------------------------------------------------------------

  여기서 Authorization 부분을 복사해서 VSC에 붙여넣을 수 있지 (Basic aW4yOG1pbnV0... 이부분) 

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ HelloWorldApiService.js



import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

export const retrieveHelloWorldBean 
        = () => apiClient.get('/hello-world-bean')

export const retrieveHelloWorldPathVariable 
        = (username) => apiClient.get(`/hello-world/path-variable/${username}`, {
            headers:{
                //2: 이렇게 너는 Basic으로 시작하는 이 텍스트를 붙여 넣을 수 있지, 이건 인코딩된 형태의 사용자 ID와 패스워드고
                Authorization: 'Basic aW4yOG1pbnV0ZXM6ZHVtbXk='
            }
        })
------------------------------------------------------------------------------------------------------------------  

이제 니가 Call Hello World를 클릭하면 

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
 ❌ Access to XMLHttpRequest at                                          in28minutes:1
    http://localhost:8080/hello-world/path-variable/Ranga' from 
    origin 'http://localhost:3000' has been blocked by CORS 
    policy: Response to preflight request doesn't pass access 
    control check: No 'Access-Control-Allow-Origin' header is 
    present on the requested resource.
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                               WelcomeComponent.jsx:28
  ▶ AxiosError {message: 'Network Error', name: 'AxiosError', 
    code: 'ERR_NETWORK', config: {…}, request: XMLHttpRequest, …}

 ❌ ▶ GET                                                   HelloWorldApiService.js:17
     http://localhost:8080/hello-world/path-variable/Ranga 
     net::ERR_FAILED     
--------------------------------------------------------------------------------------------  
      
오류가 나는 걸 볼 수 있다  
새로운 오류를 보면, 프리플라이트 요청에 대한 응답이 액세스 제어 체크를 통과하지 못했다고 나오지
(Response to preflight request doesn't pass access control check)


------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ HelloWorldApiService.js



import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

export const retrieveHelloWorldBean 
        = () => apiClient.get('/hello-world-bean')


//3-1: 여기에 오류 텍스트를 붙여보겠다, 
//Response to preflight request doesn't pass access control check 
export const retrieveHelloWorldPathVariable 
        = (username) => apiClient.get(`/hello-world/path-variable/${username}`, {
            headers:{

                //3: 그럼 너는 이 인증 헤더를 코멘트로 빼고 
              //  Authorization: 'Basic aW4yOG1pbnV0ZXM6ZHVtbXk='
            }
        })
------------------------------------------------------------------------------------------------------------------

즉 프리플라이트 요청에 대한 응답이 액세스 제어 체크를 통과하지 못했다는 내용이고, 
너는 Authorization 헤더에서 그렇게 되었다 이게 우리가 받고 있는 오류고 그리고 
//Response to preflight request doesn't pass access control check => Authorization header

이제 인증 헤더를 코멘트로 빼고 Call Hello World를 클릭하면

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
 ❌ Access to XMLHttpRequest at                                          in28minutes:1
    'http://localhost:8080/hello-world/path-variable/Ranga' from 
     origin 'http://localhost:3000' has been blocked by CORS 
     policy: No 'Access-Control-Allow-Origin' header is present on 
     the requested resource.
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                               WelcomeComponent.jsx:28
  ▶ AxiosError {message: 'Network Error', name: 'AxiosError', 
    code: 'ERR_NETWORK', config: {…}, request: XMLHttpRequest, …}

 ❌ ▶ GET                                                   HelloWorldApiService.js:15
     http://localhost:8080/hello-world/path-variable/Ranga 
     net::ERR_FAILED 401 (Unauthorized)     
--------------------------------------------------------------------------------------------    

다른 오류가 나온다, CORS 정책에 의해 차단되었다고 나오지 
요청된 소스에 'Access-Control-Allow-Origin' 헤더가 없다고 한다,
하지만 프리플라이트 요청에 대한 응답이 엑세스 제어 체크를 통과하지 못했다는 내용은 없지 (Response to preflight request doesn't pass access control check)

우린 새로운 오류를 받고 있는 것이다 
우린 인증 헤더를 추가했는데, 백그라운드에서 새로운 오류를 받고 있는 것이지
프리플라이트 요청에 대한 응답이 액세스 제어 체크를 통과하지 못했다는 오류이다

그럼 백그라운드에서 실제로 무슨 일이 일어난 걸까?
보안을 활성화한 다음에 Network로 가서 제출된 요청을 확인해보자
가서 Call Hello World를 눌러보자

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
                             ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  (All)  (Fetch/XHR)  (Doc)  (CSS)  (JS)  (Font)  (Img)  (Media)  (Manifest)  (WS)
   ‾‾‾
--------------------------------------------------------------------------------------------
 Name               | Status   | Type                 | Initiator     | Size       | Time
--------------------------------------------------------------------------------------------
 ❌ Ranga          | COR ...  | xhr                   |HelloWorldApi.|           0B| 7 ms
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 ❌ Ranga          | 401      | preflight             |preflight ⇅   |           0B| 5 ms
--------------------------------------------------------------------------------------------

이렇게 프리플라이트 요청이 먼저 전송되는 걸 볼 수 있다 
                                            |
                                            V
--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
                             ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  (All)  (Fetch/XHR)  (Doc)  (CSS)  (JS)  (Font)  (Img)  (Media)  (Manifest)  (WS)
   ‾‾‾
--------------------------------------------------------------------------------------------
 Name      ...      | x  Headers  Preview  Response  Initiator  Timing
                    |    ‾‾‾‾‾‾‾
--------------------------------------------------------------------------------------------
 ❌ Ranga          | ▼ General
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|    Request URL: http://localhost:8080/hello-world/path-variable/Ranga
❌ Ranga            |    Request Method: OPTIONS
   ‾‾‾‾‾            |    Status Code: 🟠 401 Unauthorized
                    |    Remote Address: [::1]:8080
                    |    Referrer Policy:strict-origin-when-cross-origin
                    |   ...
--------------------------------------------------------------------------------------------

이 프리플라이트 요청은 OPTION 요청이라고 부르는 것이지
이렇게 먼저 OPTION 요청이 전송되고, 그 후에야 실제 요청이 전송되는 것이다
그러면 우리는 모든 사람에게 OPTION 요청에 대한 액세스를 허용해 줘야 한다 
그게 우리가 해야 할 한 가지 일이고 

두 번째로는 이 헤더를 받는 방법을 알아야 한다 
--------------------------------
headers:{
         Authorization: 'Basic aW4yOG1pbnV0ZXM6ZHVtbXk='
            }
--------------------------------
우린 여기 이 인증 헤더를 하드코딩할 수 없고 
이 헤더를 어디서 받을 수 있을까?

우린 로그인을 할 때 이 헤더를 받아야 한다 

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/ 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

          in28minutes                                                        Login   
     ___________________________________________________________________________________

                                          Time to Login!
                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |●●●●●             |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------

니가 in28minutes와 dummy를 입력하고 
로그인을 할 때 이 인증 헤더를 준비한 다음에야 너는 그걸 이후의 REST API 호출에 사용할 수 있다 
그럼 우리는 사용자가 사용자 이름과 패스워드를 입력하고 login을 클릭할 때 
백엔드에 테스트 요청을 할 것이다 
넌 사용자 이름과 패스워드가 테스트 요청에 액세스 할 수 있는 올바른 것인지 확인할 거고
특정한 시점에 너는 토큰을 생성할 것이다
너는 그 토큰을 우리 컨텍스트에 넣을 거고, 그리고 우리가 REST API 호출을 할 때마다 
우리는 컨텍스트로부터 토큰을 사용할 것이다



이 모든 게 좀 복잡하게 들릴 수 있는데
우린 다음 몇 단계에서 단계별로 그걸 구현해볼 것이다
다음 단계에서 보겠다
