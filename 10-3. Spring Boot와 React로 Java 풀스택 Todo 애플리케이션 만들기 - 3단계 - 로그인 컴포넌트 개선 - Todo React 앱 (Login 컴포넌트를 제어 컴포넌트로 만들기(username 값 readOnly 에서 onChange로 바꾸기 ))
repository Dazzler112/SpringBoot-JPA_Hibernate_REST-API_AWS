

--------------------------------------------------------------------------------------------

                                            _________________
                                  User Name|                 |
                                            ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                           __________________
                                  Password|                  |
                                           ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------


지난 시간에는 로그인 컴포넌트를 만들었다
지금은 컴포넌트가 그렇게 보기 좋지는 않다

약간 개선을 해보자
나중에 Bootstrap을 추가하면 예쁘게 만들수 있다
지금은 그냥 조금 더 나은 정도로 만들겠다 시작해보자

별도의 CSS 파일을 만들겠다
todo 폴더로 가서 오른쪽 마우스를 클릭해서 새 파일을 만들고 TodoApp.css라 하겠다
TodoApp과 관련된 모든 CSS를 여기에 추가하고 임포트 하면 된다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



//1: import './TodoApp.css'이다
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            {/* <WelcomeComponent /> */}
        </div>
    )
}

function LoginComponent() {


    return (
        <div className='Login'>
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password"/>
                </div>
                <div>
                    <button type="button" name="login">login</button>
                </div>
            </div>
        </div>
    )
}

function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------

자
여기에 쓰는 것은 TodoApp 컴포넌트에 적용할 수 있다
그러면 여기 TodoApp 안으로 가서

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx


//2: 여기 label과 input, button을 모두 가져오자
//label, input, button을 적고, 일단 간단한 걸 추가해보겠다
label, input, button {
    //2-1: margin은 10px, padding은 5px를 주겠다, 어떻게 되는지 볼까?
    margin: 10px;
    padding: 5px;
}

-----------------------------------------------------------------------------------------------
                                          |
                                          V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |                 | (<= margin, padding이 설정됨)
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------


컴포넌트가 이제 이렇게 보인다
CSS를 추가하니 label, input, button 사이에 공간이 생긴 게 보인다

애플리케이션에 Bootstrap을 추가하면 스타일을 더 추가할 수 있다
지금은 일단 로그인 컴포넌트의 기능에 집중하겠다

이제 사용자가 사용자 이름과 비밀번호를 입력하고 로그인을 누르겠지
사용자가 로그인 버튼을 누를 때 인증을 처리하고 싶다


-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            {/* <WelcomeComponent /> */}
        </div>
    )
}

function LoginComponent() {


    return (
        <div className='Login'>
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>

                    //3: 그 전에 일단 사용자 이름에 기본 값을 추가하겠다, 여기 username 부분으로 가서 디폴트 값을 추가한다
                    //value는 in28minutes라 하겠다 저장한다
                    <input type="text" name="username" value="in28minutes" />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password"/>
                </div>
                <div>
                    <button type="button" name="login">login</button>
                </div>
            </div>
        </div>
    )
}

function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------
 그러면 이제 여기 사용자 이름 칸에 입력하러 가보면    |
                                                  V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------

이런.. 칸에 입력할 수가 없다
오른쪽 마우스를 클릭하고 inspect를 누른다

무슨 일인지 보겠다
콘솔로 들어가서
---------------------------------

inspect의 콘솔창


❌ ▶Warning: You provided a `value` prop     react-dom.development.js:94 
to a form field without an `onChange` handler. This will render a 
read-only field. If the field should be mutable use `defaultValue`. 
Otherwise, set either `onChange` or `readOnly`.
    at input
    at div
    at div
    at div
    at LoginComponent
    at div
    at TodoApp
    at div
    at App
---------------------------------
여기에 오류가 출력되어 있지
제어할 수 없는 입력 값을 바꾸려고 한다고 나온다

정의되지 않은 값이 정의된 값으로 바뀌면서 생길 수 있다고 한다
컴포넌트가 살아있는 동안 입력 요소를 제어할지 제어하지 않을지 선택하라


🔵 컴포넌트 제어 및 React 양식 다룰 때 두가지 유의해야 할 사항

리액트에는 컴포넌트 제어라는 개념이 있다
리액트에서 양식 요소를 다룰 때 두 가지 유의해야 할 사항이 있다

1. 하나는 React State이다
React State에서 양식에 사용되는 변수 값을 유지할 수 있다 이게 첫번째이다

2. 두번째는 양식 요소 자체의 값이다
이 요소에 오른쪽 마우스를 클릭하고 검사해보면 이 값을 저장하고 있는 게 DOM 요소인 걸 볼 수 있어요 ( <input type="text" name="username" value="in28minutes"> )
이 값을 바꾸면 특정 DOM 요소가 자동으로 업데이트 되는 거지

특정 요소 값을 저장하는 State와 DOM 값이 있는 것이다
리액트에서 양식 요소를 사용할 때 이 두 가지가 동기화되어야 한다
특정 구성 요소에 이렇게 설정하면 컴포넌트는 제어 컴포넌트가 되는 거지



그러면 로그인 컴포넌트를 어떻게 제어 컴포넌트로 만들까?
State를 만드는 것부터 시작한다
사용자 이름을 저장할 수가 없기 때문이다
username을 저장할 State를 만들어보겠다
State는 어떻게 사용하지??

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx


//4-1: 여기 import가 생기는 걸 볼 수 있지, 리액트에서 useState를 임포트하고 있다 //4-2: 다시 LoginComponent() 함수로..
import { useState } from 'react'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            {/* <WelcomeComponent /> */}
        </div>
    )
}

function LoginComponent() {

    //4: useState 하면 된다, useState를 추가한다 //4-1: import로 ..
    //4-2: 기본 값을 in28minutes로 하고 싶다, useState의 값으로 in28minutes를 주겠다, 이건 두 개 요소가 있는 배열을 반환할 것이다, const로 정의하겠다
    // 첫 번째는 이 State 값에 접근할 수 있는 변수이다 여기에는 username이 들어가야겠다
    //그리고 username을 업데이트할 메서드가 필요하다, State의 username을 변경해줄 것이다, 이 메서드를 호출하면 State에 저장된 값을 업데이트할 것이다
    //이제 username과 setUsername 메서드를 useState로 가져왔다
    const [username, setUsername] = useState('in28minutes')

    return (
        <div className='Login'>
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>

                    //4-3: 그럼 이제 여기에서 username 값을 사용해보자, 여기 in28minutes를 직접 입력하는 대신 State에 접근하면 되겠지
                    //여기 {username}을 넣어줍니다 ,양식 요소를 이 State와 묶어주는 것이다, 저장하고 양식으로 돌아가서 새로 고침 해보겠다
                    <input type="text" name="username" value="{username}" />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password"/>
                </div>
                <div>
                    <button type="button" name="login">login</button>
                </div>
            </div>
        </div>
    )
}

function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}

-----------------------------------------------------------------------------------------------
                                                 |
                                                 V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |{username}       | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------


값이 이렇게 보이는 것은 여기 큰따옴표가 있기 때문이다

-------------------------------------------

⏺ TodoApp.jsx

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')

    return (
        <div className='Login'>
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                                                    // 여기 따옴표를 지워주겠다(value="{username}" 에서 value={username}로..) 저장한다
                    <input type="text" name="username" value={username} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password"/>
                </div>
                <div>
                    <button type="button" name="login">login</button>
                </div>
            </div>
        </div>
    )
}
-------------------------------------------
                                     |
                                     V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------

이제 여기 in28minutes라는 값이 보이지

콘솔로 가보겠다
---------------------------------

inspect의 콘솔창

❌ ▶Warning: You provided a `value` prop     react-dom.development.js:94 
to a form field without an `onChange` handler. This will render a 
read-only field. If the field should be mutable use `defaultValue`. 
Otherwise, set either `onChange` or `readOnly`.
    at input
    at div
    at div
    at div
    at LoginComponent (http://localhost:3000/static/js/bundle.js:140:82)
    at div
    at TodoApp
    at div
    at App
---------------------------------

경고 메시지가 있다
onChange 핸들러 업이 양식에 값 Prop을 제공했다고 나온다 
(You provided a `value` prop to a form field without an `onChange` handler.)
이렇게 하면 읽기 전용 양식이 되며 수정 가능하게 하려면 defaultValue를 사용하라고 나온다 
( This will render a read-only field. If the field should be mutable use `defaultValue`.)
아니면 onChange를 설정하거나 읽기 전용으로 해야한다
( Otherwise, set either `onChange` or `readOnly`.)

하나는 만족한다, 이건 읽기 전용이다
왜지?
onChange 핸들러를 추가해야 하기때문이다

이 양식이 바뀔 때 어떻게 할지 말해줘야 한다
React State를 업데이트 하고 싶다
-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            {/* <WelcomeComponent /> */}
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')

    //5-1: 로그인 컴포넌트 안에 handleUsernameChange를 만들고 파라미터로 event를 받겠다
    function handleUsernameChange(event) {
        //5-2: event의 로그를 출력해보겠다 (console.log(event)), 여기에 변화가 생기면 이벤트가 발생하고 이벤트 로그를 여기에 출력하는 것이다, 어떻게 되는지 보겠다
        console.log(event);
    }

    return (
        <div className='Login'>
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>

                    //5: onChange 메서드를 추가하고 이 State를 업데이트 해야지 바뀌는 값을 State안에서 이 set으로 업데이트 해야 한다, 어떻게 하지?
                    //간단한 메서드를 만들겠다 onChange에 handleUsernameChange라고 하겠다, 여기 메서드, 즉 함수를 생성하겠다 //5-1: 변수 밑에서 작성..
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password"/>
                </div>
                <div>
                    <button type="button" name="login">login</button>
                </div>
            </div>
        </div>
    )
}

function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------
콘솔을 비우고 새로 고침 한다               |
                                         V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
                                                                    TodoApp.jsx:18 
  ▶ SyntheticBaseEvent {_reactName: 'onChange', _targetInst: null, type: 'change', 
    nativeEvent: InputEvent, target: input, …}
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                    TodoApp.jsx:18 
  ▶ SyntheticBaseEvent {_reactName: 'onChange', _targetInst: null, type: 'change', 
    nativeEvent: InputEvent, target: input, …}
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                    TodoApp.jsx:18 
  ▶ SyntheticBaseEvent {_reactName: 'onChange', _targetInst: null, type: 'change', 
    nativeEvent: InputEvent, target: input, …}
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                    TodoApp.jsx:18 
  ▶ SyntheticBaseEvent {_reactName: 'onChange', _targetInst: null, type: 'change', 
    nativeEvent: InputEvent, target: input, …}
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                    TodoApp.jsx:18 
  ▶ SyntheticBaseEvent {_reactName: 'onChange', _targetInst: null, type: 'change', 
    nativeEvent: InputEvent, target: input, …}
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

에러가 없다, 다행이다
여기 값을 추가할 수 있다, 입력하면 이벤트가 발생한다
콘솔에 보인다
하지만 양식 요소는 업데이트되지 않는다
이벤트에 뭐가 있는지 보겠다

이벤트로 가보면 이벤트 안에 target이라는 게 있지

--------------------------------
  ▶ SyntheticBaseEvent {_reactName: 'onChange', _targetInst: null, type: 'change', 
    nativeEvent: InputEvent, target: input, …}
      bubbles: true
      cancelable: false
      currentTarget: null
      defaultPrevented: false
      eventPhase: 3
     ▶isDefaultPrevented: ƒ functionThatReturnsFalse()
     ▶isPropagationStopped: ƒ functionThatReturnsFalse()
      isTrusted: true
     ▶nativeEvent: InputEvent {isTrusted: true, data: 'ㅁ', isComposing: true, inputType: 'insertCompositionText', dataTransfer: null, …}
     ▼target: input
        value: ("in28minutes")
        ...
      timeStamp: 3037.399999856949
      type: "change"
      _reactName: "onChange"
      _targetInst: null
      [[Prototype]]: Object
--------------------------------
     ▼target: input
        value: ("in28minutes")
우리가 실제 입력하는 값은 target input 안에 들어온다, 그러면 
다 지우고 입력해보자


숫자 1을 입력해 보겠다

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
                                                                    TodoApp.jsx:18 
  ▶ SyntheticBaseEvent {_reactName: 'onChange', _targetInst: null, type: 'change', 
    nativeEvent: InputEvent, target: input, …}
      bubbles: true
      cancelable: false
      currentTarget: null
      defaultPrevented: false
      eventPhase: 3
     ▶isDefaultPrevented: ƒ functionThatReturnsFalse()
     ▶isPropagationStopped: ƒ functionThatReturnsFalse()
      isTrusted: true
     ▶nativeEvent: InputEvent {isTrusted: true, data: 'ㅁ', isComposing: true, inputType: 'insertCompositionText', dataTransfer: null, …}
     ▼target: input
        value: ("in28minutes")
        ...
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

SyntheticBaseEvent가 발생되었고 target의 value로 가보면
이벤트에 target이 있고 target에는 value가 있다 출력해보자

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            {/* <WelcomeComponent /> */}
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')

    function handleUsernameChange(event) {
 //       console.log(event); (여기서만 주석 처리 실제코드에선 삭제)
        //6: console.log로 event.target.value를 출력한다, event를 출력하는 건 지우겠다, 저장한다
        console.log(event.target.value);
    }

    return (
        <div className='Login'>
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password"/>
                </div>
                <div>
                    <button type="button" name="login">login</button>
                </div>
            </div>
        </div>
    )
}

function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------
좋다                                            |
콘솔로 가서 다 지우고 무언가 입력해보면            V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
   in28minutesi                                                            TodoApp.jsx:18 
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   in28minuteso                                                            TodoApp.jsx:18 
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   in28minutesm                                                            TodoApp.jsx:18 
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   in28minutesz                                                            TodoApp.jsx:18 
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   in28minutes1                                                            TodoApp.jsx:18 
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

니가 뭘 입력했는지 보이지
여기 출력된다
숫자 1을 입력하면 in28minutes1이 된다, 좋다


그럼 이제 이 특정 값으로 State를 업데이트 하고 싶다
특정 값으로 State를 어떻게 업데이트 할까?

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            {/* <WelcomeComponent /> */}
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')

    function handleUsernameChange(event) {
  //      console.log(event.target.value); (<=여기서만 주석처리 실제 코드는 삭제)
        //7: setUsername을 호출한다, State의 username을 업데이트 하고 싶을 때 호출하는 메서드지, 이렇게 해보자 (event.target.value), 위의 로그 출력 구문은 지우겠다
        setUsername(event.target.value);        
    }

    return (
        <div className='Login'>
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password"/>
                </div>
                <div>
                    <button type="button" name="login">login</button>
                </div>
            </div>
        </div>
    )
}

function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------
여기에 어떤 값을 입력하면                         |
                                                V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes12334 | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------
 
이제 값이 즉시 반영되는 게 보인다

백그아운드에선 어떤 일이 일어나지?

------------------------------------------
    function handleUsernameChange(event) {
        console.log(event.target.value);
        setUsername(event.target.value);
    }
------------------------------------------
다시 console.log를 써주고 저장하고 다 지우고 새로고침 해보겠다
                                            |
                                            V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes1234  | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
   in28minutes1                                                            TodoApp.jsx:18
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   in28minutes12                                                           TodoApp.jsx:18
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   in28minutes123                                                          TodoApp.jsx:18
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   in28minutes1234                                                         TodoApp.jsx:18
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

초기 값은 in28minutes이다 1을 추가하면 in28minutes1이 출력되지, 2,3,4도 마찬가지이다

handleUsernameChange 이벤트가 매번 발생하는 거지
handleUsernameChange함수가 호출되고 State의 값을 업데이트하는 것이다
const [username, setUsername] = useState('in28minutes') 의 username여기 있는 값이 바로 State에 연결된다
<input type="text" name="username" value={username} onChange={handleUsernameChange} /> (value={username})
변경이 발생할 때마다 onChange를 호출하고 onChange에서 handleUsernameChange메서드를
    function handleUsernameChange(event) {
        console.log(event.target.value);
        setUsername(event.target.value);
    }
호출한다
이렇게 State가 업데이트 되고 State가 업데이트되면서 입력 칸에도 올바른 값으로 업데이트되는 거지
모든 과정이 동기화 된다

---------------------------------------
                 _________________
    User Name:  |in28minutes1234  | 
                 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
---------------------------------------
여기 보이는 이 칸, username 칸은 이제 제어가 가능하다
React State와 직접 연결된 양식 칸이 있으니까 
그럼 비밀번호 칸에도 동일하게 해보겠다

간단하지
비슷한 메서드를 만들겠다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            {/* <WelcomeComponent /> */}
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')

    //8-2: State에 password를 저장해야 한다, 해보자, 여기에서password, 여긴 setPassword 겠지 비밀번호 초기 값은 비워두겠다//8-3: 다시 handlePasswordChange() 함수로..
    const [password, setPassword] = useState('')

    function handleUsernameChange(event) {
 //       console.log(event.target.value); (여기서만 주석처리 실제 코드는 삭제)
        setUsername(event.target.value);
    }

    //8: handlePasswordChange, handleUsernameChange와 handlePasswordChange 에 있던 로그 출력은 삭제하고//8-1: return안으로..
    function handlePasswordChange(event) {
        //8-3: 이 메서드 이름은 setPassword로 하겠다, 됐다
        setPassword(event.target.value);
    }

    return (
        <div className='Login'>
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>

                    //8-1: 여기에도 비슷한 걸 추가해줘야 한다 value는 password라고 해야지 메소드 이름은 handlePasswordChange라 하겠다
                    //하나 더 추가할 게 있지, State이다//8-2: const [username, setUsername]아래에서 작성..
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login">login</button>
                </div>
            </div>
        </div>
    )
}

function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------

비밀번호를 담는 State 변수가 만들어졌다
여기서 비밀번호 입력 칸의 값을 State의 값으로 연결해주는 거지 (const [password, setPassword] = useState(''))
<input type="password" name="password" value={password} onChange={handlePasswordChange}/>
이 값이 바뀌면 handlePasswordChange를
    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }
호출하는 것이다, 함수지
여기서 비밀번호를 업데이트하고 State의 password 값을 변경한다
리액트는 State의 변경을 감지하고 입력 칸을 업데이트 한다

좋다
저장하고 비밀번호로 가서 입력해보자
                                            |
                                            V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |●●●●●●●●          |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------

Password에서 이제 입력할 수 있다
이런.. 비밀번호 값을 볼 수가 없다

-----------------------------------------
    function handlePasswordChange(event) {
        //여기에 console.log를 추가하겠다, console.log에 event.target.value를 준다
        console.log(event.target.value);
        setPassword(event.target.value);
    }
-----------------------------------------

무엇이 출력될까?
                                            |
새로고침 하면                                V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |●●●●●             |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
   1                                                                        TodoApp.jsx:23
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   12                                                                       TodoApp.jsx:23
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   123                                                                      TodoApp.jsx:23
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   1234                                                                     TodoApp.jsx:23
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   12345                                                                    TodoApp.jsx:23
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

in28minutes이 있고 
1,2,3,4,5
비밀번호 칸이 업데이트 되고 State도 동시에 업데이트 되는 걸 볼 수 있다

State가 없데이트 되는 걸 보고 싶으면 Componentes 탭으로 가도 된다
이전에 크롬 React Developer 플러그인을 설치했지, 
Components 탭에 보면

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |●●●●●             |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------
  Elements  ⚛ Component  >>                                                       🔅  ⁞  x
            ‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ↖  |  🔍  Search (text or /regex/)                                               |  🔅
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▼ App
    ▼ TodoApp
        LoginComponent


LoginComponent                    ⏱  👁  🐞  <>
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
props
new entry : ""
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
hooks                                      🧪  ㅁ
  1️⃣State: "in28minutes"
  2️⃣State: "12345"
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
rendered by
  TodoApp
  App
  createRoot()
  react-dom@18.3.1
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
source                                         ㅁ
  bundle.js:140
-------------------------------------
-------------------------------------------------------------------------------------------

백그라운드의 컴포넌트를 볼 수 있는 기능이 있다
App 컴포넌트가 Todo 관리 앱을 띄우는 역할을 하고
로그인 컴포넌트도 올라왔지 
로그인 컴포넌트에 보면 hooks에 두 개의 State가 있다 
첫 번째 State는 in28minutes라 되어 있고
두 번째는 값이 12345지 이게 비밀번호 칸이다

------------------------------------------------
                        _________________
           User Name:  |in28minutes1234  | 
                        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
------------------------------------------------

여기를 in28minutes1234로 업데이트 하면 
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
hooks                                      🧪  ㅁ
  1️⃣State: "in28minutes1234"
  2️⃣State: "12345"
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
여기 State도 동시에 업데이트되는 게 보이지
필드도 업데이트 되고 State도 같이 업데이트 된다

비밀 번호를 업데이트해도 마찬가지이다
12345뒤에 67890도 입력해보자
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
hooks                                      🧪  ㅁ
  1️⃣State: "in28minutes1234"
  2️⃣State: "1234567890"
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
입력 칸을 업데이트 하면 State도 업데이트 되고 리액트는 이 State가 업데이트 되는 것을 보고
입력 칸도 업데이트해주는 거지





여기서 우리는 로그인 컴포넌트를 제어 컴포넌트로 만들었다
이 로그인 컴포넌트의 양식 요소는 React State로 들어왔고 
React State 양식에 어떤 변화가 발생하면 양식 요소도 동시에 업데이트 되었다

다음 강의에선 로그인 버튼이 클릭되었을 때 어떻게 하는지를 다루겠다 
