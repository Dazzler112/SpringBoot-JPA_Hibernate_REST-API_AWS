

앞선 강의에서 POST 요청으로 사용자를 생성하는 작업을 했었다
이전에 보냈던 요청을 선택해 보겠다

HISTORY 목록에서 이걸 선택하겠다

------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | POST     | ▼ |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |  ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________     __________________      |    {
☑ | Content-Type | : | application/json | x   |       name: "Ravi",                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |       birthDate": "1999-05-20"                                
  ______________                              |    }                                
 ( + Add header )                             |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                              |                                    
  🗝 Add authorization         🗑              |                                    
                                              |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation


------------------------------------------------------------------------------------------------------------------------------
특정 본문을 함께 /users로 POST 요청을 보냈었다 성공적으로 성공했었다                        |
보내기를 클릭하면 Ravi란 이름의 사용자가 생성된다                                          V
------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  201                (초록색 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Content-Length:	0 byte                        |    
Date:	 Sat, 25 May 2024 08:33:33 GMT          |                                          
Keep-Alive: timeout=60	                      |                                       
Connection: keep-alive                        |                    NO CONTENT                       
                                              |   
                                              |                                    
                                              |                                    
                                              |


------------------------------------------------------------------------------------------------------------------------------

localhost:8080/users로 확인해 보면 아이디 1,3,4가 있다

------------------------------------------------------------------------------------------------------------------------------


🌎 http://localhost:8080/users 사이트 화면 ==>



[
  {
    "id": 1,
    "name": "Adam",
    "birthDate": "1994-05-25"
  },
  {
    "id": 3,
    "name": "Jim",
    "birthDate": "2004-05-25"
  },
  {
    "id": 4,
    "name": "Ravi",
    "birthDate": "1999-05-20"
  }
]
------------------------------------------------------------------------------------------------------------------------------

이번에도 새 사용자를 생성해 볼 건데
이름은 비어 있고 생일은 현 시점 기준 미래로 말이다

------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | POST     | ▼ |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |  ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________     __________________      |    {
☑ | Content-Type | : | application/json | x   |       name: "",                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |       birthDate": "2099-05-20"                                
  ______________                              |    }                                
 ( + Add header )                             |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                              |                                    
  🗝 Add authorization         🗑              |                                    
                                              |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation


------------------------------------------------------------------------------------------------------------------------------
어떻게 될까? 보내기를 클릭한다                                                                    |
                                                                                                V
------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  201                (초록색 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Location:	http://localhost:8080/users5        |
Content-Length:	0 byte                        |    
Date:	 Sat, 25 May 2024 08:37:56 GMT          |                                          
Keep-Alive: timeout=60	                      |                   NO CONTENT                    
Connection: keep-alive                        |                                           
                                              |   
                                              |                                    
                                              |                                    
                                              |


------------------------------------------------------------------------------------------------------------------------------
여전히 생성됐다는 상태를 반환했고 localhost:8080/users로 조회해보면                               |  
                                                                                              V
------------------------------------------------------------------------------------------------------------------------------


🌎 http://localhost:8080/users 사이트 화면 ==>



[
  {
    "id": 1,
    "name": "Adam",
    "birthDate": "1994-05-25"
  },
  {
    "id": 3,
    "name": "Jim",
    "birthDate": "2004-05-25"
  },
  {
    "id": 4,
    "name": "Ravi",
    "birthDate": "1999-05-20"
  },
  {
    "id": 5,
    "name": "",
    "birthDate": "2099-05-20"
  }
]
------------------------------------------------------------------------------------------------------------------------------

이런... 이름이 없고 생일은 아직 오지도 않은 날짜인 사람이 생성됐다
이건 문제이다
이 문제를 이번 시간에 해결해 보려고 한다 
REST API에 유효성을 검증하려고 한다, 검증을 적용하려면, 추가 의존성이 필요하다
starter-web과 비슷하게 starter-validation이란 걸 추가해줘야 한다 

------------------------------------------------------------------------------------------------------------------------------


⏺ pom.xml파일


...
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

    <!--1: starter-web을 복붙하고 starter-validation으로 바꾸고 저장한다 pom.xml을 변경하면 서버를 멈추고 다시 시작해야 한다-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
...

------------------------------------------------------------------------------------------------------------------------------

자, 이제 UserResource 파일로 가서 createUser() 메소드에서 User가 유효한지를 확인하고 싶다

------------------------------------------------------------------------------------------------------------------------------


⏺ UserResource 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.net.*;
import java.util.*;

import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.support.*;

@RestController
public class UserResource {

	private UserDaoService service;
	
	public UserResource(UserDaoService service) {
		this.service = service;
	}

	@GetMapping("/users")
	public List<User> retrieveAllUsers() {
		
		return service.findAll();
	}
	
	@GetMapping("/users/{id}")
	public User retrieveUser(@PathVariable int id) {
		User user = service.findOne(id);
		
		if(user == null)
			throw new UserNotFoundException("id:"+id);
		return user;

	}

	@DeleteMapping("/users/{id}")
	public void deleteUser(@PathVariable int id) {
		service.deleteById(id);
		
	}
	
	@PostMapping("/users")
  //2: 그래서 @Valid를 추가한다 ctrl+ 스페이스를 누르면 jakarta.validation이 있다 ( Marks a property, method parameter or method return type for validation cascading. ) 프로퍼티나 메소드 인자, 반환 타입의 유효성을 확인하기 위해 표시를 한다고 한다
  //( Constraints defined on the object and its properties are validated when theproperty, method parameter or method return type is validated. ) 객체에 정의된 제약사항이나 프로퍼티 검증은 프로퍼티나 메소드 인자, 메소드 반환 타입이 검증되면 수행된다고 한다 즉, @Valid어노테이션을 붙이면 바인딩이 수행될 때 객체에 정의된 유효성 검증이 자동으로 수행된다는 것이다, 임포트문을 업데이트한다 jakarta.validation.Valid가 임포트됐다
  //이제 들어오는 요청의 유효성을 검증한다, 그런데 아직 우리 빈에는 정의해 둔 검증 조건이 없다 이제 추가해 보겠다 //2-1: User 클래스파일로 가서 작성..
	public ResponseEntity<User> createUser(@RequestBody User user) {
		User savedUser = service.save(user);
		// /users/4 => /users /{id},  user.getID
		URI location = ServletUriComponentsBuilder.fromCurrentRequest()
						.path("{id}")
						.buildAndExpand(savedUser.getId())
						.toUri();  
		
		return ResponseEntity.created(location).build();
	}
}

-----------------------------------------------------------------------------


⏺ User 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.time.*;

public class User {

	private Integer id;

  //2-1: 먼저 이름은 최소 두 글자가 되게 하겠다, @Size를 추가하고 Size를 임포트하겠다, jakarta.validation.constratins.Size 우리가 임포트하는 게 바르 이것이다
  //min=2를 넣어준다, 이름은 최소 2글자여야 한다는 조건이다
  //*여기선 속성의 크기를 @Size로 확인한다, 이름의 최소 길이를 제약하는 조건을 명시하는 것이다
  @Size(min=2)
	private String name;
  //생일은 항상 과거의 날짜로 설정되게 @Past를 추가하고 ctrl_1을 누르고 jakarta.validation.constraints.Past를 선택한다, 과거 날짜가 되도록 조건을 설정했다
  //*여기선 생일이 과거의 날짜여야 한다는 조건을 붙였고, 파일을 저장하고 아까 그 요청을 다시 보내 보겠다
	@Past
  private LocalDate birthDate;
  
	
	public User(Integer id, String name, LocalDate birthDate) {
		super();
		this.id = id;
		this.name = name;
		this.birthDate = birthDate;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public LocalDate getBirthDate() {
		return birthDate;
	}

	public void setBirthDate(LocalDate birthDate) {
		this.birthDate = birthDate;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", name=" + name + ", birthDate=" + birthDate + "]";
	}
	
}

  /*jakarta.validation.constraints 파일 안의 클래스들=>
  Past를 열어 설명을 보겠다
  탐색기를 확장해 보면 다양한 constraints 클래스를 볼 수 있다 이 클래스들은 전부 jakarta.validation.constraints에 속해 있다 뭔가가 false인지 true인지도 확인할 수 있고 
  DecimalMax, DecimalMin도 있는데 숫자 타입인 항목이 최소값보다 큰지 최대값보다 작은지를 확인한다, Digits는 숫자의 개수를 확인하고 대상 항목이 이메일 주소인지 유효한 이메일 주소인지 확인도 하고
  Future.class는 대상 날짜가 미래의 날짜인지를 확인하기도 하고, FutureOrPresent.class는 현재 이후의 날짜인지를 확인하고, Max는 상수값에 최대, Min은 최소치를 지정할 수 있고
  Negative.class는 음수여야하는 항목을 확인 하고 다양한 유효성 검증 조건들이 있다 NotBlank.class NotEmpty.class는 비어있으면 안 된다는 조건도 설정할 수 있다
  NotNull.class NUll이면 안된다 Null.class Null이어야 한다는 조건도 있고, 정규식 표현도 쓸 수 있고, 우리가 지금 활용한 조건은 바로 이 Size.class이다 최소 크기를 지정했다
  이렇게 다양한 종류의 검증 조건을 빈에서 사용하는 속성에 적용시킬 수 있다 
  */
------------------------------------------------------------------------------------------------------------------------------
비어 있는 이름과 미래의 생일을 가진 사용자를 생성하려고 POST 요청을 보내는 것이다           |
                                                                                      V
------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | POST     | ▼ |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |  ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________     __________________      |    {
☑ | Content-Type | : | application/json | x   |       name: "",                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |       birthDate": "2099-05-20"                                
  ______________                              |    }                                
 ( + Add header )                             |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                              |                                    
  🗝 Add authorization         🗑              |                                    
                                              |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation


------------------------------------------------------------------------------------------------------------------------------
보내기를 클릭                                                                            |
                                                                                        V
------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  400                (빨간색 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      
Content-Length:	application/problem+json      |    {
Transfer-Encoding:	chunked                   |      "type": "about:blank",
Date:	 Sat, 25 May 2024 10:19:09 GMT          |      "title": "Bad Request",                                   	                                    
Connection: close                             |      "status": 400,                                                
                                              |      "detail": "Invalid request content.", 
                                              |      "instance": "/users"
▶ COMPLETE REQUEST HEADERS                    |    }                               
                                              |                                    
                                              |


------------------------------------------------------------------------------------------------------------------------------
400이 반환됐다 훌륭하다
400은 Bad Request를 의미한다, 딱이다

그런데 문제가 있다면 이 응답값은 요청에 뭐가 잘못됐던 건지를 전혀 알려주고 있지 않고있다
REST API를 만들 때는 항상 REST API의 소비자를 고려해야 한다 
니가 이 REST API의 소비자라면 이 요청을 보내고 니가 뭘 잘못했는지 도통 알 수가 없다
그냥 400이 반환됐을 뿐이다, 이건 어떻게 개선하면 좋을까?

