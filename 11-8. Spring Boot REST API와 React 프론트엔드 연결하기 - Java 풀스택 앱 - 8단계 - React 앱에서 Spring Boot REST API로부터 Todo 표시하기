

지난 단계에서 우리는 Todo 리스트를 받기 위한 REST API를 만들었고 
이제 그걸 사용하려고 한다 
리액트 애플리케이션에서 그걸 어떻게 호출할까?

앞에서 이 HelloWorldApiService를 만들었고, 
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ HelloWorldApiServices.js



import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

export const retrieveHelloWorldBean 
        = () => apiClient.get('/hello-world-bean')

export const retrieveHelloWorldPathVariable 
        = (username) => apiClient.get(`/hello-world/path-variable/${username}`)
----------------------------------------------------------------------------------------------------------------------
이걸 사용해서 다른 서비스를 호출했지

그럼 지금 이런 파일들을 만들려고 한다
vsc에서 Explorer를 열고 HelloWorldApiServices.js이걸 복사해보자
그럼 HelloWorldApiServices copy가 생기고 이름을 TodoApiService로 바꿔보자 엔터키를 누르고, 
TodoApiService에서 너는 아주 비슷한 걸 하려고 한다, 맞지?
우리는 Axios를 사용하려고 하고, 기본 URL은 변하지 않을 것이다,
그리고 우린 특정한 username에 관한 세부정보를 받으려고 하지

그럼 이것부터 해보겠다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoApiServices.js




import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

//1: 그럼 우리는 retrieveTodosForUser 라고 해주자, 더 분명하게 하기 위해 중간에 All을 넣어주고, 그럼 retrieveAllTodosForUsername 이라고 해준다, 좋다
//이렇게 retrieveAllTodosForUsername이라고 하고 URL은 무엇이 될까?
export const retrieveAllTodosForUsername 
                                //1-1: URL은 약간 다를것이다, 맞지? 그럼 /users/${username}/todos가 되어야 하겠지
        = (username) => apiClient.get(`/users/${username}/todos`)
----------------------------------------------------------------------------------------------------------------------

여기서
--------------------------------------------------------------------------------------------


🌎 http://localhost:8080/users/in28minutes/todos 사이트화면 ==>


[
  {
    "id": 1,
    "username": "in28minutes",
    "description": "Get AWS Certified",
    "targetDate": "2034-07-27",
    "done": false
  },
  {
    "id": 2,
    "username": "in28minutes",
    "description": "Learn DevOps",
    "targetDate": "2035-07-27",
    "done": false
  },
  {
    "id": 3,
    "username": "in28minutes",
    "description": "Learn Full Stack Development",
    "targetDate": "2036-07-27",
    "done": false
  }
]

--------------------------------------------------------------------------------------------
받아서 

100% 맞는지 확인해보자
http://localhost:8080/users/in28minutes/todos 이게 우리가 매칭시켜야 할 URL이다
이렇게 users/${username}/todos이다
이제 우리는 이렇게 TodoApiService에 retrieveAllTodosForUsername 메서드를 만들었다
우린 retrieveAllTodosForUsername이걸 컴포넌트에서 호출할고 하지 

Todo앱을 보면,

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	            is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  1	    Learn AWS		             false        Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  2	    Learn Full Stack Dev		 false        Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  3	    Learn DevOps		         false        Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                        
-------------------------------------------------------------------------------------------

우리는 Todos 컴포넌트에서 Todo 리스트를 보여주고 있지, ListTodosComponent이다
우리는 여기서 REST API를 호출하고 여기에 Todo 리스트를 표시하려고 하지
그럼 그걸 해보자

그럼 우리의 ListTodosComponent로 가보자
보면, 앞에서 우리는 
----------------------------------
    const todos = [
        {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
        {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
        {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
      ]
----------------------------------
이 정보를 하드코딩했지

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    //2: 이제 이걸 코멘트로 빼주겠다, 그럼 비어 있는 Todo리스트가 표시되겠지, 이걸 저장해보자
    const todos = [   
 //       {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},    (<= 주석처리)
 //       {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
 //       {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
      ]

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그리고 페이지로 돌아가보면
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	            is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                        
-------------------------------------------------------------------------------------------

비어 있는 Todo 리스트가 오는 게 보일 것이다
이제 우리는 Todo를 페이지에 표시하려고 하고, Todo리스트는 계속 변할 것이다

그러므로 우린 이걸 상태로 설정할 것이다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



//3-1: import { useState } from "react"가 나오고 //3-2: 다시 ListTodosComponent() 안으로..
import { useState } from "react"


function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    //3: 그럼 const [] 라고 하고 원소 두 개 쓸 것이고 useState를 사용할 것이다, 그럼 useState라고 입력하고 그리고 엔터키를 누른다 //3-1: 임포트로..
    //3-2: 그리고 기본값은 비어 있는 값이고 그건 비어 있는 배열이지, 그리고 []안에는 todos, setTodos라고 해준다 //3-3: const todos로...
    const [todos, setTodos] = useState([])

    //3-3: 그리고 이제 이 const 전체를 코멘트로 뺄 수 있지, 이건 이제 필요하지 않고 
 //   const todos = [ (<= 주석처리)
        // {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
        // {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
        // {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
 //     ]

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent

----------------------------------------------------------------------------------------------------------------------

이렇게 상태 안에 Todo를 넣었고, (<= const [todos, setTodos] = useState([]))
지금은 비어있다
그럼 페이지로 가서 보면
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	            is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                        
-------------------------------------------------------------------------------------------

지금은 비어 있고, 좋다

이제 너는 컴포넌트가 준비되면 
------------------------------
export const retrieveAllTodosForUsername 
        = (username) => apiClient.get(`/users/${username}/todos`)
------------------------------
이 REST API를 호출하려고 한다
우리는 이걸 사용해서 모든 Todo를 받으려고 하지

근대 이걸 보니 하나 빠진 게 있는데

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoApiServices.js




import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

                            //4: () 여기에 username을 파라미터로 넣어줘야 하지, 그럼 retrieveAllTodosForUsername(username)이라고 하고, 너는 이걸 사용하려고 한다
export const retrieveAllTodosForUsername (username)
        = (username) => apiClient.get(`/users/${username}/todos`)
        // http://localhost:8080/users/in28minutes/todos
----------------------------------------------------------------------------------------------------------------------
                                  |
                                  V
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useState } from "react"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]


    //5: 그럼 이걸 호출하고, username을 받아서 이걸 호출하려고 한다, 지금은 우선 in28minutes라고 하드코딩을 해보자
    //그럼 사용자 이름 in28minutes의 모든 Todo를 받게 되겠지, 우린 그걸 받아서 상태로 설정하려고 한다
    retrieveAllTodosForUsername('in28minutes')

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그럼 우리가 이 username에 대해 retrieveAllTodosForUsername을 호출하면 성공적으로 응답을 받을 수도 있고 호출에 실패할 수도 있다
먼저 그걸 해보자

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useState } from "react"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]

    //6: 그럼 .then()이라고 하고 응답을 로깅할 거고, 그럼 (response => console.log(response))라고 해준다
    //그럼 응답이 성공적이면 우리는 응답을 로깅하고 
    retrieveAllTodosForUsername('in28minutes')
    .then(response => console.log(response))

    //6-1: 그렇지 않은 경우에도 catch()라고 해주고, (error => console.log(error))라고 해준다 
    .catch(error => console.log(error))

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

이제 이 호출을 어디에서 할 것인지가 문제지
