

지난 단계에서 우린 요청에 성공했다 
그리고 요청에 성공하면 뭘 헀지?

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx

	
function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }

    function successfulResponse(response) {
        console.log(response)
    }

    function errorResponse(error) {
        console.log(error)
    }

--------------------------------------------------------------------------------------------

successfulResponse()를 호출했다
그리고 response가 프린트되는 걸 확인했다 <= .then( (response) => successfulResponse(response) )
이제 우리는 요청에 성공하면 메시지를 받고 그걸 환영 페이지에 표시하려고 한다

그걸 어떻게 할까? WelcomeComponent에서 상태를 사용하기 시작할 것이다,
그럼 너는 페이지에 메시지를 표시하길 원하고 그러면 우린 상태를 사용할 거고

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'
//1 계속: useState가 임포트됨.. 
import { useState } from 'react'

function WelcomeComponent() {

    const {username} = useParams()

    //1: 그 상태에 메시지를 넣을 것이다, 그럼 이렇게 useState()를 호출할 거고 기본값은 (null)일 것이다
    //이렇게 최초 메시지는 null일 것이고, 이렇게 useState를 리액트에서 임포트했지, 그러면 이건 2개의 원소로 된 배열을 리턴하게 되지, 우린이 부분을 충분히 연습을 했지?
    //너는 [] 여기 뭘 적얼지 아주 잘 알 것이다 그럼 [message, setMessage]라고 적고 message의 초기값은 null이 될 것이다 //1-1: return 안으로..
    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }

    function successfulResponse(response) {
        console.log(response)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
    
          //1-1: 그리고 우린 여기에 <div>를 만들 것이다, 그럼 <div>라고 하고 className="text-info"라고 해주자 평소대로 여기 큰 따옴표를 사용할 거고
          //그리고 여기에 {message}라고 넣어줄 것이다
          <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

그리고 여기로 가보면, 기본값으로서
                                      |
                                      V
--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------

아무것도 보이지 않을 것이다

이제 우리는 요청에 성공한 경우에 쓸 메시지를 채울 거고

그럼 successfulResopnse()에서 

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'
import { useState } from 'react'

function WelcomeComponent() {

    const {username} = useParams()

    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }

    function successfulResponse(response) {
        console.log(response)

        //2: response 데이터를 이용해서 setMessage()를 호출한다, response 데이터는 어떻게 받을까?
        setMessage(response)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
            <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

그럼 Console로 가서 보자
그리고 Call Hello World를 클릭하면

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:9
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {data: 'Hello World', status: 200, statusText: '',           WelcomeComponent.jsx:19
     headers: AxiosHeaders, config: {...}. ...}
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  cleanup                                                        WelcomeComponent.jsx:11 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

실제로 여기 data라는 속성이 있는 걸 볼 수 있지, 그럼 response.data라고 하면 Hello World를 받겠지


