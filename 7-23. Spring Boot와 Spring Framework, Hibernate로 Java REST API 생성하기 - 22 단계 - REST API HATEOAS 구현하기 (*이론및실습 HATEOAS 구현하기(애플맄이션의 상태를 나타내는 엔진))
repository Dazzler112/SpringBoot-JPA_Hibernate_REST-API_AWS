

HATEOAS

● Hypermedia as the Engine of Application State (HATEOAS)                                   {
● Websites allow you to:                                                                      "name": "Adam",
  ■ See Data And Perform Actions (using links)                                                "birthDate": "2024-06-01",
● How about enhancing your REST API to tell consumers how to perform subsequent actions?         "_links": {
  ■ HATEOAS                                                                                       "all-users": {
● Implementation Options:                                                                         "href": "http://localhost:8080/users" 
  ■ 1: Custom Format and Implementation                                                          }
    ○ Difficult to maintain                                                                    }
  ■ 2: Use Standard Implementation                                                          }                                
    ○ HAL (JSON Hypertext Application Language): Simple format that gives a consistent
    and easy way to hyperlink between resources in your API
    ○ Spring HATEOAS: Generate HAL response with hyperlinks to resources                                                                                                                          
                                                                                                                          
                                                                                                                          
                                                                                                                                                                                                                                        
                                                                                                                          
                                                                                                                                                                                                                                                                                                                                                                           
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  
이번 학습에선 HATEOAS를 살펴보겠다 
HATEOAS, 즉 애플리케이션의 상태를 나타내는 엔진으로, 사용하는 하이퍼미디어란 무엇일까?
어떤 사람이 REST API 구축의 전문가라고 자부한다면 그 사람을 괴롭힐 수 있는 좋은 방법은 
HATEOAS가 무엇의 약자인지 물어보는 것이다,
● Hypermedia as the Engine of Application State (HATEOAS)
HATEOAS는 Hypermedia as the engine of Application State의 약자로 보는 것처럼 굉장히 복잡한데 자세히 살펴보도록 하자
● Websites allow you to:   
  ■ See Data And Perform Actions (using links)
우리는 웹사이트에 접속할 때마다 데이터를 확인하고 작업을 수행할 수 있다 (Git Hub에서 아무 Repository를 클릭해 보면 볼 수 있음)
GitHub 저장소를 가면 이와 같이 특정 저장소에 대한 데이터를 확인할 수 있다
이 웹사이트에는 데이터가 많다 게다가 이 특정 저장소에서 작업을 수행할 수도 있는데 
별을 다루고 싶다면 로그인을 한 다음 이 특정 사항을 처리하면 된다 
이 저장소를 Fork 하려는 경우 로그인을 한 다음 저장소를 Fork하면 된다
웹사이트에선 데이터를 표시할 뿐만 아니라, 작업도 수행할 수 있는데 

● How about enhancing your REST API to tell consumers how to perform subsequent actions?
  ■ HATEOAS
REST API를 향상하여 소비자에게 후속 작업을 수행하는 방법을 알려주면 어떨까?
HATEOAS가 던지는 질문은 'REST API'를 향상하여 데이터를 반환할 뿐만 아니라 리소스에 관한 작업을 수행하는 방법의 정보를 제공하면 어떨까? 이다
● Implementation Options: 
여기에서는 응답으로 name과 birthDate를 확인할 수 있는데 또한 이 링크는 후속 작업을 수행하는 방법을 소비자에게 알려준다
사용자가 all-users로 다시 탐색하는 방법은 무엇일까?
몇 가지 옵션을 통해 이러한 것을 구현할 수 있는데
  ■ 1: Custom Format and Implementation
첫 번째 옵션은 사용자 정의 형식을 설계하여 사용자 정의 구현을 생성하는 것이다
    ○ Difficult to maintain     
사용자 정의 형식과 구현을 정의하는 것은 유지 관리하기에 까다로운데
------------------------------------------
package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.time.*;

import jakarta.validation.constraints.*;

public class User {

	private Integer id;
	
	@Size(min=2, message = "Name should have atleast 2 characters")
	private String name;
	
	@Past(message = "Birth Date should be in the past")
	private LocalDate birthDate;
...
------------------------------------------
여기에는 id, name, birthDate가 있다
이 링크를 저장하려면 이처럼 구조를 생성해야 한다
_links라는 것을 생성하고 아래에는 이름을 저장하며, 그 아래에는 링크 또는 href를 입력한다 
빈에서 이 모든 구조를 생성한 다음, 사용자 정의 구현을 생성할 수 있지
  ■ 2: Use Standard Implementation     
다른 옵션으로는 표준 구현이 있는데 
    ○ HAL (JSON Hypertext Application Language): Simple format that gives a consistent
    and easy way to hyperlink between resources in your API
여기서 보고 계신 것은 HAL 이 정의한 표준이다, HAL은 JSON 하이퍼텍스트 애플리케이션 언어로 
API의 리소스 간에 하이퍼링크를 생성하는 일관적이고 쉬운 방법을 제공하는 간단한 형식이다
따라서 이 표준에선 REST API의 다른 리소스에 연결하는 방법을 정의한다
_links라는 요소를 생성하면 그 안에 여러 링크를 가질 수 있다 

이것이 바로 HAL이 정의하는 표준인데 표준을 갖고 있으면 좋은 점은 모든 애플리케이션이 이 표준을 따른다는 것이다
HAL 호환 REST API의 응답으 확인할 때 마다 이처럼 이 링크를 받을 수 있다
    ○ Spring HATEOAS: Generate HAL response with hyperlinks to resources 
이러한 응답을 생성하려면 리소스에 대한 하이퍼링크로 HAL응답을 생성하는 스프링 HATEOAS를 사용하면 되는데
그럼 스프링 HATEOAS와 HAL을 구체적으로 살펴볼까??

먼저 의존성을 임포트 해야 한다
스프링 부트 프로젝트에서 HATEOAS의 사용은 무척 간편하다
spring-boot-starter-web을 복사하고 붙여 넣은 다음..

-----------------------------------------------------------------------------------------------------------------

⏺ pom.xml 파일


...
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-data-jpa</artifactId>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

    <!--1: web을 hateoas로 변경해 보자, 됐다, 이렇게 하면 HATEOAS 의존성이 다운로드될 것이다, pom.xml에서 변경할 때마다 애플리케이션을 중지한 다음 다시 시작해야 한다-->
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-hateoas</artifactId>
			<version>3.3.0</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
			<version>3.3.0</version>
		</dependency>
		
		<!--
		<dependency>
			<groupId>org.springdoc</groupId>
			<artifactId>springdoc-openapi-starter-webmvc-ui</artifactId>
			<version>2.0.2</version>
		</dependency>		

		<dependency>
			<groupId>com.fasterxml.jackson.dataformat</groupId>
			<artifactId>jackson-dataformat-xml</artifactId>
		</dependency>
		-->
	
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		<dependency>
			<groupId>com.h2database</groupId>
			<artifactId>h2</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>
...

-----------------------------------------------------------------------------------------------------------------

이제 UserResource로 이동해보자
UserResource에는 retrieveUser 메소드가 있는데 retrieveUser메소드의 역할은 무엇이지?
http://localhost:8080/users/1를 실행하면 
{
  "id": 1,
  "name": "Adam",
  "birthDate": "1994-06-01"
}
특정 사용자의 세부사항이 반환된다
이제 데이터를 반환하는 것 뿐만 아니라, 사용자에게 링크를 반환해야 하는데 
http://localhost:8080/users의 링크를 추가하고, 데이터와 링크로 응답을 생성하려면 
❗ 상당히 중요한 HATEOAS의 두 가지 개념을 사용해야 하는데, 바로 EntityModel과 WebMvcLinkBuilder이다 ❗

User 빈의 일부로 응답에 몇 개 링크를 추가해야 한다
모든 빈에 대한 이 구조를 변경해서는 안 된다
