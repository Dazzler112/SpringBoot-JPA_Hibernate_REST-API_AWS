Why do we have a lot of Dependencies?

● In Game Runner Hello World App, we have very few classes                    ㅡㅡㅡㅡㅡㅡㅡㅡ
● BUT Real World applications are much more complex:                         |      Web      |
 ■ Multiple Layers(Web,Business,Data etc)                                     ㅡㅡㅡㅡㅡㅡㅡㅡ
 ■ Each layer is dependent on the layer below it!                            |    Business   |
  ▢ Example: Business Layer class talks to a Data Layer class                 ㅡㅡㅡㅡㅡㅡㅡㅡ
   ◦ Data Layer class is a dependency of Business Layer class                |      Data     |
  ▢ There are thousands of such dependencies in every application!            ㅡㅡㅡㅡㅡㅡㅡㅡ
● With Spring FrameWork:
 ■ INSTEAD of FOCUSING on objects, their dependencies and wiring
  ▢ You can focus on the business logic of your application!
 ■ Spring Framework manages the lifecycle of objects:
  ▢ Mark components using annotations: @Component(and others..)
  ▢ Mark dependencies using @Autowired
  ▢ Allow Spring Framework to do its magic!
 ■ EX: BusinessCalculationService

이번 학습에선 의존성에 대해 살펴보겠다
왜 우리는 일반 애플리케이션에 많은 의존성을 갖고 있을까?

● In Game Runner Hello World App, we have very few classes 
Hello World App에는 클래스가 거의 없지만
● BUT Real World applications are much more complex:
Real World 애플리케이션은 훨씬 더 복잡하다
 ■ Multiple Layers(Web,Business,Data etc) 
너의 애플리케이션에는 여러 레이어가 있다 웹레이어, 비즈니스 레이어, 데이터 레이어가 그것인데 
 ■ Each layer is dependent on the layer below it!
각 레이어는 아래에 있는 레이어에 의존한다
웹 레이어의 클래스는 비즈니스 레이어의 클래스에게 말을 걸 수 있다
비즈니스 레이어의 클래스가 데이터 레이어의 클래스에게 말을 걸 수도 있고
  ▢ Example: Business Layer class talks to a Data Layer class 
예를 들어, 비즈니스 레이어 클래스는 데이터 레이어 클래스에게 말을 건다고 할 수 있다
◦ Data Layer class is a dependency of Business Layer class
따라서 데이터 레이어 클래스는 비즈니스 레이어 클래스의 의존성이다
  ▢ There are thousands of such dependencies in every application!
모든 애플리케이션에는 이러한 의존성이 수천 개가 있는데, 
● With Spring FrameWork:
Spring 프레임워크를 사용하면 
 ■ INSTEAD of FOCUSING on objects, their dependencies and wiring
객체가 아닌, 의존성과 와이어링에 집중할 수 있다,
  ▢ You can focus on the business logic of your application!
 너는 애플리케이션의 비즈니스 로직에 집중할 수 있다
 ■ Spring Framework manages the lifecycle of objects:
Spring 프렝미워크는 객체의 생명 주기를 관리하는데 
  ▢ Mark components using annotations: @Component(and others..)
너는 이 프레임워크를 사용해서 @Component 어노테이션을 사용해 컴포넌트를 표시하고 ,
  ▢ Mark dependencies using @Autowired
@Autowired 어노테이션을 사용해서 의존성을 표시하기만 하면 된다
  ▢ Allow Spring Framework to do its magic!
그런 다음 Spring 프레임워크의 멋진 기능을 감상하기만 하면 된다!
Spring 프레임워크는 객체를 생성, 의존성을 자동 와이어링하고, 너를 위해 전체 시스템의 준비를 갖춰 준다


그럼 예제를 살펴보자

    ■ Exercise: BusinessCalculationService:          
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|                                                                                                                          |
|                                                                              ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               |
|    public interface DataService                                             |  BusinessCalculationService |              |
|      int[] retrieveData();                                                   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               |
|                                                                                               |                          |
|    public class MongoDbDataService implements DataService                    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               |
|      public int[] retrieveData()                                            |         DataService         |              |
|        return new int[] {11, 22, 33, 44, 55};                                ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               |
|                                                                                  |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |
|    public class MySQLDataService implements DataService                          |ㅡ |     MongoDbDataService     |      |
|      public int[] retrieveData()                                                 |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |
|        return new int[] {1, 2, 3, 4, 5};                                         |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |
|                                                                                  |ㅡ |      MySQLDataService      |      |
|    public class BusinessCalculationService                                           ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |
|      public int findMax()                                                                                                |
|        return Arrays.stream(dataService.retrieveData())                                                                  |
|                                    .max().orElse(0);                                                                     |
|                                                                                                                          |
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
● Create classes and interfaces as needed
 필요에 따라 모든 클래스와 인터페이스를 만들수 있다
 ■ Use constructor injection to inject dependencies
  생성자 주입을 사용해서 의존성을 주입하고, 
 ■ Make MongoDbdataService as Primary
  MongoDbDataService에 우선권을 부여하는 방식을 추천한다
  우리에게 주어진 2개의 컴포넌트 중에서 MongoDbDataService가 우선권을 갖게 되는 건데 
 ■ Create a Spring Context
  Spring 컨텍스트를 만들고, 가능하다면 
  ▢ Prefer annotations
  어노테이션을 사용하는 것이 좋다, 이 Spring 컨텍스트를 시작한 후 
  ▢ Retrieve BusinessCalculationService bean and run findXaxmethod
  BusinessCalculationService를 Spring 컨텍스트에서 검색하고, findMax 메소드를 실행해보기 바란다


그럼 예제를 살펴보자 BusinessCalculationService라는 비즈니스 클래스를 생성해보겠다
BusinessCalculationService로 많은 유연성을 얻어야 한다 
우리는 MongoDb와 MySQL에 데이터를 갖고 있는데
하나의 데이터베이스에 다른 데이터베이스로 유연하게 이동할 수 있어야 한다
따라서 DataService 인터페이스를 생성해야 한다
이 DataService 인터페이스에는 2개의 구현이 있는데 MongoDbDataService와 MySQLDataService가 그것이다

여기에서 이 클래스의 상위 템플릿을 확인할 수 있다
DataService는 retrieveData라는 메소드를 포함하고 있으며, MongoDbDataService와 MySQLDataService가 retrieveData메소드의 샘플 구현을 제공하고 있다
이것들이 하드코딩된 데이터를 반환한다 지금은 실제 데이터베이스에 대해 신경 쓰지 않아도 된다
일부 코드를 하드코딩하고 반환하는 것만으로 충분하다
보다시피 BusinessCalculationService가 DataService에게 말을 걸어야 하는데 DataService에게 말을 걸어야 하며, 이에 대한 비즈니스 로직을 다소 수행해야 한다
findMax라는 메소드를 갖고 있는데, 이 메소드는 반환되는 데이터의 최댓값을 찾아준다 
{11, 22, 33, 44, 55}이것이 반환되는 데이터라고 가정하면 이 메소드는 11,22,33,44,55중 55를 최댓값으로 구할것이다
 return Arrays.stream(dataService.retrieveData()).max().orElse(0); 여기에선 최댓값을 구하기 위해 함수형 프로그래밍을 사용하고 있는데

예제를 직접 해보기 바란다
