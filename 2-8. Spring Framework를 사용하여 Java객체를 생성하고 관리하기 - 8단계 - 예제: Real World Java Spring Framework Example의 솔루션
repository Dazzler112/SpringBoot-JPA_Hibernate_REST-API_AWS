

    ■ Exercise: BusinessCalculationService:          
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|                                                                                                                          |
|                                                                              ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               |
|    public interface DataService                                             |  BusinessCalculationService |              |
|      int[] retrieveData();                                                   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               |
|                                                                                               |                          |
|    public class MongoDbDataService implements DataService                    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               |
|      public int[] retrieveData()                                            |         DataService         |              |
|        return new int[] {11, 22, 33, 44, 55};                                ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               |
|                                                                                  |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |
|    public class MySQLDataService implements DataService                          |ㅡ |     MongoDbDataService     |      |
|      public int[] retrieveData()                                                 |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |
|        return new int[] {1, 2, 3, 4, 5};                                         |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |
|                                                                                  |ㅡ |      MySQLDataService      |      |
|    public class BusinessCalculationService                                           ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |
|      public int findMax()                                                                                                |
|        return Arrays.stream(dataService.retrieveData())                                                                  |
|                                                                                                        |
|                                                                                                                          |
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● Create classes and interfaces as needed
 ■ Use constructor injection to inject dependencies
 ■ Make MongoDbdataService as Primary
 ■ Create a Spring Context
  ▢ Prefer annotations
  ▢ Retrieve BusinessCalculationService bean and run findXaxmethod



예제 솔루션을 시작해보겠다


-------------------------------------------------------------------------------------------------------------------


⏺ RealWorldSimpleSpringContextLauncherApplication 클래스파일


package com.example.demo.c1;

import java.util.*;

import org.springframework.context.annotation.*;


//이제 예제에 대한 클래스를 생성하는 작업을 시작해야 한다 먼저 DataService에 대한 인터페이스를 만들어야 한다//1: 생성하기 위해 DataService 인터페이스로...
@Configuration
@ComponentScan
public class RealWorldSimpleSpringContextLauncherApplication {
	
	public static void main(String[] args) {
		//6: 컨텍스트를 시작하고 여기에 정의된 모든 Bean을 출력해야 하는데 먼저 결과를 봐보자
		/*
		realWorldSimpleSpringContextLauncherApplication
		businessCalculationService
		mongoDbDataService
		mySQLDataService
		모든 Bean을 출력하고 있다 우린 businessCalculationService를 얻고 이에 대해 메소드를 실행해야 하는데 어떻게 할 수 있을까?
		*/
		//7:방법은 그리 어렵지 않다
		
		try(var context = 
				new AnnotationConfigApplicationContext
				(RealWorldSimpleSpringContextLauncherApplication.class)) {
			
			Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);

			//7:앞서 여러번 했던 작업이였다 context.getBean(BusinessCalculationService.class)를 입력한다
			//이 Bean에 대해 정의된 findMax 메소드를 실행해야 하고 context.getBean(BusinessCalculationService.class)들을 syso안에 입력한다
			//그리고 실행해보자
			System.out.println(
					context.getBean(BusinessCalculationService.class)
					.findMax());
			/*출력결과 ==>
			55
			*/
			
		}
	} 
}

---------------------------------------------------


⏺ DataService 인터페이스


package com.example.demo.c1;

public interface DataService {
	//1: 예제의 구현을 써줌
	int[] retrieveData();   

	//2: 이제 이 특정 인터페이스의 구현을 생성해 보겠다 이경우 2개의 구현이 필요한데	MongoDbDataService와 MySQLDataService를 만들어야 한다 //2-1: MongoDbDataService 클래스파일로..
}

---------------------------------------------------


⏺ MongoDbDataService 클래스파일



package com.example.demo.c1;

import org.springframework.context.annotation.*;
import org.springframework.stereotype.*;
//2-1 : 예제처럼 DataService 인터페이스를 구현해야한다 먼저 implements를 해주고implements를 해주자 마자 컴파일 오류가 발생했는데 ctrl+1을 눌러 add Unimplemented Method를 선택한다
//그리고 일부 데이터를 반환할 수 있다 예제에 있는 동일한 데이터를 사용할 것이다
//2-2: 다음 MySQLDataService클래스에도 같은 작업을 해 줄 것이다 //MySQLDataService클래스파일로....

@Component
//4-1 : @Component를 달아주자

@Primary
//5:@Primary 입력
public class MongoDbDataService implements DataService{

	@Override
	public int[] retrieveData() {
		
		return new int[] {11, 22, 33, 44, 55};
	}

}
//이제 모두 Spring 프레임워크가 관리하게 됐다 
//5: 다음으로 MongoDB에 우선권을 줘야 하는데 이대로 실행하면 여러 개의 후보 예외가 발생한다 일치하는 후보가 많다고 하는 예외를 확인하게 될 것이다
//이러한 이유로 우선권을 줘야 하는데 @Primary를 입력해주자

//이제 Spring 컨텍스트를 생성하고, Bean을 검색한 다음 findMax를 실행할 수 있다
//6: 그럼 Spring 컨텍스트에서 작업을 해보겠다 //RealWorldSimpleSpringContextLauncherApplication클래스파일로...


---------------------------------------------------



⏺ MySQLDataService 클래스파일




package com.example.demo.c1;

import org.springframework.stereotype.*;

//2-2: 마찬가지로 예제에있는 데이터를 넣어주자 이제 모두 준비되었다
//3 : BusinessCalculationService를 만들 차례인데 새클래스를 만들자 //BusinessCalculationService클래스 파일로..

@Component
//4-1 : @Component를 달아주자
public class MySQLDataService implements DataService{

	@Override
	public int[] retrieveData() {
		return new int[] {1, 2, 3, 4, 5};
	}

}

---------------------------------------------------


⏺ BusinessCalculationService 클래스파일



package com.example.demo.c1;

import java.util.*;

import org.springframework.stereotype.*;

//3: BusinessCalculationService의 예제 로직이 필요한데 이 비즈니스 로직을 수행하는 findMax 메소드를 사용해야한다
//복붙하고 다음 컴파일을 하자 그리고 이제 여기에 DataService가 필요한데
@Component
public class BusinessCalculationService {
	//여기에 DataService = dataService; 를 입력하고 private를 추가한다
	private DataService dataService; 

	//그리고 지침을 확인해보자 필요에 따라 모든 클래스와 인터페이스를 만들어 두었는데 
	//생성자 주입을 사용해서 의존성을 주입해야 한다
	//DataService는 BusinessCalculationService의 의존성인데, 우린 생성자 주입을 사용해야 한다
	
	//4: 이제 여기에 생성자를 만들어보겠다 public BusinessCalculationService (DataService dataService)를 입력하자
	//{}안에 super();에 이어 this.dataService = dataService;를 입력하면 된다
	//이것이 준비된 생성자이다 다음으로 이것을 컴포넌트로 만들어야 한다 위에 @Component 적어주자!
	public BusinessCalculationService (DataService dataService) {
		super();
		this.dataService = dataService;
	}
	
	 public int findMax() {
		 return Arrays.stream(dataService.retrieveData())
				 .max().orElse(0); 
				 
	 }
}
//이렇게 BusinessCalculationService에 컴포넌트를 갖게 됐는데 MySql,MongoDb에도 적용해주자 //4-1:Mysql, MongoDb클래스로...


-------------------------------------------------------------------------------------------------------------------




  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               
 |  BusinessCalculationService |              
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               
                |                          
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               
 |         DataService         |              
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ               
  |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       
  |ㅡ |     MongoDbDataService     |      
  |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       
  |   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       
  |ㅡ |      MySQLDataService      |      
    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

일반적으로 실제 애플리케이션을 다루는 경우, 이런 방식으로 주어지게 된다
데이터 서비스를 호출하는 비즈니스 서비스를 갖게 된다
보다시피 비즈니스 로직에만 집중하고 있는데 
데이터 서비스 및 비즈니스 서비스의 인스턴스를 생성하는 방법, 의존성을 와이어링하는 방법에는 그다지 주목할 필요는 없다
이제 이 모든 것들은 Spring 프레임워크가 담당하고 있으며, Spring 프레임워크 덕분에 우리가 비즈니스 로직에 집중할 수 있는 것이다

