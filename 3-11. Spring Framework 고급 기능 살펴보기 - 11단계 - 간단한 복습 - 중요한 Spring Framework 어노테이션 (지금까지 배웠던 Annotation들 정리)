
Quick Review of Important Spring Annotations

Annotation                     Description                                                  
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@Configuration                 Indicates that a class declares one or more @Bean methods and may be processed by the Spring container
                               to generate bean definitions
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@ComponentScan                 Define specific pakages to scan for components. If specific packages are not defined, scanning will occur 
                               from the package of the class that declears this annotation
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Bean                          Indicates that a method produces a bean to be managed by the Spring container
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Component                     Indicates that an annotated class is a "component"
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Service                       Specialization of @Component indicating that an annotated class has business logic
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Controller                    Specialization of @Component indicating that an annotated class is a "Contoller" (e.g.a
                               web controller). Used to define controllers in your web applications and REST API
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Repository                    Specialization of @Component indicating that an annotated class is used to retrive and/or manipulate
                               data in a database
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


이번 단계에서는 지난 여러 섹션에서 배웠던 중요 Spring 어노테이션에 대해 살펴보겠다

● @Configuration
Indicates that a class declares one or more @Bean methods and may be processed by the Spring container to generate bean definitions
@Configuration은 클래스가 @Bean 메서드를 하나 이상 선언함을 나타낸다 Spring 컨테이너에서 처리하여 Bean 정의를 생성한다 
@Configuration을 추가하면 Java 설정 파일을 만든다는 것을 의미한다 Java 설정 파일에선 메서드를 몇 개든 정의할 수 있고 이러한 메서드에 @Bean 어노테이션을 추가할 수 있다 
그러면 메서드로 반환되는 모든 값에 Spring이 Bean을 자동으로 생성한다 

예제)
package com.example.demo;
import org.springframework.context.annotation.*;
import com.example.demo.game.*;

@Configuration
public class GamingConfiguration {
	@Bean
	public GamingConsole game () {
		var game = new PacmanGame();
		return game; 
	}

	@Bean
	public GameRunner gameRunner (GamingConsole game) {
		var gameRunner = new GameRunner(game);
		return gameRunner; 
	}
}
@Configuration 클래스의 예를 들면, 전에 만들었던 GamingConfiguration이 있다
여기서 @Bean 어노테이션을 사용해 Bean의 수를 정의하고 있다


● @ComponentScan
Define specific pakages to scan for components. If specific packages are not defined, scanning will occur from the package of the class that declears this annotation
@ComponentScan은 컴포넌트를 스캔할 특정 패키지를 정의한다 Spring Framework에선 모든 컴포넌트가 정의된 위치를 알아야 한다
ComponentScan으로 가능하다 이 어노테이션을 사용하면 컴포넌트를 스캔할 패키지를 지정할 수 있다 패키지를 지정하지 않으면 이 어노테이션을 선언한 클래스의 패키지에서 스캔한다

예제)
package com.example.demo.a0;
import java.util.*;
import org.springframework.context.annotation.*;

@Configuration
@ComponentScan
public class SimpleSpringContextLauncherApplication2 {
	
	public static void main(String[] args) {

		try(var context = 
				new AnnotationConfigApplicationContext
				(SimpleSpringContextLauncherApplication2.class)) {
			
			Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);
		}
	} 
}
스캔할 패키지를 지정하거나 @ComponentScan을 넣기만 하면 된다 현재 패키지가 스캔될 것이다
현재 패키지뿐만 아니라 하위 패키지에서도 컴포넌트를 스캔한다는 점을 꼭 기억해야 한다 


● @Component
Indicates that an annotated class is a "component"
@Componenet는 어노테이션한 클래스가 컴포넌트임을 나타낸다
@Compoenent 클래스가 ComponentScan에 속한다면 Spring Bean이 생성된다 


● @Service  
Specialization of @Component indicating that an annotated class has business logic
@Service는 어노테이션한 클래스에 비즈니스 논리가 있음을 나타내는 @Component의 한 종류이다


● @Controller
Specialization of @Component indicating that an annotated class is a "Contoller" (e.g.a web controller). Used to define controllers in your web applications and REST API
@Controller는 어노테이션한 클래스가 컨트롤러임을 나타내는 @Component의 한 종류이고 웹 컨트롤러를 예로 들 수 있다
일반적으로 웹 애플리케이션과 REST API에서 컨트롤러를 정의하는데 사용된다 


● @Repository
Specialization of @Component indicating that an annotated class is used to retrive and/or manipulate data in a database
@Repository도 마찬가지로 @Component의 종류 중 하나인데 어노테이션한 클래스가 데이터베이스에서 데이터를 검색하거나 조작하는 데 사용된다는 의미이다





Quick Review of Important Spring Annotations - 2

Annotation                                   Description                                                  
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@Primary                                     Indicates that a bean shoult be given preference when multiple candidates are qualified to autowire a single-
                                             valued dependency
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Qualifier                                   Used on a field or parameter as a qualifier for candidate beans when autowiring
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Lazy                                        Indicates that a bean has to be lazily initialized. Absence of @Lazy annotation will lead to eager 
                                             initialization.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Scope (value =                              Defines a bean to be a prototype-a new instance will be created every time you refer to the bean. 
ConfigurableBeanFactory.SCOPE_PROTOTYPE)     Default scope is singleton - one instance per IOC container.
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


중요한 Spring 어노테이션 몇 가지를 더 살펴보자

● @Primary
Indicates that a bean shoult be given preference when multiple candidates are qualified to autowire a single-valued dependency
@Primary는 여러 Bean이 단일 값 의존성에 자동 연결될 후보일 때 Bean에 우선 순위를 부여해야 함을 나타낸다
MarioGame, PacmanGame, SuperContraGame과 같이, 여기 게임 후보가 여러개 있는데 MarioGame에 우선 순위를 두었지

예제)
package com.example.demo.game;
import org.springframework.context.annotation.*;
import org.springframework.stereotype.*;

@Component

@Primary
public class MarioGame implements GamingConsole{.....

그러니 후보가 여러 개일 때 특정한 Bean에 우선 순위를 두려면 Primary를 사용하면 된다 


● @Qualifier
Used on a field or parameter as a qualifier for candidate beans when autowiring
@Qualifier는 자동 연결 시 후보 Bean의 한정자로 필드나 매개변수에서 사용된다 @Primary는 아주 일반적이다 우선 순위를 지정할 뿐이다
반면 @Qualifier는 아주 구체적이다 모든 컴포넌트에 한정자를 추가할 수 있고 자동 연결 시 한정자를 사용할 수 있다

@Component
public class GameRunner {
	private GamingConsole game;

	public GameRunner (@Qualifier("SuperContraGameQualifier") GamingConsole game) {
		this.game = game;
	}

여기서 특정한 한정자로 Bean을 자동 연결하겠다고 작성할 수 있다 아주 구체적이다

@Primary는 일반적인 우선 순위를 정할 때 쓰고, @Qulifier는 아주 구체적이다 딱 @Qualifier("SuperContraGameQualifier") 이것만 사용하려고 할 때 @Qualifier를 사용한다



● @Lazy
Indicates that a bean has to be lazily initialized. Absence of @Lazy annotation will lead to eager initialization.
Spring Bean은 일반적으로 즉시 초기화된다 컨텍스트가 실행되는 대로 초기화 된다 
하지만 Bean을 지연 초기화하려 한다면 @Lazy 어노테이션을 사용하면 된다



다음은 프로토타입 스코프이다
● @Scope (value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)
Defines a bean to be a prototype-a new instance will be created every time you refer to the bean. Default scope is singleton - one instance per IOC container.
(value = ConfigurableBeanFactory.SCOPE_PROTOTYPE)이와 같이 특정 컴포넌트에 프로트타입 스코프를 정의할 수 있다
이렇게 Bean을 프로토타입으로 정의한다 
프로토타입이란 무슨 의미일까?
Bean을 참조할 때마다 인스턴스가 새로 만들어진다는 뜻이다
하지만 기본적인 스코프는 싱글톤이다
Scope 이노테이션이 없거나, @Scope 어노테이션의 값을 SCOPE_SINGLETON으로 설정한 경우에는 IOC 컨테이너 특정 Bean의 인스턴스 하나씩만 주어진다
싱글톤 스코프일 때는 Bean을 100번 참조하더라도 같은 인스턴스가 다시 사용된다.






Quick Review of Important Spring Annotations - 3

Annotation                         Description                                                  
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
@PostConstruct                     Identifies the method that will be executed after dependency injection is done to perform any initialization
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@PreDestroy                        Identifies the method that will receive the callback notification to signal that the instance is in the process of being
                                   removed by the container. Typically used to release resources that it has been holding.
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Named                             Jakarta Contexts & Dependency Injection (CDI) Annotation similar to Component
-------------------------------------------------------------------------------------------------------------------------------------------------------------
@Inject                            Jakarta Contexts & Dependency Injection (CDI) Annotation similar to Autowired
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ


몇 가지 어노테이션을 더 살펴보자, 


● @PostConstruct
Identifies the method that will be executed after dependency injection is done to perform any initialization
@PostConstruct는 의존성 주입이 수행된 이후 초기화를 위해 실행될 메서드를 나타낸다 모든 의존성을 Bean에 주입한 후
초기화하려는 경우, 모든 의존성이 준비되는 대로 데이터베이스에서 몇 가지 값을 가져오려는 경우에 @PostConstruct를 사용하면 된다


● @PreDestroy 
Identifies the method that will receive the callback notification to signal that the instance is in the process of being removed by the container. Typically used to release resources that it has been holding.
다음으로 @PreDestroy는 컨테이너에서 인스턴스를 삭제하는 과정을 거치고 있음을 알려주는 콜백 알림을 수신하는 메서드를 나타낸다 
보통 특정한 Bean에서 보유하고 있는 리소스를 해제하는 데 사용된다 
컨테이너나 Spring IoC 컨텍스트에서 Bean이 삭제되기 전에 @PreDestroy 어노테이션이 붙은 메서드를 호출한다
리소스를 해제해야 하거나 정리해야 한다면 @PreDestroy어노테이션이 붙은 메서드에 구현하는게 좋다



● @Named
Jakarta Contexts & Dependency Injection (CDI) Annotation similar to Component
다음은 @Named이다 CDI, 즉 Contexts & Dependency Injection에서 다뤘다 Spring에서 CDI 어노테이션을 구현하는 규격이었고,
@Named 는 CDI 어노테이션이며 @Component와 유사하다


또 다른 어노테이션이다
● @Inject 
Jakarta Contexts & Dependency Injection (CDI) Annotation similar to Autowired
CDI 어노테이션으로 살펴봤던 @Inject이다 
Autowired와 아주 비슷하다







이번 학습에선 지금까지 배웠던 중요한 Spring 어노테이션 몇 가지를 살펴봤다
