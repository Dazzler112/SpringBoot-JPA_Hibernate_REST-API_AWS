

지난 시간에는 Spring Boot 프로젝트를 생성해서 IDE에 가져오고 실행도 해 봤다 
이번 시간에는 Hello World REST API를 생성해 보자
패키지로 가서 우클릭 New > Class 를 선택 
HelloWorldController를 만들거고 패키지는 기본값 뒤에 .helloworld 를 붙인다 그리고 생성
이곳에 뭘 할 꺼냐면 REST API를 노출할 것이다

----------------------------------------------------------------------------------------------------------------------


⏺ HelloWorldController 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.helloworld;


//별1: 이 컨트롤러가 REST API를 노출할 거고 이게 첫 번째이다
//REST API
public class HelloWorldController {

    //별2:다음으론 REST API에 URL을 부여할 것이다 hello-world라고 부르기로 하자
    // /hello-world
    
    //별3:이걸 브라우저에 입력하면, 정확히는 localhost:8080/hello-world를 입력하면 텍스트를 반환하도록 만들것이다, "Hello World"를 반환하도록 말이다
    //그게 우리가 이 컨트롤러를 가지고 하려는 작업이다, 간단한 메서드와 함께 시작해 보자
    //"Hello World"
}

----------------------------------------------------------------------------------------------------------------------




----------------------------------------------------------------------------------------------------------------------



⏺ HelloWorldController 클래스파일




package com.in28minutes.rest.webservices.restfulwebservices.helloworld;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;

//REST API
//1-2: 먼저 이 컨트롤러를 REST 컨트롤러로 지정한다 지정하는 방법은 @RestController 어노테이션을 사용하는 것이다, 특정 컨트롤러를 REST 컨트롤러로 만드는 어노테이션이다
//여기에서 REST API를 노출할 수 있다, 이제 이 메서드에 특정 URL을 제공할 건데 어떻게 하면 될까? //1-3:helloWorld() 메서드 위로 가서 작성...
@RestController
public class HelloWorldController {

	// /hello-world

	//"Hello World"

  //1: public을 먼저 입력한다 반환 값은 문자열이겠지, 메서드 이름을 지정해야지 helloWorld라고 하겠다
  //1-3: RequestMapping을 추가하는 방법이 있다 @RequestMapping을 하면 import에 RequestMapping이 임포트된 게 보인다 
  //1-3 계속: 여기에서 GET 메서드를 사용할 것이다 사용자가 브라우저에 무언가를 입력하면 GET 메서드가 표시된다, 이 요청을 GET 메서드에 연결하는 거다,
  //1-3 계속: method=RequestMethod를 입력한다 import에 비슷한 임포트가 하나 더 생겼다 그리고 뒤에 .GET을 추가한다, 이 메서드를 GET 요청에 연결하는 것이다
  //1-3 계속: 연결하는 URL은 path를 사용해 구성할 수 있다 path 값은 위에 있는 이 /hello-world가 되겠지 그리고 저장
	@RequestMapping(method = RequestMethod.GET, path = "/hello-world")
	public String helloWorld() {

    //1-1:메서드 본문에는 return을 하는데 "Hello World"를 반환할 것이다 이제 이 메서드로 "Hello World"를 반환할 수 있게 되었다
    //이제 이걸 어떻게 특정 URL에 노출할까?//1-2: 클래스 위로 가서 어노테이션 작성
		return "Hello World";
	}
  
}

----------------------------------------------------------------------------------------------------------------------
                                                                    |
그러면 애플리케이션이 재시작되면서 변경 사항이 반영된다                  |
                                                                    |
브라우저로 가서 http://localhost:8080/hello-world 를 입력한다         |
이게 우리가 생성한 URL이다                                            V
                                                                    
----------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/hello-world 사이트 화면 ==>


Hello World

----------------------------------------------------------------------------------------------------------------------

그러면 Hello World 텍스트가 반환된다 GOOD

🔵 애플리케이션이 에러가 나는경우
혹 잘되지 않으면 먼저 HelloWorldController 패키지부터 확인해보고
1. 첫 번째 RestfulWebServicesApplication이 속한 패키지의 하위 패키지에 속해 있는지 확인해라
RestfulWebServicesApplication는 com.in28minutes.rest.webservices.restfulwebservices에 속해 있고
그 하위 패키지에 helloworld 컨트롤러를 만들었다
여기에 HelloWorldController 패키지가 있어야 한다 

2. 두 번째, 클래스에 @RestConroller를 사용했는지 확인해라

3, 세 번째, @RequestMapping이 올바른 메서드와 패스와 함께 사용됐는지 확인해라
   메서드는 RequestMethod.GET이고 패스는 /hello-world이다



모두 제대로 되어 있으면 http://localhost:8080/hello-world로 요청을 보냈을 때 응답이 제대로 반환돼야 한다




이제 수준을 좀 더 높여 보자
매핑을 하는 더 좋은 방법이 있는데 @GetMapping 이라는 걸 활용하는 걸 추천한다 

----------------------------------------------------------------------------------------------------------------------



⏺ HelloWorldController 클래스파일




package com.in28minutes.rest.webservices.restfulwebservices.helloworld;

import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RestController;


@RestController
public class HelloWorldController {

  //2:@RequestMapping과는 다른 어노테이션이고 임포트하면 GetMapping으로 끝나는 임포트가 추가된 걸 볼 수 있다 
  //GetMapping을 사용하면 메서드를 지정할 필요가 없다 따라서 메서드 부분은 삭제하고 패스만 남겨 두겠다
  //GetMapping과 마찬가지로 PostMapping이나 PutMapping등 활용할 수 있는 메서드는 다양하다 ( 교육자의 경우 @RequestMapping보다 이쪽이 훨씬 더 알아보기 쉬운거 같다 좋다고 한다 (앞으로 강의를 진행하면서 이 방식을 사용한다고 함.))
  //저장하고 임포트 정리 이 RequestMapping과 RequestMethod 두 임포트는 지금은 사용하지 않을 거라서 import 정리함 두 임포트가 사라졌고 코드를 저장한다
	@GetMapping(path = "/hello-world")
	public String helloWorld() {
		return "Hello World";
	}
}


----------------------------------------------------------------------------------------------------------------------
그리고 사이트 재접속                                                              |
                                                                                V
----------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/hello-world 사이트 화면 ==>


Hello World

----------------------------------------------------------------------------------------------------------------------
아까와 같은 응답이 돌아왔다 








이번 시간에는 Hello World 컨트롤러를 만들어 봤다
/hello-world URL에 연결된 메서드를 만들어 봤고, 간단한 Hello World 응답을 반환해 봤다
더 복잡한 과제에 도전할 준비가 됐니? 다음 강의에서 해보자
