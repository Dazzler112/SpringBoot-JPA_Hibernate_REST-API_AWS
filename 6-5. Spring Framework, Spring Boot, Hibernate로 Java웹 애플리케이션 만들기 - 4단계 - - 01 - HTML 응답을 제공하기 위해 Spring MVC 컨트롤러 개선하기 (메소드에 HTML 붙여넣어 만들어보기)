

지난 단계에서 우린 간단한 컨트롤러 메서드를 만드는 방법을 배웠고, 
실제 세계에선 웹 페이지들이 훨씬 더 복잡하다, 그래서 HTML이란걸 사용한다,
Hyper Text Markup Language를 줄여 HTML이라고 하고 
이번 단계에선 HTML을 리턴하는 간단한 메서드를 만들어볼 건데 

같은 메서드를 다시 복사할 거고, 이번에는 "say-hello-html"이라고 할 것이다 


------------------------------------------------------------------------------------------------------------------------


⏺ SayHelloController 클래스파일


package com.firstapplication.springboot.myfirstwebapp.hello;

import org.springframework.stereotype.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class SayHelloController {

	
	//"say-hello" => "Hello! What are you learning today?"
	
	//say-hello
	// http://localhost:8086/say-hello

	@RequestMapping("say-hello")
	@ResponseBody
	public String sayHello() {
		return "Hello! What are you learning today?";
	}

  //1: 이번엔 "say-hello-html"이라 할 것이다 그리고 메서드 이름도 sayHelloHtml()이라고 해주자
  //그리고 여기서 실제 HTML을 리턴하려고 한다 먼저 여기에 약간의 HTML을 하드코딩할 것이다 HTML을 하드코딩하면 복잡해지는 걸 알게 될 것이고, 그래서 보통 뷰를 사용하게 된다
  //그럼 여기서 먼저 HTML을 하드코딩해 보겠다  //2: 아래의 ● HTML 예시로 넘어가자..
	@RequestMapping("say-hello-html")
	@ResponseBody
	public String sayHelloHtml() {
    //3: 너는 문자열을 직접 사용할 수도 있다 하지만 문자열을 첨부하는 건 효율이 낮다, 그래서 이런 경우에는 
    //StringBuilder나 StringBuffer를 사용하게 된다 

    //그리고 이렇게 StringBuffer sb = new StringBuffer라고 해준다
    //그리고 여기에 모든 걸 계속 첨부할 수 있다, 그럼 여기에 넌 그걸 붙여 넣고 sb.append()라고 하고 각각 첨부할 수 있다
    //<html>, <head>도 넣어주고, <title>도 ,<body>도 넣어준다 보는 것처럼 점점 힘들어진다, 맞지? 그래서 시간이 지나면서 이걸 관리하고 변경하려면 보다시피 아주 복잡해지는 걸 알 수 있다  
    //여기서 우린 그냥 HTML 콘텐츠를 가져다 그걸 StringBuffer안에 넣고있다 그리고 여기서 "Hello! What are you learning today?" 이걸 리턴하는 대신에 sb.toString()을 리턴할 수 있다
    //그럼 너가 이 URL을 검색창에 들어가면 이 모든 컨텐츠가 너의 브라우저로 리턴될 것이다 URL은 say-hello-html일 것이고 URL을 검색해서 가보자
    StringBuffer sb = new StringBuffer();
		sb.append("<html>");
		sb.append("<head>");
		sb.append("<title>My first HTML page</title>");
		sb.append("</head>");
		sb.append("<body>");
		sb.append("My first html page with body");
		sb.append("</body>");
		sb.append("</html>");

		return sb.toString();
	}
}


------------------------------------------------------------------------------------------------------------------------

2: 
● HTML 예시
일반적으로 HTML의 구조는 이런 형태이다 이렇게 <html>이 있고, <head>와 닫는 태그도있고 그리고 <body>도 있다

<html>
  <head>
    <title>My first HTML page</title>
  </head>
  <body>
    My first html page with body
  </body>
</html>
그리고 <head>안에 너의 HTML 페이지에 관련된 모든 헤딩 같은 게 들어간다 
예를 들어, 어떤 웹 페이지에 제목을 넣고 싶으면 <title>이라 하고 My first HTML page라 할 수 있다
그리고 <body>안에 너는 My first html page with body라고 넣을 수 있다 
HTML이 지원하는 태그는 많이 있다 지금은 우선 태그는 신경쓰지 않기로 하자 
여기 있는 것은 기본적인 HTML에만 집중하겠다 

이런 게 일반적인 HTML이고 그걸 형식화하면 이런 모습이 될 것이다 <head>와 <tilte>, <body>가 있다 
이렇게 <html>아래에 <head>가 있고, 거기에 <title>이 있고 <body>가 있다 

이제 이걸 응답으로서 리턴하려고 한다, 그리고 이걸 사용하고 웹 페이지에 표시하려고 한다
그걸 어떻게 할 수 있을까? //3:다시 SayHelloController 클래스파일로..




-------------------------------------------------------------

http://localhost:8086/say-hello-html 웹 사이트 뷰


My first html page with body

-------------------------------------------------------------
그럼 My first html page with body가 보이고, 여기에 My first HTML page라는 제목을 볼 수 있을 것이다 







그러면

	@RequestMapping("say-hello-html")
	@ResponseBody
	public String sayHelloHtml() {

    StringBuffer sb = new StringBuffer();
		sb.append("<html>");
		sb.append("<head>");
		sb.append("<title>My first HTML page</title>");
		sb.append("</head>");
		sb.append("<body>");
		sb.append("My first html page with body");
		sb.append("</body>");
		sb.append("</html>");

		return sb.toString();
	}
이렇게 여기서 HTML을 작성하고 그걸 리턴할 수 있는 걸 알 수 있다
하지만 그게 정말 복잡하다는 것도 알 수 있다 
이건 아주 간단한 HTML인데 그런데도 내용이 아주 아주 복잡해진다 
HTML이 200줄이거나 500줄인 경우를 상상해 봐라 
이런 방식은 확장성이 낮다, 그래서 우리가 웹 애플리케이션을 제작할 때는 뷰라는 걸 사용하게 된다 

다음 단계에선 처음으로 뷰를 만드는 방법을 알아보겠다 
