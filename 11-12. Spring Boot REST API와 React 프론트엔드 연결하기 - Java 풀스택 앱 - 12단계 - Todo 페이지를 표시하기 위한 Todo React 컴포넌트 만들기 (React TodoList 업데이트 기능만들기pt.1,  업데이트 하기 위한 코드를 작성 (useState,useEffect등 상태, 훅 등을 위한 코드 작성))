

이번 단계에선 Todo 업데이트 기능을 추가해보자
우린 이제 Todo를 삭제할 수 있는데 
기존의 Todo를 업데이트하는 방법은 어떨까?
우린 이번 단계에서 그걸 자세히 알아보겠다

그럼 ListTodosComponent로 가서 
먼저 버튼을 추가해볼까?

----------------------------------------------------------------------------------------------------------------------

⏺ vsc

⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { deleteTodoApi, retrieveAllTodosForUsernameApi } from "./api/TodoApiService"
import { useAuth } from "./security/AuthContext"

function ListTodosComponent() {

    const today = new Date()

    const authContext = useAuth()

    const username = authContext.username

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    const [message, setMessage] = useState(null)

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
        retrieveAllTodosForUsernameApi(username)
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    function deleteTodo(id) {
        console.log('clicked ' + id);
        deleteTodoApi(username, id)
        .then(

            () => {
                setMessage(`Delete of todo with id = ${id} successful`)
                refreshTodos()
            }
            //1: Display message
            //2: Update Todos list
        ) 
        .catch(
            
        )
    }

    //1-2: 이 deleteTodo(id)메서드를 복사해서 updateTodo(id)라고 해주자
    function updateTodo(id) {
        console.log('clicked ' + id);

        //1-3: 우린 updateTodo()의 경우에 우린 바로 API를 호출할 수 없다, 맞지? 특정한 Todo 페이지로 리디렉션을 해야 하지
        //그럼 너는 Todo 페이지를 만들고 거기로 리디렉션을 해야 한다, 그리고 거기서 사용자는 세부정보를 변경할 수 있고, 우리는 더 나아가서 페이지를 표시할 수 있다 
        //그럼 지금 이걸 저장해보자, 지금 console.log('clicked' + id)를 제외한 모든 코드를 삭제할 것이다 (console.log('clicked ' + id); 를 제외한 모든 코드는 삭제했음..)
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            
            {message && <div className="alert alert-warning">{message}</div>}
            
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                          //1: Update 버튼을 넣을거고 //1-1: 아래로..
                            <th>Update</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
                                        <td> <button className="btn btn-warning" 
                                                     onClick={() => deleteTodo(todo.id)}>Delete</button> </td>

                                      //1-1: 여기 위에 있는 버튼과 똑같은 버튼을 넣어줄 것이다 그럼 deleteTodo 버튼을 복사하고, updateTodo로 변경해보자, {todo.id}는 그대로 쓸거고 
                                      //텍스트 부분은 Update가 되겠지 그리고 className은 btn-warning이 아니라 btn-success라고 할 것이다
                                      //그리고 deleteTodo가 아니고 updateTodo가 있어야 겠지 //1-2: 위로 가서 deleteTodo() 아래에 작성
                                        <td> <button className="btn btn-success" 
                                                     onClick={() => updateTodo(todo.id)}>Update</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그리고 Update라고 해준다, 오른쪽 클릭을 하고 Inspect(검사)를 눌러보자
Console로 가보면 
                                        |
                                        V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                                       Login   Logout
     ______________________________________________________________________________________________________

                                        Things You Want To Do!

                        
                     Description	          is Done?     Target Date       Delete             Update
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
                   Get AWS Certified	           false     Sat Jul 05 2036   | Delete |     | Update |
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾                                                                      
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
                     Learn DevOps		   false     Sat Jul 05 2036   | Delete |               | Update |     
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
               Learn Full Stack Development	   false     Sat Jul 05 2036   | Delete |       | Update |
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 1                                                                    ListTodosComponent.jsx:48
------------------------------------------------------------------------------------------------------------------

clicked 1이라고 나오지
그럼 그 버튼이 클릭된 걸 알 수 있지

그럼 세 번째 Update를 누르면?
------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 3                                                                    ListTodosComponent.jsx:48
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  clicked 3                                                                    ListTodosComponent.jsx:48
------------------------------------------------------------------------------------------------------------------
clicked 3이 나오고
두번째 Update를 누르면 clicked 2가 나오지 

좋다, 이제 우리는 새로운 컴포넌트를 만들고 Update가 클릭되면 그걸 표시하려고 한다

그럼 가서 그걸 해보자

우린 컴포넌트를 만든 지 꽤 되었는데, 그럼 한 번 다시 해보자,
todo폴더에 오른쪽 클릭 > New File 그리고 TodoComponent.jsx라고 해주자

----------------------------------------------------------------------------------------------------------------------

⏺ vsc

⏺ TodoComponent.jsx




//2: 그리고 여긴 function TodoComponent(){ 라 하고 
function TodoComponent() {

  //2-1: return(이라고 해준 다음에
  return (
    
    //2-2: 평소처럼 <div className="container"라고 해주고
        <div className="container">
            //2-3: 다음으로 <h1> Enter Todo Details 이라고 해주자
            <h1>Enter Todo Details</h1>
            //2-4: 그리고 <div>를 하나 더 넣고 Todo 세부정보를 여기에 표시할 것이다, 이걸 저장하면 
            <div>

            </div>
        </div>
  )
}
----------------------------------------------------------------------------------------------------------------------

컴파일이 잘 되는 걸 볼 수 있고 좋다
이제 우린 ListTodosComponent로 부터 TodoComponent로 리디렉션을 하려고 한다 
그걸 어떻게 할까?

라우트가 필요하지
그럼 TodoApp.jsx로 가보자
지금 우린 이런 모든 라우트가 있고 
그럼 너는 TodoApp.jsx로 가서 ListTodosComponent 부분의 바로 아래에

----------------------------------------------------------------------------------------------------------------------

⏺ vsc

⏺ TodoApp.jsx



import {BrowserRouter, Routes, Route, Navigate} from 'react-router-dom'
import './TodoApp.css'
import LogoutComponent from './LogoutComponent'
import HeaderComponent from './HeaderComponent'
import ListTodosComponent from './ListTodosComponent'
import ErrorComponent from './ErrorComponent'
import WelcomeComponent from './WelcomeComponent'
import LoginComponent from './LoginComponent'

//3-2: 그러면 TodoComponent가 임포트될 것이다, 그런데 TodoComponent가 임포트되지 않았다 무엇이 잘못되었는지 보자, todocomponent를 검색해서 보면..

import AuthProvider, { useAuth } from './security/AuthContext'


function AuthencatedRoute({children}) {
    const authContext = useAuth()
    if(authContext.isAuthenticated)
        return children

    return <Navigate to="/" />
}

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <AuthProvider>
            <BrowserRouter>
                <HeaderComponent />
                <Routes>
                    <Route path='/' element={<LoginComponent />} />
                    <Route path='/login' element={<LoginComponent />} />

                    <Route path='/welcome/:username' element={
                        <AuthencatedRoute>
                            <WelcomeComponent />
                        </AuthencatedRoute>
                        } />

                    <Route path='/todos' element={
                        <AuthencatedRoute>
                            <ListTodosComponent />
                        </AuthencatedRoute>
                        } />

                    //3: TodoComponent를 추가할 것이다, 그럼 앞에서 한 것과 같은 걸 할 거고 우린 id를 넣어서 /todo/라는 경로를 설정하려고 한다
                    //그럼 너는 Todo id를 파라미터로서 넣어주려고 하지, 그럼 '/todo/:id'라고 하고 
                    <Route path='/todo/:id' element={
                        <AuthencatedRoute>
                          //3-1: element는 TodoComponent가 될 것이다 ctrl+space를 누르고 엔터 키를 눌러보자 //3-2: 임포트로..
                            <TodoComponentt />
                        </AuthencatedRoute>
                        } />

                    <Route path='/logout' element={
                        <AuthencatedRoute>
                            <LogoutComponent />
                        </AuthencatedRoute>
                        } />

                    <Route path='*' element={<ErrorComponent />} />
                </Routes>
            </BrowserRouter>
            </AuthProvider>
        </div>
    )
}
----------------------------------------------------------------------------------------------------------------------
                                                |
                                                V
----------------------------------------------------------------------------------------------------------------------

⏺ vsc

⏺ TodoComponent.jsx



//4: 여기 export default라고 해줘야 하지 긜고 다시 TodoApp.jsx로 돌아가서 TodoComponent로 돌아가보자//4-1: TodoApp.jsx로..
export default function TodoComponent() {

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>

            </div>
        </div>
    ) 
}

------------------------------------------


⏺ TodoApp.jsx


import {BrowserRouter, Routes, Route, Navigate} from 'react-router-dom'
import './TodoApp.css'
import LogoutComponent from './LogoutComponent'
import HeaderComponent from './HeaderComponent'
import ListTodosComponent from './ListTodosComponent'
import ErrorComponent from './ErrorComponent'
import WelcomeComponent from './WelcomeComponent'
import LoginComponent from './LoginComponent'

//4-2: 그럼 이번엔 여기 TodoComponent가 있는 걸 볼 수 있지, 그럼 이걸 저장해보자
import TodoComponent from './TodoComponent'

import AuthProvider, { useAuth } from './security/AuthContext'



function AuthencatedRoute({children}) {
    const authContext = useAuth()
    if(authContext.isAuthenticated)
        return children

    return <Navigate to="/" />
}

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <AuthProvider>
            <BrowserRouter>
                <HeaderComponent />
                <Routes>
                    <Route path='/' element={<LoginComponent />} />
                    <Route path='/login' element={<LoginComponent />} />

                    <Route path='/welcome/:username' element={
                        <AuthencatedRoute>
                            <WelcomeComponent />
                        </AuthencatedRoute>
                        } />

                    <Route path='/todos' element={
                        <AuthencatedRoute>
                            <ListTodosComponent />
                        </AuthencatedRoute>
                        } />

                    <Route path='/todo/:id' element={
                        <AuthencatedRoute>

                            //4-1: 이제 다시 ctrl + space를 눌러보겠다 //4-2: 다시 import로..
                            <TodoComponent />
                        </AuthencatedRoute>
                        } />    

                    <Route path='/logout' element={
                        <AuthencatedRoute>
                            <LogoutComponent />
                        </AuthencatedRoute>
                        } />

                    <Route path='*' element={<ErrorComponent />} />
                </Routes>
            </BrowserRouter>
            </AuthProvider>
        </div>
    )
}
----------------------------------------------------------------------------------------------------------------------

그리고 
너는 ListTodosComponent에서 뭘 하려고 하지?
Update를 클릭하면 우린 사용자를 Todo 페이지로 리디렉션하려고 한다
그걸 어떻게 할 수 있을까?

예전에 우리는 useNevigate를 사용했지
그걸 어디서 사용했지?
LoginComponent에서 우린 useNavigate를 사용했지, 우린 이 navigate함수를 사용했다 (<= const navigate = useNavigate();)
그걸 어디에 사용했지?
우린 그걸 
--------------------------------
    function handleSubmit() {

        if(authContext.login(username, password)) {
            navigate(`/welcome/${username}`)
        }else {
            setShowErrorMessage(true)
        }
    }
--------------------------------
handleSubmit()에 사용해서
welcome 페이지로 이동했다 (<= navigate(`/welcome/${username}`))

지금 우린 그것과 비슷한 걸 해야 할 건데
하지만 이번엔 Todo 페이지로 리디렉션을 해야 하지, 맞지?


그럼 ListTodosComponent.jsx에서 navigate를 선언해보자

----------------------------------------------------------------------------------------------------------------------

⏺ vsc

⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { deleteTodoApi, retrieveAllTodosForUsernameApi } from "./api/TodoApiService"
import { useAuth } from "./security/AuthContext"

//5-1: import {useNavigate} from 'react-router-dom'이라고 해준다, 이제 updateTodo 함수에서 navigate를 호출하기 위해 useNavigate를 사용할 수 있다 //5-2: updateTodo()로 ..
import {useNavigate} from 'react-router-dom'

function ListTodosComponent() {

    const today = new Date()

    const authContext = useAuth()

    const username = authContext.username

    //5: const navigate=useNavigate()라고 해준다, useNavigate는 훅이고 우린 그걸 참조하고 있다, 그럼 useNavigate를 임포트해 보자 그럼 가서 import..//5-1: import로..
    const navigate = useNavigate()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    const [message, setMessage] = useState(null)

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
        retrieveAllTodosForUsernameApi(username)
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    function deleteTodo(id) {
        console.log('clicked ' + id);
        deleteTodoApi(username, id)
        .then(

            () => {
                setMessage(`Delete of todo with id = ${id} successful`)
                refreshTodos()
            }
            //1: Display message
            //2: Update Todos list
        ) 
        .catch(
            
        )
    }

    function updateTodo(id) {
        console.log('clicked ' + id);

        //5-2: 우린 어디로 이동하려고 하지? 너는 '/todos/'로 이동해야 하고 너는 이렇게 '/todos/'로 이동하고 여기 있는 id를 대체해야 하지
        //그럼 ${id}라고 해준다 그래서 여기에 백틱(`)을 사용해야 하지 그럼 그렇게 해보겠다, 둘레에 틱을 넣어주고 , 그럼 updateTodo(id){console.log('clicked' + id)} navigate(`/todo/${id}`)이다
        navigate(`/todo/${id}`)
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            
            {message && <div className="alert alert-warning">{message}</div>}
            
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                            <th>Update</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
                                        <td> <button className="btn btn-warning" 
                                                     onClick={() => deleteTodo(todo.id)}>Delete</button> </td>
                                        <td> <button className="btn btn-success" 
                                                     onClick={() => updateTodo(todo.id)}>Update</button> </td>                                                     
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

이제 어떻게 되는지 볼까?
Update를 클릭하면 
                                |
                                V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details



------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 1                                                                    ListTodosComponent.jsx:51
------------------------------------------------------------------------------------------------------------------

Todo 페이지로 이동하는 걸 볼 수 있고 
이제 여기에 Todo 세부정보를 표시하려고 한다
Todo 세부정보를 어떻게 표시할 수 있을까?

함수를 호출해야지
그럼 API로 가보자 TodoApiService로 가고, 실제로 deleteTodoApi와 비슷한 걸 만들어보곘다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc

⏺ TodoApiService.js




import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

export const retrieveAllTodosForUsernameApi
        = (username) => apiClient.get(`/users/${username}/todos`)
        // http://localhost:8080/users/in28minutes/todos

export const deleteTodoApi
        = (username, id) => apiClient.delete(`/users/${username}/todos/${id}`)
        // http://localhost:8080/users/in28minutes/todos   

//6: retrieveTodoApi라고 해주고, 그리고 delete 대신에 get을 써줘야 하겠지, 이렇게 우리는 특정한 Todo의 세부정보를 받으려고 한다, 그리고 우린 이 API를
//TodoComponent에서 호출하려고 하지 //6-1: TodoComponent로..
export const retrieveTodoApi
        = (username, id) => apiClient.get(`/users/${username}/todos/${id}`)
        // http://localhost:8080/users/in28minutes/todos    

----------------------------------------


⏺ TodoComponent.jsx



export default function TodoComponent() {


  //6-1: 그걸 여기서 할 수 있다, 그럼 function retrieveTodos()라고 해서 함수를 만들고
  //이 함수 컴포넌트는 id를 받을 것이다, 그러면 id는 우리가 넣어줄 Param중에 하나가 될 거고, 그럼 우리가 Todo를 받기 전에 id를 어떻게 받는지 살펴볼까?
    function retrieveTodos() {
        
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>

            </div>
        </div>
    ) 
}
----------------------------------------------------------------------------------------------------------------------

앞에서 우리는 useParams 훅을 사용했지,  
전에 WelcomeComponent에서 우린 Params를 사용헀다, 그걸 받기 위해 useParams 훅을 사용했다  (<= const {username} = useParams())
'react-router-dom'으로 부터 useParams에 대한 임포트를 추가해야 했고 (<= import {useParams, Link} from 'react-router-dom')
그렇게 username을 받을수 있었지 (<= const {username} = useParams())
우리는 지금 

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx



//7: 여기에 임포트를 넣는다 //7-1: TodoComponent() 안으로 작성..
import {useParams} from 'react-router-dom'

//7-3: 보는 것 처럼 './api/TodoApiService'로 부터 retrieveTodoApi가 임포트되고 좋다
import { retrieveTodoApi } from './api/TodoApiService'

export default function TodoComponent() {

    //7-1: 너는 useParams 훅을 사용하려고 하고 니가 예상하는 Param은 id이다, 그럼 const {id} = useParams()라고 해주자
    //이렇게 id가 있고//7-2: retrieveTodos()로..
    const {id} = useParams() 

    function retrieveTodos() {
        //7-2: 이제 너는 retrieveTodoApi를 호출할 수 있다 //7-3: 다시 임포트로..
        retrieveTodoApi
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>

            </div>
        </div>
    ) 
}

----------------------------------------------------------------------------------------------------------------------

그럼 ListTodosComponent로 가보자
이 코드에서 
    function refreshTodos() {
        retrieveAllTodosForUsernameApi(username)
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }   
우리는성공적인 응답과 그렇지 않은 응답을 처리했고
그럼 TodoComponent로 가서
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx



import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
//8-4: useAuth 임포트됨...
import { useAuth } from './security/AuthContext'


export default function TodoComponent() {

    const {id} = useParams()

    //8-3: 그럼 우리는 useAuth()를 써서 username을 받을 수 있고 그럼 useAuth를 임포트 하고..//8-4: useAuth가 임포트됨..
    //const authContext = useAuth라고 해준다
    const authContext = useAuth()

    //8-4: 그리고 const username=이라고 하고 authContext.username이라고 해준다 보는 것처럼 우리가 Context에 설정한 값들이 아주 유용하다는 걸 알 수 있지
    //필요할 때마다 그걸 잡을 수 있고, 필요할 때마다 Context에서 잡을 수 있지
    const username = authContext.username

    function retrieveTodos() {
        //8: retrieveTodoApi()를 호출할 때 우리는 username을 넣어줘야 한다, 그럼 여기서 username을 받아야 하고, 그럼 username이라고 써주고 id를 넣어줘야 한다 id는 이미 갖고 있지
        retrieveTodoApi(username, id)

        //8-1: 그리고 우리는 응답을 받아야 하고 
         .then(response => (
            //8-2: 여기서 그냥 console.log(response)라고 해주겠다, 이렇게 API를 호출할 떄 console.log(response)와 console.log(error)라고 해주고, 역시 username을 받아야 한다//8-3: 위로 가서 작성..
            console.log(response)
            )
        )
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>

            </div>
        </div>
    ) 
}
----------------------------------------------------------------------------------------------------------------------

이제 다 괜찮은 것 같고 retrieveTodos()도 괜찮아 보인다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx



import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'


export default function TodoComponent() {

    const {id} = useParams()

    const authContext = useAuth()
    
    const username = authContext.username

    //9: 우리는 Todo 페이지를 로딩할 때 retrieveTodos()를 호출하려고 한다, 그럼 앞에서 해준 대로
    //useEffect를 쓸 수 있다, 그럼 useEffect()훅에서 우리는 retrieveTodosApi를 호출할 수 있다
    useEffect(
        //9-1: 그럼 여기서 화살표 함수를 만들고 retrieveTodos()를 호출하겠다
        () => retrieveTodos(),
        //9-2: 그리고 너는 id 값이 변경될 때에만 이게 새로고침 되도록 하려고 한다 그럼 너는 두 번째 값을 id 배열로서 넣어줄 거고, 이제 문제 없는 것 같다, 이걸 저장해보자
        [id]
    )    

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => (
            console.log(response)
            )
        )
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>

            </div>
        </div>
    ) 
}
----------------------------------------------------------------------------------------------------------------------

그리고 Console로 기서
Todos로 간 다음에 이걸 정리해보자, 그리고 Update를 클릭하면 
                                |
                                V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details



------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
 ▼ {data: {…}, status: 200, statusText: '', headers: AxiosHea                        TodoComponent.jsx:21 
    ders, config: {…}, …}
  ▶ config: {transitional: {…}, adapter: Array(3), transform
    Request: Array(1), transformResponse: Array(1), timeout: 0, …}
  ▶  data: {id: 1, username: 'in28minutes', description: 'Get 
      AWS Certified', targetDate: '2034-08-01', done: false}
  ▶  headers: AxiosHeaders {content-type: 'application/json'}
  ▶  request: XMLHttpRequest {onreadystatechange: null, readyState:
      4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
  ▶  status: 200
  ▶  statusText: ""
  ▶  [[Prototype]]: Object
------------------------------------------------------------------------------------------------------------------

볼 수 있다 
즉 id는 1이고 username은 'in28minutes'고 'Get AWS Certified'라고 나오지

니가 Todos로 가서 
콘솔창을 정리하고 세 번째 Update를 클릭하면 
                                |
                                V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details



------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
 ▼ {data: {…}, status: 200, statusText: '', headers: AxiosHea                        TodoComponent.jsx:21 
    ders, config: {…}, …}
  ▶ config: {transitional: {…}, adapter: Array(3), transform
    Request: Array(1), transformResponse: Array(1), timeout: 0, …}
  ▶  data: {id: 3, username: 'in28minutes', description: 
    'Learn Full Stack Development', targetDate: '2036-08-01', done: false}
  ▶  headers: AxiosHeaders {content-type: 'application/json'}
  ▶  request: XMLHttpRequest {onreadystatechange: null, readyState:
      4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
  ▶  status: 200
  ▶  statusText: ""
  ▶  [[Prototype]]: Object
------------------------------------------------------------------------------------------------------------------

데이터가 되돌아오는 걸 볼 수 있다
이건 이제 id 3에 속한거고, 'Learn Full Stack Development'라고 나왔지
잘 된것 같고

이제 우리는 그걸 처리하려고 한다 
그럼 로깅을 하는 대신 여기에 원하는 걸 정의해보자
평소처럼 우린 그걸 상태에 설정할 것이다 이제 우리는 
  ▶  data: {id: 3, username: 'in28minutes', description: 
    'Learn Full Stack Development', targetDate: '2036-08-01', done: false}
이 description과 targetDate의 편집을 허용하려고 하지

그럼 이제 description과 targetDate에 대한 상태 변수를 만들려고 한다 
그러면 너는 양식을 통한 업데이트를 허용할 수 있지 
그럼 실제로 그것들의 상태 변수를 만들어볼까?

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx




import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect } from 'react'


export default function TodoComponent() {

    const {id} = useParams()

    //10: 그럼 너는 useState()라고 하고 description에 관한 시작점으로서 비어 있는 값을 가질 것이다, 이건 상수가 될 거고
    //그리고 const[description, setDescription] = useState('')라고 한다
    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id) 
        .then(response => console.log(response))
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>

            </div>
        </div>
    ) 
}
----------------------------------------------------------------------------------------------------------------------

지금은 먼저 description 필드에 집중해보자
먼저 description을 처리한 다음에 나중에 targetDate를 처리하겠다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx




import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {

          //11-1: 그리고 여기서 응답을 받으면 너는 response.data.description이라고 해줄 수 있지
          //그게 description이 될 거고 그럼 setDescription()으로 감싸준다
          setDescription(response.data.description)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
            //11: 이제 여기에 description을 표시해보자 이렇게 descrition:{description}이라고 해준다, 여기에 description을 표시해주고 //11-1: retrieveTodos()로..
            descrition:{description}
            </div>
        </div>
    ) 
}
----------------------------------------------------------------------------------------------------------------------

이렇게 여기서 description을 상태로 설정할 거고, 
----------------------------------------
            <div>
                descrition:{description}
            </div>
----------------------------------------
<div> 안에 표시된 description을 보게 될 것이다

어떻게 작동하는지 볼까?
                                |
                                V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
                                  descrition:Learn Full Stack Development


------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
 ▼ {data: {…}, status: 200, statusText: '', headers: AxiosHea                        TodoComponent.jsx:21 
    ders, config: {…}, …}
  ▶ config: {transitional: {…}, adapter: Array(3), transform
    Request: Array(1), transformResponse: Array(1), timeout: 0, …}
  ▶  data: {id: 3, username: 'in28minutes', description: 
    'Learn Full Stack Development', targetDate: '2036-08-01', done: false}
  ▶  headers: AxiosHeaders {content-type: 'application/json'}
  ▶  request: XMLHttpRequest {onreadystatechange: null, readyState:
      4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
  ▶  status: 200
  ▶  statusText: ""
  ▶  [[Prototype]]: Object
------------------------------------------------------------------------------------------------------------------

description이 Learn Full Stack Development인 걸 볼 수 있지

그럼 Todos로 가서 
                                        |
                                        V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                                       Login   Logout
     ______________________________________________________________________________________________________

                                        Things You Want To Do!

                        
                     Description	          is Done?     Target Date       Delete             Update
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
                   Get AWS Certified	           false     Sat Jul 05 2036   | Delete |     | Update |
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾                                                                      
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
                     Learn DevOps		   false     Sat Jul 05 2036   | Delete |               | Update |     
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
               Learn Full Stack Development	   false     Sat Jul 05 2036   | Delete |       | Update |
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 1                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

Get AWS Certified를 Update 해보자
                                                |
                                                V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
                                       descrition:Get AWS Certified


------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 1                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

Get AWS Certified가 나온다

그리고 두 번째를 클릭하면 
                                                |
                                                V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
                                          descrition:Learn DevOps


------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 2                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

Learn DevOps라고 나온다
이제 우리는 Todo 설명이 있는 Todo 페이지를 볼 수 있게 되었다 

우린 앞으로 해야 할 일이 많다
양식을 만들어야 하고 값들을 양식에 매핑해야 하지
targetDate도 추가해야 하고 
그리고 이 세부정보들을 DB에 업데이트하려고 한다 
그 방법은 다음 단계에서 알아보자



이번 긴 단계에서 
우리는 TodoComponent를 다루기 시작했다
시작하기 위해서 우린 TodoComponent에 많은 코드를 작성했고 
여러 곳에서 많은 값들을 잡아야 했지
하지만 결국은 뭔가 작동하는 걸 볼 수 있었다
다음 단계에 보겠다
