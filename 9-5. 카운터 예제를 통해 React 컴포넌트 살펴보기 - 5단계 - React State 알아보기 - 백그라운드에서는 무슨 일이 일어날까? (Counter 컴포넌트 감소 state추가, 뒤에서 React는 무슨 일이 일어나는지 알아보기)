

지난 시간에는 컴포넌트에 상태(State)를 추가했다, 
상태 값을 가져오고 업데이트하는 건 아주 쉽고 간단했다
쉽고 간단한 방식으로 증가 버튼의 기능을 구현했다

이제 카운터에 1을 더하는 기능이 아니라 1을 빼는 기능을 추가해 보겠다
+1 버튼을 구현한 방식을 사용하면 -1 버튼도 구현할 수 있을 것이다

decrementCounterFunction()을 구현하는 건 어렵지 않았을 것이다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import './Counter.css'

export default function Counter() {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + 1)

    }

    //1: function을 입력하고 'decrementCounterFunction()'을 만든 다음 //1-1: return으로...
    function decrementCounterFunction() {

        //1-2: 그리고 계산식을 count-1로 바꾸겠다, 이러면 될까? 한번 실행해 보자
        setCount(count - 1)
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+1</button>

        //1-1: 아래쪽에 버튼을 하나 더 추가하고 텍스트에 '-1'로 바꾸겠다 
        //이 버튼이 클릭되며 decrementCounterFunction 함수를 호출해야겠지 (onClick에 {decrementCounterFunction}함수를 삽입) //1-2:decrementCounterFunction()으로..
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-1</button>
        </div>
    </div>
    )
}
-----------------------------------------------------------------------------------------------
                                               |
                                               V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                          
                                          -1               (자세한 건 직점 확인)
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1    |
                              ◟ _______ ◞    ◟ _______ ◞

-------------------------------------------------------------------------------------------
+1, +1, -1, -1, -1..
보는 것처럼 아주 쉽게 상태를 업데이트할 수 있다
이런 식으로 아주 쉽고 간단하게 함수를 추가하고 필요한 상태를 업데이트할 수 있다

지금까지 본 것 중 눈여겨볼 점은, 우리는 상태 업데이트만 했다는 것이다
+1 버튼을 클릭했을 때, 우리가 한 건 상태 업데이트이다, 뷰는 자동으로 업데이트되었다
우리는 뷰를 직접 업데이트하지 않았다

우리가 코드에서 한 건 뷰, 즉 Counter 컴포넌트를 count에 연결한 것뿐이다
-------------------------------------
export default function Counter() {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + 1)

    }

    function decrementCounterFunction() {
        
        setCount(count - 1)
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+1</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-1</button>
        </div>
    </div>
    )
}
-------------------------------------
여기서 +1을 클릭하면 그 즉시 상태가 업데이트된다, 1에서 한번 더 하면 상태가 2로 업데이트되지
상태가 2로 업데이트되며 뷰도 함께 업데이트된다
                        -------------------------------------
                                          -1               
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1    |
                              ◟ _______ ◞    ◟ _______ ◞
                        -------------------------------------
이 뷰는 count라는 클래스 이름을 가진 span 요소 안에 있다 ( <span className='count'>{count}</span> )
이 뷰도 함께 2로 업데이트된다




그럼 리액트 백그라운드에서 무슨 일이 일어나는지 한번 알아보자






1️⃣ What's happening in the background with React?

● We updated the state => React updated the view                                      _______________ 
  ■ How can you update an HTML element?                                              ⁽  Virtual DOM  ⁾
    ○ A HTML page is represented by DOM(Document Object Model)                        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    ○ Each element in a HTML page is a node in the DOM                               /diff&update    ↖ creates
    ○ You need to update the DOM to update the element                             ↙                   \
    ○ HOWEVER, writing code to update the DOM can be complex and slow!         __________  events __________
                                                                              ⁽   DOM    ⁾  ㅡ→  ⁽   App    ⁾
                                                                               ‾‾‾‾‾‾‾‾‾‾         ‾‾‾‾‾‾‾‾‾‾



● We updated the state => React updated the view
우리는 상태를 업데이트했다
상태를 1->, 2->3 이런 식으로 업데이트했고, 리액트가 뷰를 업데이트했다
그게 어떻게 가능할까?
  ■ How can you update an HTML element? 
한 걸음 뒤에서 살펴보자
HTML 요소는 일반적으로 어떻게 업데이트될까?
    ○ A HTML page is represented by DOM(Document Object Model)
HTML 페이지는 일반적으로 DOM 요소로 표현된다, 문서 객체 모델의 줄임말이지
    ○ Each element in a HTML page is a node in the DOM 
HTML 페이지의 각 요소는 DOM 노드에 해당한다
    ○ You need to update the DOM to update the element
요소를 업데이트하려면 DOM을 업데이트해야 한다
    ○ HOWEVER, writing code to update the DOM can be complex and slow!
하지만 DOM 업데이트 코드를 작성하는 건 복잡하고 시간이 많이 든다


🔵 기존 HTML 방식

Todo App 에서 화면을 우클릭하고 검사(Inspect)메뉴를 클릭해 요소(Elements)탭으로 가보겠다
                                               |
                                               V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                          
                                          -1               (자세한 건 직점 확인)
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1    |
                              ◟ _______ ◞    ◟ _______ ◞
-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
  ‾‾‾‾‾‾‾‾          
-------------------------------------------------------------------------------------------
  <html lang="en"><head>
    <meta charset="utf-8">
    <link rel="icon" href="/favicon.ico">
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta name="theme-color" content="#000000">
    <meta name="description" content="Web site created using create-react-app">
    <link rel="apple-touch-icon" href="/logo192.png">
    <!--
      manifest.json provides metadata used when your web app is installed on a
      user's mobile device or desktop. See https://developers.google.com/web/fundamentals/web-app-manifest/
    -->
    <link rel="manifest" href="/manifest.json">
    <!--
      Notice the use of  in the tags above.
      It will be replaced with the URL of the `public` folder during the build.
      Only files inside the `public` folder can be referenced from the HTML.

      Unlike "/favicon.ico" or "favicon.ico", "/favicon.ico" will
      work correctly both with client-side routing and a non-root public URL.
      Learn how to configure a non-root public URL by running `npm run build`.
    -->
    <title>Todo App</title>
<body>
<div id="root"><div class="App"><div class="Counter"><span class="count">-1</span><div><button class="counterButton">+1</button><button class="counterButton">-1</button></div></div></div></div>
<div class="App"><div class="Counter"><span class="count">-1</span><div><button class="counterButton">+1</button><button class="counterButton">-1</button></div></div></div>
<div class="Counter"><span class="count">-1</span><div><button class="counterButton">+1</button><button class="counterButton">-1</button></div></div>
<span class="count">-1</span>
<div><button class="counterButton">+1</button><button class="counterButton">-1</button></div>
</body>
</body></html>
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
-------------------------------------------------------------------------------------------

다양한 HTML 요소로 구성되어 있는 게 보일 것이다
HTML 구조를 보면 body 요소가 있고 그 안에 div가 있다, div 안에는 또 다른 div가 있고 
그 안에는 또 다른 div가 있다, 안에 span요소가 있고 그 밑에 또 다른 div 가 있다
(대충 컨테이너 안에 컨테이너 있고 아래에도 컨테이너 안에 컨테이너 마진,패딩 등 있다는 설명..)
❗보다시피 지금 이 화면은 계층 구조로 이루어져 있다, 이런 계층 구조로 이 HTML 페이지가 표현되고 있는 것이다
바로 이런 계층 구조를 '문서 객체 모델 (DOM)'이라고 부른다❗

예전에는 여기 있는 특정 값을 바꾸려면, 이 값이 있는 요소의 위치를 찾아내는 JavaScript 코드를 작성해 해당 요소의 값을 변경해야 했다
HTML 코드 안으로 들어가 이 값을 1, 2로 변경하는 코드를 작성해야 했다 (예) <span class="count">-1</span>=> <span class="count">1</span> or <span class="count">2</span>)
그런 식으로 DOM을 업데이트하기 위한 코드를 작성했다, HTML 페이지 뒤에 있는 객체를 업데이트하기 위한 코드를
이런 식으로 코드를 작성하는 건 굉장히 복잡하다

왜일까?

여기 있는 구조만 봐도 페이지는 매우 단순한 데 비해 구조는 꽤 복잡하다
그럼 복잡한 HTML 페이지는 어떨까?
계층 구조가 훨씬 더 거대할 것이다
요소를 찾아 업데이트하는 데도 많은 양의 코드가 필요할 거고 유지 관리도 어려워지겠지



요약하자면 예전에는 HTML 페이지를 업데이트하기 위해 DOM을 직접 업데이트했다
DOM을 직접 업데이트하는 코드를 작성했다




🔵 React 방식




2️⃣ What's happening in the background with React?

● We updated the state => React updated the view                                      _______________ 
  ■ How can you update an HTML element?                                              ⁽  Virtual DOM  ⁾
    ○ A HTML page is represented by DOM(Document Object Model)                        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    ○ Each element in a HTML page is a node in the DOM                               /diff&update    ↖ creates
    ○ You need to update the DOM to update the element                             ↙                   \
    ○ HOWEVER, writing code to update the DOM can be complex and slow!         __________  events __________
  ■ React takes a different approach:                                         ⁽   DOM    ⁾  ㅡ→  ⁽   App    ⁾
    ○ Virtual DOM: "virtual" representation of a UI (kept in memory)           ‾‾‾‾‾‾‾‾‾‾         ‾‾‾‾‾‾‾‾‾‾
      ◦ React code updates Virtual DOM
    ○ React identifies changes and synchronizes them to HTML page
      ◦ 1: React creates Virtual DOM v1 on load of page
      ◦ 2: You perform an action
        ▫ 3: React creates Virtual DOM v2 as a result of your action
        ▫ 4: React performs a diff between v1 and v2
        ▫ 5: React synchronizes changes (updates HTML page) 
● Summary: We are NOT updating the DOM directly!
  ■ React identifies changes and efficiently updates the DOM

● React takes a different approach:
하지만 리액트는 이것과 완전히 다른 방식으로 동작한다
    ○ Virtual DOM: "virtual" representation of a UI (kept in memory) 
리액트는 '가상 DOM (Virtual DOM)'이라는 걸 사용한다
가상 DOM 은 가상으로 만든 UI 표현이다, 리액트는 HTML 전체를 가상으로 만들어 메모리에 보관한다
      ◦ React code updates Virtual DOM
우리는 이 가상 DOM을 업데이트하는 코드를 작성한다
우리가 상태를 업데이트하면 리액트가 가상 DOM 을 업데이트한다, 실제 DOM을 바로 업데이트 하는 게 아니다
    ○ React identifies changes and synchronizes them to HTML page
가상 DOM이 업데이트되면 리액트가 변경 사항을 파악해 HTML 페이지에 동기화시킨다
그럼 전체적인 업데이트 과정을 살펴보자
      ◦ 1: React creates Virtual DOM v1 on load of page
페이지가 로딩되면 리액트는 가장 먼저 이에 대한 첫 번째 버전의 가상 DOM을 생성한다
      ◦ 2: You perform an action
이 상태에서 +1 버튼을 클릭했다고 해보자, 그럼 상태가 업데이트될 것이다
        ▫ 3: React creates Virtual DOM v2 as a result of your action
상태가 업데이트되면 리액트는 해당 컴포넌트를 다시 렌더링하고 두 번째 버전의 가상 DOM을 생성한다
        ▫ 4: React performs a diff between v1 and v2
하나의 컴포넌트에 가상 DOM 두 개가 생성된거지, 그러면 리액트는 가상 DOM v1과 가상 DOM v2를 비교해 차이점을 파악하고
        ▫ 5: React synchronizes changes (updates HTML page) 
달라진 부분을 HTML 페이지에 반영한다


우리가 상태를 업데이트하는 동안, 리액트는 백그라운드에서 아주 많은 작업을 수행한다
컴포넌트의 상태가 조금이라도 변경되면 리액트는 가상 DOM부터 업데이트한다
그런 다음, 업데이트한 가상 DOM을 이전 버전의 가상 DOM과 비교하여 차이점을 파악하고 달라진 부분을 HTML 페이지에 반영해 업데이트한다,
동기화 작업을 수행하는 거지

● Summary: We are NOT updating the DOM directly!
요약하면, 우리가 직점 DOM을 업데이트하는 게 아니다
  ■ React identifies changes and efficiently updates the DOM
리액트가 변경 사항을 파악해 효율적으로 DOM을 업데이트하는 거지









정리)--------------------------------------------------------------------------------
이번 시간에는 감소 버튼을 추가하고 
리액트가 백그라운드에서 어떤 작업을 수행하는지 알아봤다
리액트가 가상 DOM 이라는 개념을 활용한다는 걸 배웠다
우리가 작성한 코드를 통해 상태가 업데이트되면, 리액트는 변경된 상태를 바탕으로 
가상 DOM을 업데이트하고 이전 버전과의 차이점을 파악해 변경된 부분을 HTML 페이지에 반영한다
다음 시간에 보겠다
------------------------------------------------------------------------------------(
