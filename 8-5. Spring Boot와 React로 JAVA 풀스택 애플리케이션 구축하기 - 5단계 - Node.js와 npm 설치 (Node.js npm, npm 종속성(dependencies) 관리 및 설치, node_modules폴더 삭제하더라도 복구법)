

Installing Node.js and npm

● Google for "Download nodejs"
  ■ Install latest version of Node.js
    ○ node --version
    ○ npm --version
  ■ Trobleshooting: 
    ○ Google for "npm troubleshooting"


이번 강의에선 Node.js와 npm을 설치하겠다
● Google for "Download nodejs"
Node.js와 npm을 설치하는 가장 쉬운 방법은 download nodejs라고 검색하는 것이다
download nodejs라고 검색하면 Node.js를 다운로드할 수 있는 페이지가 보인다 
보다시피 Node.js 설치 파일은 Window와 Mac용도 있고 보면 Linux도 있다
Window를 사용하면 Windows Installer를 사용해서 다운로드 받아라

더블클릭하고 따라가면 된다
설치는 굉장히 쉽다

Linux를 사횽하면 해당 시스템에 맞는 바이너리를 선택해서 받아서 설치하면 된다 

교육자는 Mac을 사용하니 Mac OS 설치를 한다고함


Node.js를 설치했으면 이렇게 한 번 해봐라 
명령프롬프트에서(관리자권한으로 실행) node --version이라 입력한다

---------------------------------------------------------------------------------------------

⏺ cmd창 ==>
  
C:\Windows\system32>node --version
v20.14.0

C:\Windows\system32>
---------------------------------------------------------------------------------------------

npm --version이라고도 해보면 버전이 나오는 걸 알 수 있다  

---------------------------------------------------------------------------------------------

⏺ cmd창 ==>


C:\Windows\system32>npm --version
10.7.0

C:\Windows\system32>
---------------------------------------------------------------------------------------------  

  ■ Install latest version of Node.js
    ○ node --version
    ○ npm --version
Node.js를 항상 최신 버전으로 사용하길 추천한다 
우리 강의가 대부분 나와 있는 최신 버전의 소프트웨어와 호환된다는 걸 알게 될 것이다
그러니 현재 사용 가능한 Node.js 최신 버전을 사용하기를 추천한다 

  ■ Trobleshooting: 
    ○ Google for "npm troubleshooting"  
Node.js 설치에 문제가 있으면 npm troubleshooting이라 검색해봐라

두 페이지를 보면 된다
여기 하나는 npm Docs에서 제공하는 트러블슈팅 문서고 (출처: https://docs.npmjs.com/getting-started/troubleshooting )
하나는 흔히 나오는 오류이다 (출처: https://docs.npmjs.com/common-errors )
이 두 페이지를 확인하고 문제 해결에 도움이 되는 게 있는지 찾아봐라



지금까지 Node.js와 npm을 설치했다 
Node.js는 JavaScript의 서버 쪽 컴포넌트이지
거기에 Java를 설치하듯이 거기에 Node.js를 설치해서 
JavaScript 코드를 브라우저 없이 기기에서 바로 실행할 수 있는 것이다 

그럼 이제 npm은 뭘까?

🔵 What is npm?

  
Installing Node.js and npm

● Google for "Download nodejs"
  ■ Install latest version of Node.js
    ○ node --version
    ○ npm --version
  ■ Trobleshooting: 
    ○ Google for "npm troubleshooting"  
● npm: Package Manager for JavaScript
  ■ Similar to Maven/Gradle in Java world
  ■ npm init: Create new project



● npm: Package Manager for JavaScript
npm은 JavaScript의 패키지 관리자이다 
  ■ Similar to Maven/Gradle in Java world
npm은 Maven이나 Gradle과 아주 비슷하다
Maven으로 뭘 하지?
Spring Framework로 만들고 싶다면 Maven의 pom.xml에다가 Spring Framework 종속성을 넣어주면 
Maven이 자동으로 다운로드 받아주지 

npm은 JavaScript 세계에서 아주 비슷한 역할을 한다 
  ■ npm init: Create new project
종속성 정보를 특정 파일에 정의하면 npm이 다운로드 해 준다


이제 npm을 좀 가지고 놀아보자


다시 node --version을 입력해보자

---------------------------------------------------------------------------------------------

⏺ cmd창 ==>


C:\Windows\system32>node --version
v20.14.0
  
---------------------------------------------------------------------------------------------  
Node 최신 버전이 나오는 걸 볼 수 있지,
npm --version을 해도

---------------------------------------------------------------------------------------------

⏺ cmd창 ==>


C:\Windows\system32>npm --version
10.7.0

---------------------------------------------------------------------------------------------  
마찬가지다   
Node.js와 npm은 나와 있는 가장 최신 버전을 사용하는게 좋다 

넘어가서 npm init 명령어를 실행하겠다
---------------------------------------------------------------------------------------------

⏺ cmd창 ==>


C:\Windows\system32>npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (system32)

---------------------------------------------------------------------------------------------  
npm 프로젝트, 혹은 Node.js 프로젝트를 생성한다   
package.json 파일이 생긴다 ( save it as a dependency in the package.json file. )
package.json은 Maven의 pom.xml과 매우 비슷하다 
JavaScript 종속성을 정의하는 파일이지

npm init을 하면 대답할 질문이 많다 
패키지 이름을 지어줘야 겠다 
first-npm-project라 하자, 그리고 다른 모든 질문은 기본값으로 대답하겠다

---------------------------------------------------------------------------------------------

⏺ cmd창 ==>



C:\Windows\system32>npm init
This utility will walk you through creating a package.json file.
It only covers the most common items, and tries to guess sensible defaults.

See `npm help init` for definitive documentation on these fields
and exactly what they do.

Use `npm install <pkg>` afterwards to install a package and
save it as a dependency in the package.json file.

Press ^C at any time to quit.
package name: (system32) first-npm-project    //1. <== 패키지 명 first-npm-project라 적어줌
version: (1.0.0)                              //1-1: 수많은 질문들 Enter로 넘김
description:
entry point: (index.js)
test command:
git repository:
keywords:
author:
license: (ISC)
About to write to C:\Windows\system32\package.json:

{
  "name": "first-npm-project",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "description": ""
}


Is this OK? (yes) yes                //1-2: 마지막으로 yes라고 하고 엔터
---------------------------------------------------------------------------------------------

많은 질문들이 있는데 모든 질문에 계속 엔터를 입력한다   
마지막으로 Is this OK? (yes) 괜찮냐고 묻는다, 마지막으로 OK라고 물으면 yes라 입력하고 엔터를 누른다

pwd를 입력해서 현재 작업 디렉토리로 가겠다
이 폴더를 보면 package.json 파일이 여기 있는게 보인다 (C:\Windows\system32\package.json) 
이 파일을 VSC에 드래그 드롭 하겠다 

---------------------------------------------------------------------------------------------
⏺ VSC

⏺package.json 파일
  
{
  "name": "first-npm-project",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "description": ""
}

---------------------------------------------------------------------------------------------

그럼 이제 package.json 내용이 보인다 
우리가 준 이름이 여기 있고 "name": "first-npm-project",
버전도 보이고  "version": "1.0.0",
설정한 모든 값이 여기 잘 있다  


🔵 Node.js 종속성 추가 방법

이제 이 프로젝트에 종속성을 추가하고 싶다, 
예를 들어 JQuery를 사용하고 싶을 수 있겠지 

몇 년 전만 해도 JQuery는 가장 유명한 JavaScript 라이브러리 중 하나였다 
JQuery를 내 프로젝트에서 사용하려 한다고 가정하자 


---------------------------------------------------------------------------------------------

⏺ cmd창 ==>

  
C:\Windows\system32>npm install jquery

added 1 package, and audited 2 packages in 2s

found 0 vulnerabilities

---------------------------------------------------------------------------------------------

npm install jquery라 입력하고 엔터를 누른다   
1 package가 추가되었고 2s가 걸렸다고 나온다 

다시 패키지 파일로 돌아가서 살펴보면

---------------------------------------------------------------------------------------------
⏺ VSC

⏺package.json 파일


{
  "name": "first-npm-project",
  "version": "1.0.0",
  "main": "index.js",
  "scripts": {
    "test": "echo \"Error: no test specified\" && exit 1"
  },
  "author": "",
  "license": "ISC",
  "description": "",
  "dependencies": {
    "jquery": "^3.7.1"
  }
}

---------------------------------------------------------------------------------------------
dependencies가 여기 추가된 걸 볼 수 있다   
어떤 종속성이 추가됐냐, 바로 JQuery가 추가됐지
  "dependencies": {
    "jquery": "^3.7.1"
  }
여기 보면 3.7.1이라 돼있지 
JQuery 최신 버전을 사용하고 있는데 이 ^ 기호는 3. 몇 버전으로 업그레이드가 가능하다는 뜻이다
만약 3.81이 가능하다면 그걸 사용해야겠지
하지만 4.5.6이라는 버전이 새로 나온다 해도 업그레이다가 자동으로 되지 않을 것이다
이런 것들은 아직 신경쓰지 않아도 된다

지금은 일단 종속성을 추가할 수 있지, 종속성을 추가하니 어떤 일이 생길까?
다시 폴더로 돌아가 보면  ( C:\Windows\system32\package.json 의 C:\Windows\system32 폴더)
node_modules라는 폴더가 생긴게 보인다
node_modules로 들어가 보면 jQuery가 다운로드 된 게 보이지
이제 JavaScript 코드에서 바로 JQuery를 사용할 수 있다 
jQuery를 수동으로 다운로드 받는게 아니라 npm을 사용해서 다운로드 받는 거다






Installing Node.js and npm

● Google for "Download nodejs"
  ■ Install latest version of Node.js
    ○ node --version
    ○ npm --version
  ■ Trobleshooting: 
    ○ Google for "npm troubleshooting"  
● npm: Package Manager for JavaScript
  ■ Similar to Maven/Gradle in Java world
  ■ npm init: Create new project
  ■ package.json: Your dependency definitions
  ■ Add a dependency:
    ○ npm install jquery
    ○ You don't to download and manage versions
  ■ node_modules: Downloaded dependencies (temp)


지금까지 npm init을 사용해서 새로운 프로젝트를 만들고
  ■ package.json: Your dependency definitions
package.json에서 JavaScript 종속성을 정의하는 걸 봤다 
  ■ Add a dependency:
종속성을 추가할 수 있었다   
    ○ npm install jquery
npm install jquery를 사용해 JQuery 종속성을 추가했다 
    ○ You don't to download and manage versions
그리고 npm이 좋은 점은 종속성을 직접 다운로드 하고 버전 관리를 하지 않아도 된다는 것이다
npm이 종속성을 자동으로 다운로드 받아주기때문이다 
  ■ node_modules: Downloaded dependencies (temp)
그리고 node_modules라는 폴더에 그 종속성이 다운로드 된 것도 확인했다 
이것은 모든 종속성이 담기는 일종의 임시 폴더지 

이 node_modules 폴더를 삭제하더라고 
돌아가서 npm install 이라고 다시 하면

---------------------------------------------------------------------------------------------

⏺ cmd창 ==>

  
C:\Windows\system32>npm install

added 1 package, and audited 2 packages in 824ms

found 0 vulnerabilities

C:\Windows\system32>

---------------------------------------------------------------------------------------------  
다시 종속성이 다운로드 되는 걸 볼 수 있다  





이번 단계는 Node.js와 npm을 설치해봤다
다음 강의에 보겠다
