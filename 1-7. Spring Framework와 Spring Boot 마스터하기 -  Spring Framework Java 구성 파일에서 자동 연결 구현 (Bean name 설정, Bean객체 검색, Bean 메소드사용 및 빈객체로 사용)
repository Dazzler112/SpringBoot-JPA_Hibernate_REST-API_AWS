

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|              JVM                                                   |
|  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ    |
|  |  Spring                                                     |   |
|  |   ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ     ㅡㅡㅡㅡ     |   |
|  |  |  name  |  | age  |   |person |  |person2|   |address|    |   |
|  |  |        |  |      |   |       |  |       |   |       |    |   |
|  |   ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ     ㅡㅡㅡㅡ     |   |
|  |                                                             |   |
|   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ   | 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 
지난 단계에선 여러 개의 Bean을 관리하기 위해 가져왔다
이름, 나이, 인물, 주소가 있고 



	@Bean
	public String name () {
		return "Ranga";
	}
	@Bean
	public int age () {
		return 20;
	}
	@Bean
	public Person person() {
		return new Person("Ravi", 25);
	}
	@Bean
	public Address address () {
		return new Address("Baker Street","London");
	}
이 레코드는 여기 이름, 나이, 인물, 주소로 있다
관찰할 것 중 하나는 Bean의 기본 이름이 메서드의 이름이라는 점이다
변경하려면 어떻게 해야 할까?

	@Bean
	public Address address () {
		return new Address("Baker Street","London");
	}
이 빈의 이름을 여기 주소 대신 이름을 주소로 변경한다고 가정하겠다
@Bean에 특성을 추가하면 할 수 있다
@Bean을 입력하고 name 은 "yourCustomerBean"등 어떤 사용자 지정 이름으로나 설정할 수 있다

예를 들어 @Bean 이것도 @Bean(name = "address2")로 설정하겠다
	@Bean(name = "address2")
	public Address address () {
		return new Address("Baker Street","London");
	}



 
 이렇게 하겠다 실제로 실행하면 어떻게 될까??
----------------------------------------------------------------
 public class App02HelloWorldSpring {

	public static void main(String[] args) {
		
		//1: Launch a Spring Context - 

		var context = 
				new AnnotationConfigApplicationContext(HelloWorldConfiguration.class);

		//2: Configure the things that we want Spring to manage - 
		//HelloWorldConfiguration - @Configuration
		//name - @Bean
		
		//3: Retrieving Beans managed by Spring

		System.out.println(context.getBean("name"));

		System.out.println(context.getBean("age"));
	
		System.out.println(context.getBean("person"));
  
		System.out.println(context.getBean("address"));
    //여기서 추소를 찾고 있으며 실행하면 어떻게 되는 지 보겠다
		/*출력결과 ==>
    ....
		Person[name=Ravi, age=25]
    Exception in thread "main" org.springframework.beans.factory.NoSuchBeanDefinitionException: No bean named 'address' available
	  at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBeanDefinition(DefaultListableBeanFactory.java:895)
	  at org.springframework.beans.factory.support.AbstractBeanFactory.getMergedLocalBeanDefinition(AbstractBeanFactory.java:1319)
	  at org.springframework.beans.factory.support.AbstractBeanFactory.doGetBean(AbstractBeanFactory.java:299)
	  at org.springframework.beans.factory.support.AbstractBeanFactory.getBean(AbstractBeanFactory.java:199)
	  at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1231)
	  at com.example.demo.App02HelloWorldSpring.main(App02HelloWorldSpring.java:79)
    예외가 발생하였다 예외에 뭐라고 나왔을까? person 객체는 출력하지만 address를 검색할려고 하면 안되는데 address라는 이름의 Bean을 이용할 수 없기 때문이다
    어째서일까? address2로 이름을 변경했기 때문에 이렇게 하고 다시 실행하면 adress 객체가 출력됨을 확인할 수 있다
		*/

                            🔻     🔻     🔻

    System.out.println(context.getBean("address2"));
    /*출력결과 ==>
    Address[firstLine=Baker Street, city=London]
    
    address 객체가 출력됨을 확인할 수 있다
    그러나 address 객체에 이제 address2라는 Bean 이름이 있다
    Bean 이름을 필요에 따라 사용자 지정할 수 있다
    */
	} 

}
----------------------------------------------------------------


다음으로 할 것은 Spring 컨텍스트에서 Bean을 다시 검색하는 방법으로 살펴보겠다

System.out.println(context.getBean("address2"));
여기서 이름을 특성으로 전달하는 context.getBean을 활용하겠다 대안이 있다
예를 들어 유형도 매개 변수로 사용할 수 있다
여기에 context.getBean을 입력하는 대신 클래스를 전달할 수 있다 context.getBean(Address.class) 이 address.class 유형의 주소로 Bean을 가져오려 한다
어떻게 출력되는지 보겠다

----------------------------------------------------------------


	public static void main(String[] args) { 
		
		//1: Launch a Spring Context - 

		var context = 
				new AnnotationConfigApplicationContext(HelloWorldConfiguration.class);
		
		//2: Configure the things that we want Spring to manage - 
		//HelloWorldConfiguration - @Configuration
		//name - @Bean

		//3: Retrieving Beans managed by Spring
  
		System.out.println(context.getBean("name"));
		System.out.println(context.getBean("age"));
		System.out.println(context.getBean("person"));
		System.out.println(context.getBean("address2"));

    System.out.println(context.getBean(Address.class));
    /*출력결과 ==>
    Address[firstLine=Baker Street, city=London]

    동일한 주소가 다시 인쇄되었음을 확인할 수 있다
    Spring이 Bean을 관리하기 시작하면 Bean의 이름을 사용하거나 
    Bean의 유형을 사용해 다시 검색하고 다시 가져와 이용할 수 있다
    */
	} 

----------------------------------------------------------------

Spring이 여러 개의 Bean을 정의할 수 있으며 Spring에서 관리하는 객체를 
검색할 수 있는 다양한 접근 방식을 제공한다는 사실에 주목해야 한다

객체 사이에 관계가 있으면 어떨지에 대한 질문이 있을 것이다

	@Bean
	public String name () {
		return "Ranga";
	}
	@Bean
	public int age () {
		return 20;
	}
	@Bean
	public Person person() {
		return new Person("Ravi", 25);
	}
	@Bean
	public Address address () {
		return new Address("Baker Street","London");
	}
  @Bean(name = "address2")
  public Address address () {
  		return new Address("Baker Street","London");
  }
우리가 만든 모든 Bean이 상호 간에 종속되지 않게 될 때까지 이 사이에는 아무 관계가 없다


새로운 인물을 만들려고 한다고 가정하고 이 인물을 person2로 설정 하겠다

----------------------------------------------------------------

⏺ HelloWorldConfiguration 클래스파일


package com.example.demo;

import org.springframework.context.annotation.*;

//Relesed in JDK 16.
record Person (String name, int age) { };

//Address - firstLine & city
record Address(String firstLine ,String city) { };

@Configuration
public class HelloWorldConfiguration {
	
	@Bean
	public String name () {
		return "Ranga";
	}
	
	@Bean
	public int age () {
		return 20;
	}

	@Bean
	public Person person() {
		return new Person("Ravi", 25);
	}
	
	
하지만 이름은 이미 Spring에서 관리하고 있는 기존 Bean을 사용하겠다
이미 기존에 이름을 name으로 설정한 Spring이 관리하는 Bean이 있으며 나아가 여기 있는 기존 age도 있다
이 두 값을 사용하여 새로운 인물을 만들고자 한다 //다시 말해 기존 Spring Bean과 관계가 있는 새로운 Spring Bean을 만들겠다 어떻게 할까?
	
이 문제에 접근하는 방식은 크게 두 가지가 있다 첫번째는 메소드 호출이다 이 인물의 이름을 person2MethodCall로 설정하겠다 따라서 기본 이름은 메서드 호출과 동일한 인물이 된다

🟢 메소드 접근 방식

해야 할 것은 매우 간단하다 적절한 메서드를 호출하는 것이다 name()과 age()를 입력하고 person2MethodCall로 공통의 나이에 이름을 저장하고 새 Bean도 검색해 보겠다//App02HelloWorldSpring클래스로..
	@Bean
	public Person person2MethodCall() {
		return new Person(name(), age()); //name, age

	}

	@Bean(name = "address2")
	public Address address () {
		return new Address("Baker Street","London");
	}
}


--------------------------------------


⏺ App02HelloWorldSpring 클래스파일

package com.example.demo;

import org.springframework.context.annotation.*;

public class App02HelloWorldSpring {

	public static void main(String[] args) { 
 
		//1: Launch a Spring Context - 

		var context = 
				new AnnotationConfigApplicationContext(HelloWorldConfiguration.class);
		
		//2: Configure the things that we want Spring to manage - 
		//HelloWorldConfiguration - @Configuration
		//name - @Bean
		
		//3: Retrieving Beans managed by Spring

		System.out.println(context.getBean("name"));
		System.out.println(context.getBean("age"));
		System.out.println(context.getBean("person"));

		System.out.println(context.getBean("person2MethodCall"));
		//메소드호출을 사용해 인물과 관련된 세부 사항을 가져온다 그 방법으로 person2MethodCall로 명명하겠다 실행해보자
		/*출력결과 ==>
		Person[name=Ranga, age=20]
		두 번째 인물이 Ranga 20으로 출력되었음을 확인할 수 있다
		*/
		
		System.out.println(context.getBean("address2"));
		System.out.println(context.getBean(Address.class));
	} 

}

----------------------------------------------------------------



지금부터 할 것은 인물 객체에 주소를 추가하는 것이다 주소 Address를 추가하겠다 

record Person (String name, int age, Address address) { };

person 생성자에도 매개 변수를 추가하고 있다 컴파일 오류가 생기며 Ravi의 경우
		return new Person("Ravi", 25, ); 여기 이 주소는 새 주소로 하드코드 하겠다
                            🔻  🔻  🔻
    return new Person("Ravi", 25, new Address("Main Street","Utrecht"));


@Bean
public Person person2MethodCall() {
    return new Person(name(), age()); //name, age
}
여기선 이미 Spring이 관리하는 주소를 사용하겠다 관계를 만드는 방법은 메서드를 호출하는 것이다
                🔻  🔻  🔻
@Bean
public Person person2MethodCall() {
    return new Person(name(), age(), address()); //name, age
}

이제 한번 실행해보자

System.out.println(context.getBean("person"));
/*실행코드==>
Person[name=Ravi, age=25, address=Address[firstLine=Main Street, city=Utrecht]]
*/
System.out.println(context.getBean("person2MethodCall"));
/*실행코드==>
Person[name=Ranga, age=20, address=Address[firstLine=Baker Street, city=London]]
*/


Bean을 만들 수 있고 이미 Spring 프레임워크에서 관리하는 기존 Bean을 재활용할 수 있다는 점을 확인했다
	@Bean
	public Person person2MethodCall() {
		return new Person(name(), age(), address()); //name, age

	}
여기선 name Bean, age Bean, address Bean을 활용하고 이를 사용해 새 Bean person2를 만들었다 
지금까지 본 접근 방식은 Bean 메서드를 직접 호출하는 것이다


----------------------------------------------------------------------
🟢 Parameter를 활용한 접근법

다른 접근 방식도 있다
다른 접근 방식은 무엇일까?

person3Parameters라고 생성 
이번엔 무엇일까?? 
매개 변수이며 여기서 적절한 이름으로 매개 변수를 설정할 수 있다
	@Bean
	public Person person3Parameters() {
		return new Person(name(), age(), address()); //name, age

	}
                
이름을 선택하겠다 name은 여기서 name으로 설정하겠다 따라서 매개 변수 이름도 name이어야 한다
나이는 age 따라서 여기에도 나이가 있어야 하며 주소의 경우 이름이 조금 다르다 @Bean(name = "address2")의 address2이기 때문에 여기 address2를 사용해야 한다,
메서드가 address 여도 Bean이름이 address2이기 때문에 여기서 address2를 활용해야 한다

여기 매개 변수를 전달해야 하므로 String name, int age, Address 변수 이름은 address2여야 한다 

	@Bean
	public Person person3Parameters(String name, int age, Address address2) {
		//name, age, address2
		return new Person(name(), age(), address2()); //name, age  <= 이부분 사실 바꿀게 더 있는데 여기서 메소드를 호출할 필요가 없다 메개 변수를 사용해야 하고  name,age,address2
                                                      //메서드를 호출하는 대신 매개 변수를 추가한다
	}
                              🔻  🔻  🔻
	@Bean
	public Person person3Parameters(String name, int age, Address address2) {
		//name, age, address2
		return new Person(name, age, address); //name, age  
	}
Spring이 관리하는 Bean을 가져오는 다른 방법이었다 이름 name으로 관리되고 이름age로 관리되며 이름address2로 관리된다
이 Bean을 가져와 주입하겠다 자동으로 결합(Autowired) 하곘다 이 특정 Bean을 만드는 데 이 값이 사용된다

한 개의 Spring Bean을 만드는 데 다른 기존 Spring Bean을 사용한 것이며 실행해 보겠다

System.out.println(context.getBean("person3Parameters"));
/*출력결과==>
Person[name=Ranga, age=20, address=Address[firstLine=Baker Street, city=London]]

person3가 여기 출력됐다 person2MethodCall과 값이 동일하다
*/

원한다면 값에 변화를 줘도 좋다 address2사용하는 대신 address3을 사용하고 
	@Bean(name = "address3")
	public Address address3 () {
		return new Address("Motinagar","Hyderabad");
	}
 
 address2대신 address3를 사용하겠다
 	@Bean
	public Person person3Parameters(String name, int age, Address address3) {
		//name, age, address2
		return new Person(name, age, address3); //name, age

	}
 어플리케이션을 실행해보겠다

System.out.println(context.getBean("person3Parameters"));
/* 수정후 출력결과 ==>
 Person[name=Ranga, age=20, address=Address[firstLine=Motinagar, city=Hyderabad]]
 Exception in thread "main" org.springframework.beans.factory.NoUniqueBeanDefinitionException: No qualifying bean of type 'com.example.demo.Address' available: expected single matching bean but found 2: address2,address3
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveNamedBean(DefaultListableBeanFactory.java:1312)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.resolveBean(DefaultListableBeanFactory.java:486)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:341)
	at org.springframework.beans.factory.support.DefaultListableBeanFactory.getBean(DefaultListableBeanFactory.java:334)
	at org.springframework.context.support.AbstractApplicationContext.getBean(AbstractApplicationContext.java:1249)
	at com.example.demo.App02HelloWorldSpring.main(App02HelloWorldSpring.java:98)
 오류가 있다 무슨 오류일까?  available: expected single matching bean but found 2: address2,address3
 일치하는 Bean이 한 개 있어야 하지만 address2와 address3이 있다 오류의 원인이 어떤 줄일까?
 오류의 원인이 있는 줄은 context.getBean(Address.class)이다 (System.out.println(context.getBean(Address.class));) <= 이부분을 주석으로 빼주고 왜 오류의 원인인지 생각해 봐라 조금있다 다뤄보곘다
 주석 달았으면 다시 실행시켜 보자
*/

System.out.println(context.getBean("person3Parameters"));
/*주석후 다시 실행==>
Ranga
20
Person[name=Ravi, age=25, address=Address[firstLine=Main Street, city=Utrecht]]
Person[name=Ranga, age=20, address=Address[firstLine=Baker Street, city=London]]
Person[name=Ranga, age=20, address=Address[firstLine=Motinagar, city=Hyderabad]]
Address[firstLine=Baker Street, city=London]

프로그램이 성공적으로 실행되고 세 번째 인물에 모티 나가르와 하이데라바드 주소가 있음을 확인할 수 있다
우리가 만든 address3이다
*/








/*
정리
이번 학습에선 Bean 설정에 대해 알아야 할 중요한 점을 배워 보았다

첫 번째로 Bean에 사용자 지정 이름을 설정할 수 있다는 점을 배웠다 (	@Bean(name = "address2") )
단순히 기본 메서드 이름을 사용하는 대신 직접 사용자 지정 이름을 설정할 수 있다

두 번째로 배운 점은 다양한 방법으로 Spring 컨텍스트에서 Bean을 검색할 수 있다는 사실이다 ( System.out.println(context.getBean("person3Parameters")); )
한 가지 방법은 Bean 이름을 사용하는 것이며 ( System.out.println(context.getBean("address2")); )
다른 하나는 클래스 이름의 형식을 사용하는 것이다 ( System.out.println(context.getBean(Address.class)); )

세 번째로 알게 된 점은 Spring에서 관리하는 기존 Bean을 사용하여 새 Bean을 만들 수 있다는 점이다
	@Bean
	public Person person3Parameters(String name, int age, Address address3) {
		//name, age, address2
		return new Person(name, age, address3); //name, age

	}
Spring 프레임워크에서 관리하는 기존 Bean을 사용하여 이 person3를 만들었다

이 모든 것을 하는 동안 문제에 직면하기도 했다
//		System.out.println(context.getBean(Address.class));
이 코드 줄을 주석으로 처리하지 않으면 문제가 생긴다는 점을 확인했다
여러 개의 Bean이 발견되었다는 예외를 출력한다

다음 학습을 통해 어떻게 고칠 수 있는지 알아보겠다
*/
