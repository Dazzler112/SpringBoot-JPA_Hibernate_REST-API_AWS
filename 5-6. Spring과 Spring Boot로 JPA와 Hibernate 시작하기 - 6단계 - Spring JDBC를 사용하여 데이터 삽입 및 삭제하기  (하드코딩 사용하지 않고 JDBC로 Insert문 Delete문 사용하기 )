

Spring JDBC를 사용해서 간단한 쿼리를 실행할 수 있었는데 
Spring JDBC로 코드를 작성하는 게 아주 쉬웠다

JDBC to Spring JDBC

 ________________________________________________________________________________________________________________________
| public void deleteTodo (int id) {                                                                                      |                                                   
|    PreparedStatement st = null;                                                                                        |                                                 
|    try {                                                                                                               |                       
|         st = db.conn.prepareStatement("delete from todo where id=?");                                                  |                                                                               
|         st.setInt(1, id);                                                                                              |                                   
|         st.execute();                                                                                                  |                               
|     } catch (SQLException e) {                                                                                         |                                            
|         logger.fatal("Query Failed : '',e);                                                                            |                                                      
|     } finally {                                                                                                        |                             
|          if (st != null) {                                                                                             |                                   
|              try {st.close();}                                                                                         |                                   
|              catch (SQLException) {}                                                                                   |                                       
|           }                                                                                                            |                  
|      }                                                                                                                 |                 
| }                                                                                                                      |                   
|                                                                                                                        |                  
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

________________________________________________________________________________________________________________________
| public void deleteTodo (int id) {                                                                                      |
|        jdbcTemplate.update("delete from todo where id=", id);                                                          |
| }                                                                                                                      |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
같은 작업을 JDBC로 해야 한다면 Java 코드를 아주 많이 써야 한다, 

Spring JDBC로는 쿼리를 작성해야 하지만 써야 하는 Java 코드는 보통 간단하다 

@Repository
public class CourseJdbcRepository {

	@Autowired
	private JdbcTemplate springJdbcTemplate;
	
	private static String INSERT_QUERY = 
			"""
			INSERT INTO course(id, name, author)
		    VALUES(1,'Learn AWS','in28minutes');	
		    	
			""";
	public void insert () {
		springJdbcTemplate.update(INSERT_QUERY);
	}
}


• Insert

이제 특정 과정의 세부항목을 삽입할 수 있게 해야 하는데 

------------------------------------------------------------------------------------------------------------


⏺ CourseJdbcRepository2 클래스파일


package com.springstudy.springboot.learnjpaandhibernate.course.jdbc;

import org.springframework.beans.factory.annotation.*;
import org.springframework.jdbc.core.*;
import org.springframework.stereotype.*;

import com.springstudy.springboot.learnjpaandhibernate.course.*;


@Repository
public class CourseJdbcRepository2 {

	@Autowired
	private JdbcTemplate springJdbcTemplate;
	
	//3: 여기 있는 항목들, 즉 insert 쿼리를 업데이트 해야 한다 이건 하드코드로 작성하는 값이 아니다 Course에서 가져와야한다 어떻게 할 수 있을까??
	//방법은 value에 (1,'Learn AWS','in28minutes') 값 대신 물음표를 정의하는 것이다, (?,?,?)물음표를 넣고 
	//쿼리에 이렇게 ?를 넣고 있는데, 업데이트를 실행할 때 값을 전달하면 된다//3-1: 아래 insert메소드로..
	private static String INSERT_QUERY = 
			"""
			INSERT INTO course(id, name, author)
		    VALUES(?,?,?);	
		    	
			""";

	//1: Course를 삽입하고 세부항목을 전달하고 그 값을 가져와 insert 쿼리를 실행하려 한다 ctrl+1을 눌러 Course 클래스를 생성하겠다,패키지 뒤에 .jdbc는 빼고 course까지만//2: Course 클래스파일로..  
	public void insert (Course course) {
	//3-1: 이제 삽입하려는 순서대로 모든 값을 전달한다 첫 번째는 id이다 course.getId()를 입력하고, 다음은 course.getName()이지 마지막으론 course.getAuthor를 입력하고 저장한다 
	//이렇게 쿼리 업데이트를 실행하고 id와 name, author를 전달해서 insert쿼리를 실행한다 course.getxx 값들은 여기 이 물음표와 같은 순서로ㄷ 되어 있어야한다 
	//첫 번째 ? 는 getId()와 짝을 이루고, 두번째는 getName()과 짝을이룬다, 세번째 ? 는 getAuthor()과 짝을 이룬다 이제 저장한다 이제 CourseJdbcCommandLineRunner로 가면 컴파일 오류가 보일 것이다//4: CourseJdbcCommandLineRunner클래스파일로..
		springJdbcTemplate.update(INSERT_QUERY, 
								  course.getId(), 
								  course.getName(), 
								  course.getAuthor()
								  );
	}
}

--------------------------------------------------------


⏺ Course 클래스파일



package com.springstudy.springboot.learnjpaandhibernate.course;

public class Course {

	//2: 여기에 저장할 세부사항은 뭘까? private long id, private String name, private String author 이다
	
	private long id;
	private String name;
	private String author;
	
	//2-1: 그다음 몇 가지 메서드를 생성해야겠지, constructor를 생성할 거고 getters도 생성하고 toString메서드도 생성할 것이다
	//먼저 toString부터 시작해보자, 소스에서 우클릭하고 toString()생성을 누르고, 여기 나와있는 필드를 선택할수 있다 이제 toString 메서드가 생성됐다
	//다음으로 getters를 생성 getter만 생성해주고 마지막으로 생성할 것은 constructor이다 
	//먼저 여기에 인수가 없는 생성자 public Course를 생성한다 인수가 없는 생성자이고, 인수가 있는 생성자를 생성해보겠다
	//이제 필드가 3개인 Course Bean이 생겼는데, 인수가 없는 생성자와 인수가 3개인 생성자, getters 그리고 toString메서드이다
	//이제 할 일은 이걸 CourseJdbcRepository에 전달하는 것이다 그럼 CourseJdbcRepository를 저장하겠다//3: CourseJdbcRepository 클래스파일로..
	public Course () {
		
	}
	
	
	public Course(long id, String name, String author) {
		super();
		this.id = id;
		this.name = name;
		this.author = author;
	}


	public long getId() {
		return id;
	}
	
	public String getName() {
		return name;
	}
	
	public String getAuthor() {
		return author;
	}
	@Override
	public String toString() {
		return "Course [id=" + id + ", name=" + name + ", author=" + author + "]";
	}

	
}	


--------------------------------------------------------



⏺ CourseJdbcCommandLineRunner 클래스파일



package com.springstudy.springboot.learnjpaandhibernate.course.jdbc;

import org.springframework.beans.factory.annotation.*;
import org.springframework.boot.*;
import org.springframework.stereotype.*;


@Component
public class CourseJdbcCommandLineRunner implements CommandLineRunner{

	@Autowired
	private CourseJdbcRepository2 repository;

  //4: 여기 컴파일 오류가 보일 것이다 여기에 새 과정을 생성해서 보내야 하니까 new Course(1, 을 입력하고 "Learn AWS 1" 이라고 하겠다 <=(큰따옴표를 써야 한다, SQL에선 작은따옴표, Java코드에선 큰따옴표다) "in28minutes") 를 써준다 살짝 다르게 값을 넣어줬다
	//임포트를 정리하면 com.springstudy.springboot.learnjpaandhibernate.course.course로 Course클래스를 가져오게 되겠지 저장 서버 재시작
  @Override
	public void run(String... args) throws Exception {
		repository.insert(new Course(1, "Learn AWS Now!", "in28minutes"));
	}
	
}

------------------------------------------------------------------------------------------------------------

재시작 할 때마다 H2에 있는데이터가 새로고침 되는데, 그러면 기존 데이터가 삭제되고 삽입하려는 새 데이터만 H2 Database에 보이게 된다
그럼 확인해보자 

------------------------------------------------------------------------------------------------------------

⏺ H2 Console

SELECT * FROM COURSE; 

--------------------------------------------------

실행결과 : 

SELECT * FROM COURSE;
ID  	NAME  	AUTHOR  
1	Learn AWS Now!	in28minutes
(1 row, 3 ms)

여기 Learn AWS Now!가 나왔다  Learn AWS Now!가 이제 보인다
------------------------------------------------------------------------------------------------------------

이제 행 하나를 삽입할 수 있게 됐으니까 추가로 넣는 건 아주 쉽겠지?
 @Override
	public void run(String... args) throws Exception {
		repository.insert(new Course(1, "Learn AWS Now!", "in28minutes"));
    repository.insert(new Course(2, "Learn Azure Now!", "in28minutes"));
		repository.insert(new Course(3, "Learn DevOps Now!", "in28minutes"));
	}
Learn new Course 2, new Course 3 등 쉽게 입력할 수 있다
저장 후 멈추고 다시 시작하면 H2 Database에 반영된 게 보일 것이다 

SELECT * FROM COURSE;
ID  	NAME  	AUTHOR  
1	Learn AWS Now!	in28minutes
2	Learn Azure Now!	in28minutes
3	Learn DevOps Now!	in28minutes
(3 rows, 2 ms)



