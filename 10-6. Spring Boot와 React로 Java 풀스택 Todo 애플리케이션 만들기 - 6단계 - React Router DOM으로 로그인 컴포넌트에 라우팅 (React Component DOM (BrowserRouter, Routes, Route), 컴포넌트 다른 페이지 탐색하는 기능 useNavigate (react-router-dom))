

지난 시간에 우리는 로그인 컴포넌트를 거의 작동하게 만들었다 
마지막으로 남은 기능은 사용자가 올바른 인증 정보를 입력했을 때
Welcome 컴포넌트로 연결해주는 것이다
이 기능을 어떻게 구현하는지 함께 살펴보자

우리가 하려는 것은 로그인 컴포넌트에서 웰컴 컴포넌트로 라우팅 하는 것이다
라우팅을 가능하게 하는 것은 바로 React Router DOM 이다

프로젝트에 React Router DOM을 추가해야 한다, 

--------------------------------------------------

Compiled successfully!

You can now view todo-app in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://172.27.0.1:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully

//여기서 Ctrl + C 를 하고
일괄 작업을 끝내시겠습니까 (Y/N)?
^C
//여기서 npm install react-router-dom 을 입력한다, 실행되고 있던 애플리케이션을 종료하고 NPM install로 React Router Dom 패키지를 설치한다
C:\study\frontend\todo-app> npm install react-router-dom
/ (로딩중)

added 3 packages, and audited 1546 packages in 1m

262 packages are looking for funding
  run `npm fund` for details

9 vulnerabilities (2 moderate, 7 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

--------------------------------------------------
이렇게 하면 React Router DOM 패키지가 설치될 것이다


VSC에서 package.json을 열면

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ pakage.json



{
  "name": "todo-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.24.1",   //<= 여기에 새로운 엔트리가 보이지?, react-router-dom이 프로젝트에 추가되었다
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
-----------------------------------------------------------------------------------------------

멋지다

npm start로 프로젝트를 다시 시작하겠다, 
pakage.json에 변경사항이 발생할 때마다 
그리고 새로운 의존성을 추가할 때마다 애플리케이션을 다시 시작해야 한다

방금 다 했다, 애플리케이션을 내렸다가 올렸고 이제 react-router-dom은 우리 애플리케이션에 추가되었다
이제 사용해 봐야지

먼저 로그인 컴포넌트와 웰컴 컴포넌트를 위한 별도의 URL을 구성한다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx




import { useState } from 'react'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />

            //1: 웰컴 컴포넌트를 추가하고 (주석 처리 해놓은것 주석 삭제 {/* <WelcomeComponent /> */} 의 {/* 부분 삭제)
            //저장하면 어떻게 되지?
            <WelcomeComponent />
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------
                                            |
                                            V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                       
                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾
                                        Welcome Component

-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

로그인 컴포넌트와 웰컴 컴포넌트가 둘 다 보인다

로그인 컴포넌트를 위한 URL과 웰컴 컴포넌트를 위한 RUL을 구성한다고 해보자
/login은 로그인 컴포넌트로, /welcome은 웰컴 컴포넌트로 연결되고 리액트 라우터를 구성할 수 있다

일단 몇 가지 임포트부터 시작하자

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'

//2: 임포트 해야 할 것은 BrowserRouter라는 게 있고 Routes라는 게 있다, 
//import {BrowserRouter, Routes} 어디에서 가져올까? from 'react-router-dom' 에서 가져오겠다
import {BrowserRouter, Routes} from 'react-router-dom'

import './TodoApp.css'


export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            <WelcomeComponent />
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------

이제 임포트한 이 두가지를 사용해보겠다
일단 Browser Router가 있지

