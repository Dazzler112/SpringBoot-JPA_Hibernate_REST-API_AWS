

지난 시간에 우리는 로그인 컴포넌트를 거의 작동하게 만들었다 
마지막으로 남은 기능은 사용자가 올바른 인증 정보를 입력했을 때
Welcome 컴포넌트로 연결해주는 것이다
이 기능을 어떻게 구현하는지 함께 살펴보자

우리가 하려는 것은 로그인 컴포넌트에서 웰컴 컴포넌트로 라우팅 하는 것이다
라우팅을 가능하게 하는 것은 바로 React Router DOM 이다

프로젝트에 React Router DOM을 추가해야 한다, 

--------------------------------------------------

Compiled successfully!

You can now view todo-app in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://172.27.0.1:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully

//여기서 Ctrl + C 를 하고
일괄 작업을 끝내시겠습니까 (Y/N)?
^C
//여기서 npm install react-router-dom 을 입력한다, 실행되고 있던 애플리케이션을 종료하고 NPM install로 React Router Dom 패키지를 설치한다
C:\study\frontend\todo-app> npm install react-router-dom
/ (로딩중)

added 3 packages, and audited 1546 packages in 1m

262 packages are looking for funding
  run `npm fund` for details

9 vulnerabilities (2 moderate, 7 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.

--------------------------------------------------
이렇게 하면 React Router DOM 패키지가 설치될 것이다


VSC에서 package.json을 열면

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ pakage.json



{
  "name": "todo-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.24.1",   //<= 여기에 새로운 엔트리가 보이지?, react-router-dom이 프로젝트에 추가되었다
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
-----------------------------------------------------------------------------------------------

멋지다

npm start로 프로젝트를 다시 시작하겠다, 
pakage.json에 변경사항이 발생할 때마다 
그리고 새로운 의존성을 추가할 때마다 애플리케이션을 다시 시작해야 한다

방금 다 했다, 애플리케이션을 내렸다가 올렸고 이제 react-router-dom은 우리 애플리케이션에 추가되었다
이제 사용해 봐야지

먼저 로그인 컴포넌트와 웰컴 컴포넌트를 위한 별도의 URL을 구성한다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx




import { useState } from 'react'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />

            //1: 웰컴 컴포넌트를 추가하고 (주석 처리 해놓은것 주석 삭제 {/* <WelcomeComponent /> */} 의 {/* 부분 삭제)
            //저장하면 어떻게 되지?
            <WelcomeComponent />
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------
                                            |
                                            V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                       
                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾
                                        Welcome Component

-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

로그인 컴포넌트와 웰컴 컴포넌트가 둘 다 보인다

로그인 컴포넌트를 위한 URL과 웰컴 컴포넌트를 위한 RUL을 구성한다고 해보자
/login은 로그인 컴포넌트로, /welcome은 웰컴 컴포넌트로 연결되고 리액트 라우터를 구성할 수 있다

일단 몇 가지 임포트부터 시작하자

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'

//2: 임포트 해야 할 것은 BrowserRouter라는 게 있고 Routes라는 게 있다, 
//import {BrowserRouter, Routes} 어디에서 가져올까? from 'react-router-dom' 에서 가져오겠다
import {BrowserRouter, Routes} from 'react-router-dom'

import './TodoApp.css'


export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <LoginComponent />
            <WelcomeComponent />
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------

이제 임포트한 이 두가지를 사용해보겠다
일단 Browser Router가 있지

TodoApp 안에서 라우팅을 추가할 것이다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'

//3-3: 여기에 임포트 하겠다 ( {BrowserRouter, Routes} 에 ,Route 추가 ) 이것도 react-router-dom에서 가져온다
//이제 세 개가 있다, BrowserRouter, Routes, Route이다, Route는 특정 Routes를 구성하는 곳이지 //3-4: 다시 TodoApp()으로..
import {BrowserRouter, Routes, Route} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>

          //3: Browser Router이다, 라우터 안에 Routes라는 걸 구성할 것이다
            <BrowserRouter>
              //3-1: Browser Router의 일부로 Routes를 구성한다, 그리고 Route를 구성해야지
              <Routes>

               //3-2: 뭘 구성한다고? Route를 구성한다, 아직 Route는 임포트를 안 했네, 일단 Route를 임포트 해야겠다 //3-3: import 부분으로..
                //3-4: 우리가 구성하려는 건 path이다 어떤 경로와 어떤 요소(element)로 가야할까?, 여기에서 사용하는 특정 구문이 있다, 일단 element에 중괄호를 열고 닫겠다
                //path와 element가 여기에 있다 일단( <Route path='' element={}> ) 이걸 복제하겠다
                //그리고 첫 번째 요소는 로그인 컴포넌트를 넣겠다, 첫 번째 요소에 로그인 컴포넌트, 두 번째 요소에 웰컴 컴포넌트를 넣는다
                //첫 번째 요소는 로그인 컴포넌트지 두 번째 요소는 웰컴 컴포넌트이다, 
                //🔵1. 로그인 컴포넌트에 어떤 경로를 주고 싶니? login이겠지, 
                <Route path='/login' element={<LoginComponent />}></Route>
                //🔵2. 웰컴 컴포넌트에는 welcome을 주고싶다 그리고 경로 앞부분에 /를 적어준다 /login, /welcome이라 적고 저장한다
                <Route path='/welcome' element={<WelcomeComponent />}></Route>

              </Routes>
            </BrowserRouter>

            <LoginComponent />
            <WelcomeComponent />
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------

Routes로 브라우저 라우터를 구성하고 있는 것이다
사용자가 /login이라는 URL로 가면 로그인 컴포넌트를 보여주는 거지
( <Route path='/login' element={<LoginComponent />}></Route> )
여기에 JSX 변수 표기 방식을 쓰고 있는 게 보이지 ( {<LoginComponent />} ) <LoginComponent /> 이게 사용자가 /login으로 보여주고 싶은 요소이다

/welcome으로 가면 우리는 웰컴 컴포넌트를 보여주고 싶다
( <Route path='/welcome' element={<WelcomeComponent />}></Route> )


저장하고 브라우저로 가보자
                                            |
                                            V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                       



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
 ❗▼ No routes matched location "/"                                          history.ts:501
  warning	@	history.ts:501
  Show less
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 ❗▼ No routes matched location "/"                                          history.ts:501
  warning	@	history.ts:501
  Show less
-------------------------------------------------------------------------------------------

일단 지금은 오류가 보인다

/localhost:3000 /에 해당하는 Route가 없다
/에 해당하는 Route도 하나 추가하겠다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import {BrowserRouter, Routes, Route} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <BrowserRouter>
                <Routes>

                  //4: /에 해당하는 Route도 하나 추가하겠다, /에 해당하는 Route는 로그인 컴포넌트를 보여주도록 하겠다
                  //사용자가 이 URL로 가면 로그인 컴포넌트를 보여주는 것이다
                    <Route path='/' element={<LoginComponent />}></Route>   
        
                    <Route path='/login' element={<LoginComponent />}></Route>
                    <Route path='/welcome' element={<WelcomeComponent />}></Route>
                </Routes>
            </BrowserRouter>
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------
콘솔창을 지우고 페이지를 새로 고침 하면          |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

                    
                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------- 

오류가 사라진다, 
그리고 여기 주소창에 /login이라고 입력하면
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/login 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

                    
                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |                  |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

로그인 URL로 가는 것이다

주소창에 welcome이라고 입력하면 
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

                    
                                    Welcome Component



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

웰컴 컴포넌트가 보이지

이렇게 각 컴포넌트에 연결된 URL들이 있다

이제 뭘 해야 하지?
한 컴포넌트에서 다른 컴포넌트로 라우팅 해야 한다
로그인에서 사용자가 올바른 정보를 입력하면 웰컴 컴포넌트로 라우팅하고 싶다

어떻게 하지?

여기 handleSubmit에서 
-------------------------------------
    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
-------------------------------------
웰컴 컴포넌트로 라우팅 한다
로그인에 성공하면 우리는 또 다른 hook을 사용해서 라우팅할 수 있다

지금 까지는 useState라는 hook을 사용했지
import { useState } from 'react' 이걸로 State를 다뤘다
react-router-dom에 정의된 또 다른 hook이 있다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'

//5: 바로 useNavigate지, useNavigate로 다른 페이지를 탐색할 수 있다, 위치를 변경하는 명령 메서드를 반환하는 거지 
//useNavigate를 사용해보겠다 //5-1: LoginComponent()의 const변수들 있는곳에 작성..
import {BrowserRouter, Routes, Route, useNavigate} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <BrowserRouter>
                <Routes>
                    <Route path='/' element={<LoginComponent />}></Route>
                    <Route path='/login' element={<LoginComponent />}></Route>
                    <Route path='/welcome' element={<WelcomeComponent />}></Route>
                </Routes>
            </BrowserRouter>
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)

  //5-1: 여기 State변수 아래에 const를 만들겠다 const로 만들고 navigate = useNavigate()를 쓰겠다, 함수를 반환해줄 것이다, 그리고 우리 handleSubmit메서드에서 //5-2: handleSubmit 메서드로..
    const navigate = useNavigate;

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)

        //5-2: 모든 작업이 성공하면 특정 URL을 탐색하고 싶다, 어디로 탐색하고 싶지? (<Route path='/welcome' element={<WelcomeComponent />}>) 여기 있지? 우리는 /welcome 페이지를 탐색하고 싶다
        //여기에서 '/welcome' , 저장하겠다
        navigate('/welcome')

        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {
    return (
        <div className='Welcome'>
            Welcome Component
        </div>
    )
}
-----------------------------------------------------------------------------------------------
새로 고침 하면                                 |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/login 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

                    
                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |●●●●●             |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

in28minutes , dummy로 로그인 하면 
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

                    
                                    Welcome Component



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

ㅇㅋ 축하한다
웰컴 컴포넌트로 연결되었다
값을 올바르게 입력한 거지



만약 올바른 값을 입력하지 않으면 어떻게 될까?

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/login 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                        Authentication Failed. Please check your credentials.
                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |●●●●●●●●●●        |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

오류 메시지가 보인다 








이번 시간에 우리는 react-router-dom을 추가했다
컴포넌트에 Routes를 생성했고
---------------------------------------
            <BrowserRouter>
                <Routes>
                    <Route path='/' element={<LoginComponent />}></Route>
                    <Route path='/login' element={<LoginComponent />}></Route>
                    <Route path='/welcome' element={<WelcomeComponent />}></Route>
                </Routes>
            </BrowserRouter>
---------------------------------------
로그인 컴포넌트에 해당하는 로그인 라우터와 웰컴 컴포넌트에 해당하는 웰컴 라우터를 만들었지
사용자가 올바른 인증 정보를 입력하면 로그인 컴포넌트에서 다른 컴포넌트로 이동하는 방법도 배웠다
웰컴 컴포넌트로 연결했지, 그렇게 하기 위해서 useNavigate를 사용했다
useNavigate는 함수에 대한 참조를 반환하고, 여기에서 navigate함수를 호출해 웰컴 페이지로 연결되었지
다음 시간에 보겠다
