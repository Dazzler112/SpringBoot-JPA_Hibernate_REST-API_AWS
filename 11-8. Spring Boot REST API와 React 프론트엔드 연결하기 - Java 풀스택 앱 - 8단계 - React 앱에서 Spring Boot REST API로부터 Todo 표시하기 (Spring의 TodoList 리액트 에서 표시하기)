

지난 단계에서 우리는 Todo 리스트를 받기 위한 REST API를 만들었고 
이제 그걸 사용하려고 한다 
리액트 애플리케이션에서 그걸 어떻게 호출할까?

앞에서 이 HelloWorldApiService를 만들었고, 
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ HelloWorldApiServices.js



import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

export const retrieveHelloWorldBean 
        = () => apiClient.get('/hello-world-bean')

export const retrieveHelloWorldPathVariable 
        = (username) => apiClient.get(`/hello-world/path-variable/${username}`)
----------------------------------------------------------------------------------------------------------------------
이걸 사용해서 다른 서비스를 호출했지

그럼 지금 이런 파일들을 만들려고 한다
vsc에서 Explorer를 열고 HelloWorldApiServices.js이걸 복사해보자
그럼 HelloWorldApiServices copy가 생기고 이름을 TodoApiService로 바꿔보자 엔터키를 누르고, 
TodoApiService에서 너는 아주 비슷한 걸 하려고 한다, 맞지?
우리는 Axios를 사용하려고 하고, 기본 URL은 변하지 않을 것이다,
그리고 우린 특정한 username에 관한 세부정보를 받으려고 하지

그럼 이것부터 해보겠다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoApiServices.js




import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

//1: 그럼 우리는 retrieveTodosForUser 라고 해주자, 더 분명하게 하기 위해 중간에 All을 넣어주고, 그럼 retrieveAllTodosForUsername 이라고 해준다, 좋다
//이렇게 retrieveAllTodosForUsername이라고 하고 URL은 무엇이 될까?
export const retrieveAllTodosForUsername 
                                //1-1: URL은 약간 다를것이다, 맞지? 그럼 /users/${username}/todos가 되어야 하겠지
        = (username) => apiClient.get(`/users/${username}/todos`)
----------------------------------------------------------------------------------------------------------------------

여기서
--------------------------------------------------------------------------------------------


🌎 http://localhost:8080/users/in28minutes/todos 사이트화면 ==>


[
  {
    "id": 1,
    "username": "in28minutes",
    "description": "Get AWS Certified",
    "targetDate": "2034-07-27",
    "done": false
  },
  {
    "id": 2,
    "username": "in28minutes",
    "description": "Learn DevOps",
    "targetDate": "2035-07-27",
    "done": false
  },
  {
    "id": 3,
    "username": "in28minutes",
    "description": "Learn Full Stack Development",
    "targetDate": "2036-07-27",
    "done": false
  }
]

--------------------------------------------------------------------------------------------
받아서 

100% 맞는지 확인해보자
http://localhost:8080/users/in28minutes/todos 이게 우리가 매칭시켜야 할 URL이다
이렇게 users/${username}/todos이다
이제 우리는 이렇게 TodoApiService에 retrieveAllTodosForUsername 메서드를 만들었다
우린 retrieveAllTodosForUsername이걸 컴포넌트에서 호출할고 하지 

Todo앱을 보면,

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	            is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  1	    Learn AWS		             false        Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  2	    Learn Full Stack Dev		 false        Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  3	    Learn DevOps		         false        Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                        
-------------------------------------------------------------------------------------------

우리는 Todos 컴포넌트에서 Todo 리스트를 보여주고 있지, ListTodosComponent이다
우리는 여기서 REST API를 호출하고 여기에 Todo 리스트를 표시하려고 하지
그럼 그걸 해보자

그럼 우리의 ListTodosComponent로 가보자
보면, 앞에서 우리는 
----------------------------------
    const todos = [
        {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
        {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
        {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
      ]
----------------------------------
이 정보를 하드코딩했지

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    //2: 이제 이걸 코멘트로 빼주겠다, 그럼 비어 있는 Todo리스트가 표시되겠지, 이걸 저장해보자
    const todos = [   
 //       {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},    (<= 주석처리)
 //       {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
 //       {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
      ]

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그리고 페이지로 돌아가보면
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	            is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                        
-------------------------------------------------------------------------------------------

비어 있는 Todo 리스트가 오는 게 보일 것이다
이제 우리는 Todo를 페이지에 표시하려고 하고, Todo리스트는 계속 변할 것이다

그러므로 우린 이걸 상태로 설정할 것이다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



//3-1: import { useState } from "react"가 나오고 //3-2: 다시 ListTodosComponent() 안으로..
import { useState } from "react"


function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    //3: 그럼 const [] 라고 하고 원소 두 개 쓸 것이고 useState를 사용할 것이다, 그럼 useState라고 입력하고 그리고 엔터키를 누른다 //3-1: 임포트로..
    //3-2: 그리고 기본값은 비어 있는 값이고 그건 비어 있는 배열이지, 그리고 []안에는 todos, setTodos라고 해준다 //3-3: const todos로...
    const [todos, setTodos] = useState([])

    //3-3: 그리고 이제 이 const 전체를 코멘트로 뺄 수 있지, 이건 이제 필요하지 않고 
 //   const todos = [ (<= 주석처리)
        // {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
        // {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
        // {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
 //     ]

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent

----------------------------------------------------------------------------------------------------------------------

이렇게 상태 안에 Todo를 넣었고, (<= const [todos, setTodos] = useState([]))
지금은 비어있다
그럼 페이지로 가서 보면
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	            is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                        
-------------------------------------------------------------------------------------------

지금은 비어 있고, 좋다

이제 너는 컴포넌트가 준비되면 
------------------------------
export const retrieveAllTodosForUsername 
        = (username) => apiClient.get(`/users/${username}/todos`)
------------------------------
이 REST API를 호출하려고 한다
우리는 이걸 사용해서 모든 Todo를 받으려고 하지

근대 이걸 보니 하나 빠진 게 있는데

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoApiServices.js




import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

                            //4: () 여기에 username을 파라미터로 넣어줘야 하지, 그럼 retrieveAllTodosForUsername(username)이라고 하고, 너는 이걸 사용하려고 한다
export const retrieveAllTodosForUsername (username)
        = (username) => apiClient.get(`/users/${username}/todos`)
        // http://localhost:8080/users/in28minutes/todos
----------------------------------------------------------------------------------------------------------------------
                                  |
                                  V
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useState } from "react"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]


    //5: 그럼 이걸 호출하고, username을 받아서 이걸 호출하려고 한다, 지금은 우선 in28minutes라고 하드코딩을 해보자
    //그럼 사용자 이름 in28minutes의 모든 Todo를 받게 되겠지, 우린 그걸 받아서 상태로 설정하려고 한다
    retrieveAllTodosForUsername('in28minutes')

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그럼 우리가 이 username에 대해 retrieveAllTodosForUsername을 호출하면 성공적으로 응답을 받을 수도 있고 호출에 실패할 수도 있다
먼저 그걸 해보자

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useState } from "react"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]

    //6: 그럼 .then()이라고 하고 응답을 로깅할 거고, 그럼 (response => console.log(response))라고 해준다
    //그럼 응답이 성공적이면 우리는 응답을 로깅하고 
    retrieveAllTodosForUsername('in28minutes')
    .then(response => console.log(response))

    //6-1: 그렇지 않은 경우에도 catch()라고 해주고, (error => console.log(error))라고 해준다 
    .catch(error => console.log(error))

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

이제 이 호출을 어디에서 할 것인지가 문제지
그럼 먼저 그걸 하는 함수를 하나 만들곘다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useState } from "react"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]

    //7: 그럼 너는 function이라고 하고 이름을 refreshTodos()라고 해주자, 그리고 이걸들을 이 refreshTodos() 함수 안에서 해보겠다
    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => console.log(response))
        .catch(error => console.log(error))
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그럼 약간 형식화를 해줄까? 이게 username에 대한 모든 Todo를 받을거고 
이제는 언제 이 refreshTodos를 호출할지가 문제이다
리액트에서는 그걸 useEffect()에서 호출하는 게 정석이다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



//8-1: import { useEffect, useState } from "react"가 보일것이다, 이제 너는 실제로 useEffect 훅을 정의할 수 있지 //8-2: 다시 useEffect로..
import { useEffect, useState } from "react"


function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]


    //8: 그럼 너가 useEffect라고 입력하면 리액트에 정의된 훅이 보일 거고 임포트하면 //8-1: 임포트로..
    //8-2: 우린 refreshTodos라는 함수를 호출하려 하고
    useEffect(
        //8-3: 그리고 그걸 넣고 이걸 저장할 수 있다
        () => refreshTodos()
    )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => console.log(response))
        .catch(error => console.log(error))
    }    

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

이제 Todos로 가보면 시작할 때 
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	            is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾


--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
▶ {data: Array(3), status: 200, statusText: '', headers: Axi       ListTodosComponent.jsx:23 
  osHeaders, config: {…}, …}
  config: {transitional: {…}, adapter: Array(3), transform
  Request: Array(1), transformResponse: Array(1), timeout: 0, …}
  data: 0: {id: 1, username: 'in28minutes', description: 'Get AWS Certified', targetDate: '2034-07-28', done: false}
        1: {id: 2, username: 'in28minutes', description: 'Learn DevOps', targetDate: '2035-07-28', done: false}
        2: {id: 3, username: 'in28minutes', description: 'Learn Full Stack Development', targetDate: '2036-07-28', done: false}
        length: 3
  headers: AxiosHeaders {content-type: 'application/json'}
  request: XMLHttpRequest {onreadystatechange: null, readyState:
  4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
  status: 200
  statusText: ""
  [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ {data: Array(3), status: 200, statusText: '', headers: Axi       ListTodosComponent.jsx:23 
  osHeaders, config: {…}, …}
  config: {transitional: {…}, adapter: Array(3), transform
  Request: Array(1), transformResponse: Array(1), timeout: 0, …}
  data: (3) [{…}, {…}, {…}]
  headers: AxiosHeaders {content-type: 'application/json'}
  request: XMLHttpRequest {onreadystatechange: null, readyState:
  4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
  status: 200
  statusText: ""
  [[Prototype]]: Object
--------------------------------------------------------------------------------------------

약간의 데이터가 콘솔에 프린트되는 게 보일 거고 
data로 가면 모든 Todo가 들어오는 게 보일 것이다
좋다 

이렇게 이제 우리는 
-----------------------------
    useEffect(
        () => refreshTodos()
    )
-----------------------------
useEffect를 사용하고 refreshTodos를 호출할 수 있지

이렇게 일반적으로 데이터를 로딩하려 할 때는 컴포넌트, 컴포넌트의 최조 버전이 준비되자마자 
비어 있는 Todo가 렌더링 되고 그러면 너는 Todo 리스트를 받고 그걸 화면에 표시하려고 한다

니가 데이터를 새로고침하면 그걸 화면에 표시하게 되지
데이터가 새로고침되어도 우리의 작업은 끝나지 않는다 
우린 그걸 사용하고 화면에 표시하길 원하지
화면에 표시하려면 어떻게 해야 할까?
그럼 여기에 로직을 더 추가해보자

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]

    useEffect(
        () => refreshTodos()
    )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {

              //9: 그럼 여기에 로직을 더 추가해보자 response를 되돌려 받으면 우린 console.log(response)보다 약간 더 하려고 한다
              //console.log(response)에 추가해서 우리는 데이터를 다시 설정하려고 하지, 우린 데이터를 상태에 설정하려고 한다
              console.log(response)
          }
        )
        
        .catch(error => console.log(error))
    }    

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent

----------------------------------------------------------------------------------------------------------------------

그럼 콘솔에
-----------------------------------------------------------
▶ {data: Array(3), status: 200, statusText: '', headers: Axi       ListTodosComponent.jsx:23 
  osHeaders, config: {…}, …}
  config: {transitional: {…}, adapter: Array(3), transform
  Request: Array(1), transformResponse: Array(1), timeout: 0, …}
  data: 0: {id: 1, username: 'in28minutes', description: 'Get AWS Certified', targetDate: '2034-07-28', done: false}
        1: {id: 2, username: 'in28minutes', description: 'Learn DevOps', targetDate: '2035-07-28', done: false}
        2: {id: 3, username: 'in28minutes', description: 'Learn Full Stack Development', targetDate: '2036-07-28', done: false}
        length: 3
  headers: AxiosHeaders {content-type: 'application/json'}
  request: XMLHttpRequest {onreadystatechange: null, readyState:
  4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
  status: 200
  statusText: ""
  [[Prototype]]: Object
-----------------------------------------------------------
이걸 보면 response에는 data라는 게 포함되어 있고
그리고 data는 Todo로 구성된 배열이지


그럼 너는 

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]

    useEffect(
        () => refreshTodos()
    )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {
            //10-1: console.log(response.data)라고 하고 이걸 저장한다
            console.log(response.data)

            //10: setTodos()라고 하고, 너는 response.data라는 값을 사용할 것이다
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        <td>{todo.targetDate.toDateString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent

----------------------------------------------------------------------------------------------------------------------

페이지를 새로고침하고

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>



Uncaught runtime errors:

ERROR
todo.targetDate.toDateString is not a function
TypeError: todo.targetDate.toDateString is not a function
    at http://localhost:3000/static/js/bundle.js:477:41
    at Array.map (<anonymous>)
    at ListTodosComponent (http://localhost:3000/static/js/bundle.js:457:27)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:25574:22)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:29141:24)
    at beginWork (http://localhost:3000/static/js/bundle.js:30860:20)
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:15830:18)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/bundle.js:15874:20)
    at invokeGuardedCallback (http://localhost:3000/static/js/bundle.js:15931:35)
    at beginWork$1 (http://localhost:3000/static/js/bundle.js:35829:11)
ERROR
todo.targetDate.toDateString is not a function
TypeError: todo.targetDate.toDateString is not a function
    at http://localhost:3000/static/js/bundle.js:477:41
    at Array.map (<anonymous>)
    at ListTodosComponent (http://localhost:3000/static/js/bundle.js:457:27)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:25574:22)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:29141:24)
    at beginWork (http://localhost:3000/static/js/bundle.js:30860:20)
    at HTMLUnknownElement.callCallback (http://localhost:3000/static/js/bundle.js:15830:18)
    at Object.invokeGuardedCallbackDev (http://localhost:3000/static/js/bundle.js:15874:20)
    at invokeGuardedCallback (http://localhost:3000/static/js/bundle.js:15931:35)
    at beginWork$1 (http://localhost:3000/static/js/bundle.js:35829:11)
ERROR
todo.targetDate.toDateString is not a function
TypeError: todo.targetDate.toDateString is not a function
    at http://localhost:3000/static/js/bundle.js:477:41
    at Array.map (<anonymous>)
    at ListTodosComponent (http://localhost:3000/static/js/bundle.js:457:27)
    at renderWithHooks (http://localhost:3000/static/js/bundle.js:25574:22)
    at updateFunctionComponent (http://localhost:3000/static/js/bundle.js:29141:24)
    at beginWork (http://localhost:3000/static/js/bundle.js:30860:20)
    at beginWork$1 (http://localhost:3000/static/js/bundle.js:35807:18)
    at performUnitOfWork (http://localhost:3000/static/js/bundle.js:35077:16)
    at workLoopSync (http://localhost:3000/static/js/bundle.js:35000:9)
    at renderRootSync (http://localhost:3000/static/js/bundle.js:34973:11)
--------------------------------------------------------------------------------------------

그러면 오류가 나는 게 보인다
오류 내용을 보면 TypeError: todo.targetDate.toDateString is not a function
todo.targetDate.toDateString 이 문자열이 아니라고 나와 있지 

그 이유는 콘솔로 가서 보면, 들어오고 있는 response가
--------------------------------------------
▶ (3) [{…}, {…}, {…}]
0: {id: 1, username: 'in28minutes', description: 'Get AWS Certified', targetDate: '2034-07-28', done: false}
1: {id: 2, username: 'in28minutes', description: 'Learn DevOps', targetDate: '2035-07-28', done: false}
2: {id: 3, username: 'in28minutes', description: 'Learn Full Stack Development', targetDate: '2036-07-28', done: false}
length: 3
[[Prototype]]: Array(0)
--------------------------------------------
여기 프린트되는 데이터를 보면
targetDate는 문자열로서 들어오고 있기 때문이다 ( targetDate: '2034-07-28' )
그리고 앞에서 우린 ListTodosComponent에서
--------------------------------------------
⏺ ListTodosComponent.jsx
..
 todos.map(
    todo => (
             <tr key={todo.id}>
               <td>{todo.id}</td>
               <td>{todo.description}</td>
               <td>{todo.done.toString()}</td>
               <td>{todo.targetDate.toDateString()}</td>
             </tr>
            )
         )
..
--------------------------------------------
toDateString()을 사용했지, 그럼 이걸 이제

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



...
    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>

                                      //11: 사용하지 않겠다, 그럼 이걸 코멘트로 빼주고, 
                                       {/* <td>{todo.targetDate.toDateString()}</td>*/} (<=이건 주석처리)

                                      //11-1: toString을 써준다, 우리는 response에서 날짜를 받지 않고 문자열을 받고 있다
                                      //그래서 이걸 todo.targetDate.toString()으로 했지
                                        <td>{todo.targetDate.toString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
----------------------------------------------------------------------------------------------------------------------

그럼 이제 가서 로그인을 하고 Todos로 가보자

                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                      Login   Logout
     _____________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	                   is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  1	    Get AWS Certified	             false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  2	    Learn DevOps		               false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  3	    Learn Full Stack Development	 false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
▶ {data: Array(3), status: 200, statusText: '', headers: Axi       ListTodosComponent.jsx:23 
  osHeaders, config: {…}, …}
  config: {transitional: {…}, adapter: Array(3), transform
  Request: Array(1), transformResponse: Array(1), timeout: 0, …}
  data: 0: {id: 1, username: 'in28minutes', description: 'Get AWS Certified', targetDate: '2034-07-28', done: false}
        1: {id: 2, username: 'in28minutes', description: 'Learn DevOps', targetDate: '2035-07-28', done: false}
        2: {id: 3, username: 'in28minutes', description: 'Learn Full Stack Development', targetDate: '2036-07-28', done: false}
        length: 3
  headers: AxiosHeaders {content-type: 'application/json'}
  request: XMLHttpRequest {onreadystatechange: null, readyState:
  4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
  status: 200
  statusText: ""
  [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ {data: Array(3), status: 200, statusText: '', headers: Axi       ListTodosComponent.jsx:23 
  osHeaders, config: {…}, …}
  config: {transitional: {…}, adapter: Array(3), transform
  Request: Array(1), transformResponse: Array(1), timeout: 0, …}
  data: (3) [{…}, {…}, {…}]
  headers: AxiosHeaders {content-type: 'application/json'}
  request: XMLHttpRequest {onreadystatechange: null, readyState:
  4, timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
  status: 200
  statusText: ""
  [[Prototype]]: Object
--------------------------------------------------------------------------------------------

좋다
이제 우리가 백엔드로부터 Todo를 받고 있는 걸 볼 수 있지
이렇게 Get AWS Certifie, Learn DevOps, Learn Full Stack Development라고 나온다
이것들이 모두 백엔드에서 되돌아오고 있고 
Home으로 되돌아가서 이걸 정리하고 다시 Todos로 가보면 이 모든 세부정보가 이제 프린트되는 걸 볼 수 있다

여기 보면 이게 여러 차례 트리거되는 걸 
---------------------------------------------
--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ▶ (3) [{...}, {...}, {...}]
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ (3) [{...}, {...}, {...}]
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ (3) [{...}, {...}, {...}]
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ (3) [{...}, {...}, {...}]
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ (3) [{...}, {...}, {...}]
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ (3) [{...}, {...}, {...}]
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      ....... ( 무한 반복 )
-------------------------------------------------------------------------------------------
---------------------------------------------
볼 수 있는데

그럼 너는 언제 렌더링을 해야 하는지 useEffect()에게 알려줘야 한다
그럼 useEffect를 보면 

---------------------------------------------
                      //첫 번째가 EffectCallback이고 두 번째가 DependencyList이다, 이게 의존하는 것들을 말한다
 function useEffect(effect: EffectCallback, deps?: DependencyList): void;
    // NOTE: this does not accept strings, but this will have to be fixed by removing strings from type Ref<T>
    /**
     * `useImperativeHandle` customizes the instance value that is exposed to parent components when using
     * `ref`. As always, imperative code using refs should be avoided in most cases.
     *
     * `useImperativeHandle` should be used with `React.forwardRef`.
     *
     * @version 16.8.0
     * @see {@link https://react.dev/reference/react/useImperativeHandle}
     */
---------------------------------------------

이 경우에 우리는 
---------------------------------------------
    useEffect(
        () => refreshTodos()
    )
---------------------------------------------
의존성이 전혀 없지
우린 그냥 시작할 때 그걸 로딩하길 원할 뿐이다 

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]

    
    useEffect(
        //12: 여기에 비어 있는 리스트를 넣을 거고, 그럼 이걸 저장하고 새로고침을 해보자
        () => refreshTodos() , []
    )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {
            console.log(response.data)

            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <td>ID</td>
                            <td>Description</td>
                            <td>is Done?</td>
                            <td>Target Date</td>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

Home으로 돌아가서 Todos로 간다
                                            |
                                            V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                      Login   Logout
     _____________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	                   is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  1	    Get AWS Certified	             false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  2	    Learn DevOps		               false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  3	    Learn Full Stack Development	 false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
▶ (3) [{…}, {…}, {…}]                                              ListTodosComponent.jsx:25 
  0  : {id: 1, username: 'in28minutes', description: 'Get AWS Certified', targetDate: '2034-07-28', done: false}
  1: {id: 2, username: 'in28minutes', description: 'Learn DevOps', targetDate: '2035-07-28', done: false}
  2: {id: 3, username: 'in28minutes', description: 'Learn Full Stack Development', targetDate: '2036-07-28', done: false}
  length: 3
  [[Prototype]]: Array(0)
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ (3) [{…}, {…}, {…}]                                              ListTodosComponent.jsx:25 
  0  : {id: 1, username: 'in28minutes', description: 'Get AWS Certified', targetDate: '2034-07-28', done: false}
  1: {id: 2, username: 'in28minutes', description: 'Learn DevOps', targetDate: '2035-07-28', done: false}
  2: {id: 3, username: 'in28minutes', description: 'Learn Full Stack Development', targetDate: '2036-07-28', done: false}
  length: 3
  [[Prototype]]: Array(0)
-------------------------------------------------------------------------------------------

좋다
이제 console.log를 삭제해보자

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    // const todos = [
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]

    useEffect(
        () => refreshTodos() , []
    )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {

            //13: console.log(response.data) 삭제, 그럼 이제 모든 게 설정되었다
           // console.log(response.data) (<= 여기서만 주석처리 실제 코드는 삭제)

            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

..
----------------------------------------------------------------------------------------------------------------------

그리고 더 깔끔하게 보이도록 형식화를 해보겠다
그럼 useEffect는 refreshTodos()를 호출하고 이렇게 해주면 되겠지 => useEffect( () => refreshTodos() , [] )

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    //14: 그리고 여기 주석처리 된 코드를 삭제해보자, 그러면 이제 괜찮아 보인다, 이걸 저장해보자
    // const todos = [ (<= 여기서만 주석처리 실제 코드는 삭제)
    //     {id : 1, description : 'Learn AWS', done : false, targetDate : targetDate},
    //     {id : 2, description : 'Learn Full Stack Dev', done : false, targetDate : targetDate},
    //     {id : 3, description : 'Learn DevOps', done : false, targetDate : targetDate}
    //   ]

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

...

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그리고 TodoApiService도 좋아보인다..

여기 보면 약간 중복이 있는데
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoApiService.js



import axios from 'axios'


const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
);

export const retrieveAllTodosForUsername
        = (username) => apiClient.get(`/users/${username}/todos`)
        
        // http://localhost:8080/users/in28minutes/todos
----------------------------------------------------------------------------------------------------------------------
우린 apiClient를 다시 생성하고 있지 
두 번 생성하고 있는 것이다 하나는 TodoApiService에서, 다른 하나는 HelloWorldApiService에서 생성하고 있다 
그건 잠시 후에 수정해보고 우선 다른 코드는 대부분 상당히 괜찮아 보인다

그럼 다음 단계에서 보겠다
