

이번 단계에선 새로운 기능을 추가하는 데 집중해보자
우린 Todo를 추가하려고 하고, 기존의 Todo 리스트에 우리는 새로운 Todo를 추가할 수 있기를 원한다
우린 이 페이지에 버튼을 넣어서 그걸 새로운 Todo페이지로 리디렉션할 것이다 

그럼 먼저 버튼을 만들고 Todo 페이지로 리디렉션을 해보자

listTodos.jsp로 가고 

------------------------------------------------------------------------------------------------------------


⏺ listTodos.jsp 파일


<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<html>
	<head>
		<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
		<title>
			List Todos Page
		</title>
	</head>
	<body>
			<!-- <div>Welcome to in28minutes</div> -->
			<div class="container">
				<h1>Your Todos</h1>
				<table class="table">
					<thead>
						<tr>
						<th>id</th>
						<th>Description</th>
						<th>Taget Date</th>
						<th>Is Done?</th>
						</tr>			
					</thead>
					<tbody>
					<c:forEach items="${todos}" var="todo">
						<tr>
							<td>${todo.id}</td>
							<td>${todo.description}</td>
							<td>${todo.targetDate}</td>
							<td>${todo.done}</td>
						</tr>
					</c:forEach>
					</tbody>
				</table>

      <!--1: 여기에 Add Todo 버튼을 추가해보겠다 그럼 링크를 추가하고 우리는 어디로 리디렉션을 하려고 하지? "add-todo"로 리디렉션을 한다, 그리고 여기서 태그를 닫는다 그리고 이름을 Add Todo라고 해주자-->
			<!--1-1: 이게 버튼처럼 보이길 원한다 Bootstrap에서 그걸 하는 클래스는 "btn"이고, 사람들이 그걸 클릭하도록 권하려고 한다 그럼 "btn btn-success"라고 할 수 있다-->
				<a href="add-todo" class="btn btn-success">Add Todo</a>      

			</div>
			<script type="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
			<script type="webjars/jquery/3.6.0/jquery.min.js"></script>
	
	</body>
</html>

------------------------------------------------------------------------------------------------------------
                                                        |
                                                        V
----------------------------------------------------------------------

http://localhost:8087/list-todos 페이지 화면 ==>


      Your Todos
      
      id	Description	                Taget Date	Is Done?
      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      1	Learn AWS	                    2025-04-24	false
      ----------------------------------------------------
      2	Learn DevOps	                2026-04-24	false
      ----------------------------------------------------
      3	Learn Full Stack Development	2027-04-24	false
      ----------------------------------------------------

      Add Todo

(자세한건 웹사이트에서 직접 보는걸 추천)

----------------------------------------------------------------------

여기 페이지에 Add Todo가 보인다 
이것보다 더 외관과 느낌이 좋길 원하고, 그럼 넌 class를 추가할 수 있다 //1-1:다시 위로..
                            |
                            V    btn 추가후 모습
-------------------------------------------------------------------------





      Your Todos
      
      id	Description	                Taget Date	Is Done?
      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      1	Learn AWS	                    2025-04-24	false
      ----------------------------------------------------
      2	Learn DevOps	                2026-04-24	false
      ----------------------------------------------------
      3	Learn Full Stack Development	2027-04-24	false
      ----------------------------------------------------
      _________________
     | Add Todo(녹바탕) |
      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------

그럼 이런 모습이 되고, btn-success를 넣지 않으면 
버튼이 리런 모습이 된다 Add Todo(바탕x선x) btn-success를 넣으면 이렇게 근사한 배경이 제공된다

이제 누군가가 Todo를 추가하려면 Add Todo를 클릭학 수 있다, 하지만 우린 아직 기능을 구현하지 않았다 
그럼 지금 Add Todo 기능을 구현해보겠다 

먼저 우리는 jsp 페이지로 리디렉션을 해야 하고 그럼 우리의 TodoController로 가보자
ctrl+shift+t 를 누르면 모든 Java 클래스를 검색할 수 있고 listAllTodos를 복사해서 활용해보겠다

------------------------------------------------------------------------------------------------------------


⏺ TodoController 클래스파일



package com.firstapplication.springboot.myfirstwebapp.todo;

import java.util.*;

import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class TodoController {

	
	private TodoService todoService;
	
	public TodoController(TodoService todoService) {
		super();
		this.todoService = todoService;
	}

  //2: 우리는 showNewTodoPage()라고 해보겠다 구게 우리가 여기서 하는 것이고 @RequestMapping은 "add-todo"이다 그럼 "add-todo"가 되어야 하고 
  //지금은 모델이 필요한지 잘 모르겠는데 우선은 모델을 삭제하겠다 ( public String showNewTodoPage(ModelMap model) Model model 삭제 )
  //그리고 지금 우리는 jsp로 리디렉션을 하려고 한다
	@RequestMapping("add-todo")
	public String showNewTodoPage() {

		//2 계속: 그럼 여기서 return "addTodo"라고 해준다, addTodo에 대한 페이지를 만드는 대신에 범용 페이지를 만들고 이름을 "todo"라고 해주자
    //이제 이게 준비되었고, 우린 jsp를 만들어야 한다 jsp를 하나 복사하려고 한다 listTodos를 복사해서 붙여넣고 이름을 todo.jsp라고 하겠다//3:todo.jsp파일로..
		return "todo";
	}
}

-------------------------------------------------------------


⏺ todo.jsp파일


<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>


<html>
	<head>
		<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
		<title>
      <!--3-2계속:제목을 Add Todo Page라고 한다, 어떻게 되는지 보자 -->
			Add Todo Page
		</title>
	</head>
	<body>
			<!-- <div>Welcome to in28minutes</div> -->
			<div class="container">

    <!--3:todo.jsp를 열고 todo.jsp안에서 넌 Enter Todo Details 라고 할 것이다-->
				<h1>Enter Todo Details</h1>
    <!--3-1: 그리고 여기에 클래스는 필요하지 않지, 그럼 모두 삭제해 보겠다(<table>포함 안에 모두 삭제) 그리고 btn 클래스도 삭제할 수 있다 그럼 여기 기본 템플릿 페이지만 남았고 -->
		<!--3-2: 그리고 title도 변경해보자//<title>로..-->	
			</div>
			<script type="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
			<script type="webjars/jquery/3.6.0/jquery.min.js"></script>
	
	</body>
</html>

------------------------------------------------------------------------------------------------------------
                                                        |
                                                        V
----------------------------------------------------------------------

http://localhost:8087/add-todo 페이지 화면 ==>


      Enter Todo Details



----------------------------------------------------------------------

너가 localhost:8087/add-todo로 가면 제목에 Add Todo Page라고 나와 있는 걸 보게 된다


------------------------------------------------------------------------------------------------------------



⏺ todo.jsp파일


<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>


<html>
	<head>
		<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
		<title>
			Add Todo Page
		</title>
	</head>
	<body>
			<!-- <div>Welcome to in28minutes</div> -->
			<div class="container">

				<h1>Enter Todo Details</h1>
        <!--4:그럼 우리는 여기서 양식을 추가 할 수 있다 우린 Todo를 만들 수 있길 원하고 그럼 양식을 만들 것이다, 사용자가 제공한 세부정보를 잡기 위해서다-->
			  <!--4-1:그럼 너는 <form>을 만들고 method="post"라고 해준다 양식의 일부로서 세부정보를 POST하길 원하기 때문이다 그럼 먼저 Description만 받아보겠다-->
        <form method="post">
            <!--4-2:그리고 <input type="text" name="description"/>이라고 해주자-->
					Description: <input type="text" name="description"/>
					<!--4-3: 그리고 뒤에는 Submit 버튼을 넣는다 class="btn btn-succes">이라고 해주자 그리고 어떻게 되는지 보자-->
          <input type="submit" class="btn btn-success"/>
				</form>
      </div>
			<script type="webjars/bootstrap/5.1.3/js/bootstrap.min.js"></script>
			<script type="webjars/jquery/3.6.0/jquery.min.js"></script>
	
	</body>
</html>

------------------------------------------------------------------------------------------------------------
                                                        |
                                                        V
----------------------------------------------------------------------

http://localhost:8087/add-todo 페이지 화면 ==>


      Enter Todo Details
                    _____________________   ________
      Description: |                     | |  제출  |
                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾

----------------------------------------------------------------------

이제 여기 submit 버튼이 있고 우린 설명을 넣고 제출할 수 있다
우린 설명을 입력하고 Submit을 클릭해서 제출할 수 있고 실제로 그렇게 하면 어떻게 되는지 보자


예를 들어 Learn Google Cloud 라고 하고 제출버튼을 누른다

----------------------------------------------------------------------

http://localhost:8087/add-todo 페이지 화면 ==>


      Enter Todo Details
                    _____________________   ________
      Description: |Learn Google Cloud   | |  제출  |
                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾
                          |버튼 누름
                          V
      Enter Todo Details
                    _____________________   ________
      Description: |                     | |  제출  |
                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾
----------------------------------------------------------------------

같은 페이지로 돌아오고 있다 왜 같은 페이지로 돌아올까? 
코드엔 오류가 없는 걸 볼 수 있는데 (콘솔에도 이상이 없음)
하지만 동일한 페이지로 돌아오고 있다 왜 그럴까?


TodoController로 가보겠다

------------------------------------------------------------------------------------------------------------


⏺ TodoController 클래스파일


package com.firstapplication.springboot.myfirstwebapp.todo;

import java.util.*;

import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class TodoController {

	
	private TodoService todoService;
	
	public TodoController(TodoService todoService) {
		super();
		this.todoService = todoService;
	}

	@RequestMapping("list-todos")
	public String listAllTodos(ModelMap model) {
		List<Todo> todos = todoService.findByUsername("in28minutes");
		model.addAttribute("todos", todos);
		
		return "listTodos";
	}

  //5: 여길 보면 우린 "add-todo" URL을 이것에 매핑했다, 그래서 이게 GET, POST등 모든 종류의 요청을 처리하고 있다 ,모든 요청과 요청 메서드를 이게 처리하게 될 것이다
  //만일 그걸 원치 않고 POST 와 GET에 대해 별도의 처리를 하길 원한다면, 우리는 요청 메서드를 추가해야 한다 그럼 우리는 여기에 요청 메서드를 넣는다 (value="add-todo",method=RequestMethod.Get)이라고 해주자
  //GET 요청을 받는다면 이렇게 하면 된다 그럼 웹페이지로 돌아가자..
  //GET, POST
	@RequestMapping(value="add-todo",method=RequestMethod.GET)
	public String showNewTodoPage() {
		
		return "todo";
	}
}

------------------------------------------------------------------------------------------------------------
                                                        |
                                                        V
----------------------------------------------------------------------

http://localhost:8087/add-todo 페이지 화면 ==>


      Enter Todo Details
                    _____________________   ________
      Description: |Learn Google Cloud   | |  제출  |
                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾

----------------------------------------------------------------------

그리고 제출을 누르면 

Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.

Thu Apr 25 19:28:33 KST 2024
There was an unexpected error (type=Method Not Allowed, status=405).
Method 'POST' is not supported.
org.springframework.web.HttpRequestMethodNotSupportedException: Request method 'POST' is not supported
	at ....

오류가 나고 있다
요청 메서드 POST가 지원되지 않는다고 나온다, 당연하다, 우린 POST 메서드가 없기때문이다
그럼 가서 추가하자

------------------------------------------------------------------------------------------------------------


⏺ TodoController 클래스파일


package com.firstapplication.springboot.myfirstwebapp.todo;

import java.util.*;

import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class TodoController {

	
	private TodoService todoService;
	
	public TodoController(TodoService todoService) {
		super();
		this.todoService = todoService;
	}

	@RequestMapping("list-todos")
	public String listAllTodos(ModelMap model) {
		List<Todo> todos = todoService.findByUsername("in28minutes");
		model.addAttribute("todos", todos);
		
		return "listTodos";
	}

  //GET, POST
	@RequestMapping(value="add-todo",method=RequestMethod.GET)
	public String showNewTodoPage() {
		
		return "todo";
	}

  //6:그럼 우린 여기서 RequestMethod.POST라고 할 수 있고 URL은 "add-todo"라고 그대로 둘 수 있다, 기본값으로서 POST는 동일한 URL에 제출할 것이고 넌 같은 URL을 남겨두겠다
  //그리고 이건 addNewTodo다 showNewTodoPage()가 아니라 이제 addNewTodo()고, Todo가 추가되면 우린 그걸 다시 listTodos페이지로 리디렉션을 하려고 한다
  @RequestMapping(value="add-todo",method=RequestMethod.POST)
	public String showNewTodoPage() {
    //6-1: 여기에 Todo 처리를 추가해야 한다 그럼 이게 어떻게 되는지 한 번 보자 
  
    //6 계속: 그럼 넌 여기에 return "listTodos"라고 해주겠다 // 이렇게 우린 여기서 Todo에 대해 어떤 처리도 하지 않고 있고 우린 그냥 이걸 listTodos 페이지로 리디렉션을 하고 있다
      return "listTodos";
	}
}

------------------------------------------------------------------------------------------------------------
                                                        |
                                                        V
----------------------------------------------------------------------

http://localhost:8087/add-todo 페이지 화면 ==>


      Enter Todo Details
                    _____________________   ________
      Description: |Learn Google Cloud   | |  제출  |
                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾

----------------------------------------------------------------------
                                                       |   
돌아가서 submit을 누른다                                |             
                                                       |              
                                                       V
--------------------------------------------------------------------------------

http://localhost:8087/add-todo 페이지 화면 ==>

      Your Todos
      id Description	                   Taget Date	      Is Done?
      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      __________
     | Add Todo |
      ‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------

그러면 여기 있는 리스트를 볼 수 있다 그리고 다시 Add Todo를 누르고 제출을 누르면 빈 add-todo화면으로 돌아온다
왜 비어 있는 페이지로 돌아오고 있을까? 생각해봐라 무엇이 빠진 걸까?


------------------------------------------------------------------------------------------------------------


⏺ TodoController 클래스파일


package com.firstapplication.springboot.myfirstwebapp.todo;

import java.util.*;

import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class TodoController {

	
	private TodoService todoService;
	
	public TodoController(TodoService todoService) {
		super();
		this.todoService = todoService;
	}

	@RequestMapping("list-todos")
	public String listAllTodos(ModelMap model) {
		List<Todo> todos = todoService.findByUsername("in28minutes");
		model.addAttribute("todos", todos);
		
		return "listTodos";
	}
	
	//GET, POST
	@RequestMapping(value="add-todo",method=RequestMethod.GET)
	public String showNewTodoPage() {
		
		return "todo";
	}
	
	@RequestMapping(value="add-todo",method=RequestMethod.POST)
	public String addNewTodo() {

    //7:우린 여기서 직접 listTodos.jsp로 리디렉션을 하고 있다, 그리고 listTodos.jsp로 리디렉션을 하기 전에 Todo 리스트를 채워줘야 한다
    //이렇게 하는 게 한 가지 방법이다, 역시 Todo를 받아서 그걸 model에 추가할 수 있다 이렇게 하면 많은 로직이 중복된다.
    //그 대신에 우리는 리디렉션을 하려고 한다. 우린 요청을 이 list-todos URL로 리디렉션을 하려고 한다
    
    //그래서 우린 여기에 redirect:를 추가할 것이다, 그리고 저장을 한다 그럼 어떻게 되는지 보자
    return "redirect:listTodos";
	}
}

------------------------------------------------------------------------------------------------------------
                                                        |
                                                        V
----------------------------------------------------------------------

http://localhost:8087/add-todo 페이지 화면 ==>


      Enter Todo Details
                    _____________________   ________
      Description: |Learn Google Cloud   | |  제출  |
                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾

----------------------------------------------------------------------
이 페이지에 돌아가서 submit을 누르면         


Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.

Thu Apr 25 19:59:44 KST 2024
There was an unexpected error (type=Not Found, status=404).
No static resource listTodos.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource listTodos.
	at .............. 

페이지를 찾을 수 없다고 나온다 
왜 페이지를 찾을 수 없을까?


	@RequestMapping(value="add-todo",method=RequestMethod.POST)
	public String addNewTodo() {
		
		return "redirect:listTodos";
	}
그건 니가 여기서 jsp의 이름을 사용하고 있기 때문이다 ( "redirect:listTodos" )
listTodos 이건 사실 URL인 list-todos가 되어야 한다

------------------------------------------------------------------------------------------------------------


⏺ TodoController 클래스파일


package com.firstapplication.springboot.myfirstwebapp.todo;

import java.util.*;

import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class TodoController {

	
	private TodoService todoService;
	
	public TodoController(TodoService todoService) {
		super();
		this.todoService = todoService;
	}

	@RequestMapping("list-todos")
	public String listAllTodos(ModelMap model) {
		List<Todo> todos = todoService.findByUsername("in28minutes");
		model.addAttribute("todos", todos);
		
		return "listTodos";
	}
	
	//GET, POST
	@RequestMapping(value="add-todo",method=RequestMethod.GET)
	public String showNewTodoPage() {
		
		return "todo";
	}
	
	@RequestMapping(value="add-todo",method=RequestMethod.POST)
	public String addNewTodo() {

    //8: 넌 이 ( @RequestMapping("list-todos") public String listAllTodos(ModelMap model) { ) list-todos라는 경로를 사용해야 한다, 그리고 다시 웹사이트를 보겠다
    return "redirect:list-todos";
	}
}

------------------------------------------------------------------------------------------------------------
                                                        |
                                                        V
----------------------------------------------------------------------

http://localhost:8087/add-todo 페이지 화면 ==>


      Enter Todo Details
                    _____________________   ________
      Description: |Learn Google Cloud   | |  제출  |
                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾

----------------------------------------------------------------------
                                                        |
                                                        |
                                                        V
----------------------------------------------------------------------

http://localhost:8087/list-todos 페이지 화면 ==>

      Your Todos

      id Description	                   Taget Date	      Is Done?
      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      1  Learn AWS                       2023-04-25       false
      --------------------------------------------------------------
      2  Learn DebOps                    2024-04-25       false
      --------------------------------------------------------------
      3  Learn Full Stack Development    2024-04-25       false
      --------------------------------------------------------------

      __________
     | Add Todo |
      ‾‾‾‾‾‾‾‾‾‾


----------------------------------------------------------------------
그러면 모든 Todo를 볼 수 있고 Add Todo를 클릭해보자, Todo 값은 지금은 추가되지 않을 것이다
우리가 아직 그 로직을 넣지 않았으니까, 하지만 페이지가 list-todos로 돌아가는지 보자
이렇게 이런 흐름이 작동하고 있고 

그럼 Todo 리스트에서 우린 Add Todo 페이지로 갈 수 있고, 다시 Todo 리스트 페이지로 돌아올 수 있다
하지만 아직 로직의 핵심이 여전히 빠져 있다 
우린 Todo를 내부 리스트에 추가하는 로직을 추가해야 할 것이다 
그걸 어떻게 할까? 그건 다음 단계에서 살펴보자
