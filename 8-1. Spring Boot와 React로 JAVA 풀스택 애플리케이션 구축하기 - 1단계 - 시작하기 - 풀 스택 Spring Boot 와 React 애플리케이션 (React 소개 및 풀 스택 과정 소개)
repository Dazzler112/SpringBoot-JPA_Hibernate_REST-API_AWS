

     
                      
                                                                                FULL STACK
                                                                               ____________ 







풀스택은 오늘날 가장 인기 있는 아키텍처 중 하나이다  
대부분의 기업이 풀 스택 아키텍처를 도입하고 있다
이번 섹션을 시작하면서 일단 풀 스택에 초점을 맞춰보자, 무엇을 배울까?


                                
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  ㅡ   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |      1: Modern       |     |     6: REST API      | ㅡ  |  7:Authentication   |               
 |      JavaScript      |     |                      |     |                     |
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    ||                           ||     
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |      2: React        |     |     5: Routing       |
 |     Fundamentals     |     |                      |
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  
    ||                           ||
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ  ㅡ   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |    3: Components     | ㅡ  |      4: State       |
 |                      |     |                     |
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

1. 일단 현대 JavaScript부터 시작한다     
교육자가 한 2000년정도에 JavaScript를 싫어했다고 한다
복잡하기도 하고 유지 보수가 어려웠다고 한다 
하지만 ECMA 스크립트의 등장으로 JavaScript를 작성하기가 아주 쉬워졌다고 한다
이번 섹션을 시작하면서 현대 JavaScript 코드를 작성하는 법을 배울 것이라고한다

2. 그리고 가장 유명한 JavaScript 라이브러리 중 하나인 리액트를 배운다
리액트로 단일 페이지 애플리케이션을 만드는 법을 배울것이다
리액트의 모든 원리를 이해할 것이다

3. 모듈화된 컴포넌트 집합으로 리액트 애플리케이션을 어떻게 구축할까?

4. 그리고 State를 이해해보겠다
State는 왜 필요하며 리액트 애플리케이션에서 State를 어떻게 관리할까?

5. 한 컴포넌트에서 다른 컴포넌트로 라우팅하는 방법도 살펴보고

6.리액트 애플리케이션에서 백엔드 REST API를 호출하는 방법도 알아볼 것이다

7. 그리고 풀 스택 애플리케이션에서 인증을 구현하는 방법도 학습하겠다

이 여정 동안 우리는 두 가지 예제를 실습해볼 것이다
1. 하나는 카운터 애플리케이션이고
2. 다른 하나는 할 일 관리 애플리케이션이다





What will we build?
                                                                                ______     ______
● Counter Application                                                          (  +1  )   (  -1  )
  ■ Understand React Fundamentals                                               ‾‾‾‾‾‾     ‾‾‾‾‾‾
● A Full-Stack Todo Management Application                                      ______     ______
  ■ Add Todo                                                                   (  +2  )   (  -2  )
  ■ Delete Todo                                                                 ‾‾‾‾‾‾     ‾‾‾‾‾‾
  ■ Update Tod                                                                  ______     ______
  ■ Authentication (Login/Logout)                                              (  +5  )   (  -5  )
  ■ JWT                                                                         ‾‾‾‾‾‾     ‾‾‾‾‾‾
                                                                                        0
                                                                                   ____________   
                                                                                  (   Reset    ) 
                                                                                   ‾‾‾‾‾‾‾‾‾‾‾‾


● Counter Application 
카운터 애플리케이션의 목표는 
  ■ Understand React Fundamentals
리액트의 기초를 이해하는 것이다 
컴포넌트가 무엇인지 이해하고 왜 컴포넌트가 필요한지, 컴포넌트를 어떻게 구축하는지
State가 무엇인지, 속성을 뜻하는 Props는 무엇인지 등이다

● A Full-Stack Todo Management Application 
리액트 기초에 익숙해지면 할 일 관리 애플리케이션을 풀 스택으로 구축한다
이미 우리는 관리용 웹 어플리케이션을 만들어봤지
풀 스택 접근 방식으로 동일한 애플리케이션을 만드는 것이다 
일반적인 할 일 관리 애플리케이션이 갖고 있는 기능은 모두 넣을 것이다, 
 ■ Add Todo 
 ■ Delete Todo 
 ■ Update Tod     
 ■ Authentication (Login/Logout)
 ■ JWT    
추가, 삭제, 수정 그리고 인증이나 허가도 만들 것이다
로그인 로그아웃 기능을 구현하고 JWT나 JSON 웹 토큰을 인증에 사용하겠다






  ________________________________________        ________________________________________
 |                                        |      |                                        |
 |                                        |      |            Added Value for             |
 |              Full Stack                |      |                  you                   |
 |                                        |      |                                        |
 |                                        |      |                                        |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    | |                                             | |
  ________________________________________        ________________________________________
 |                                        |  ㅡ  |                                        |
 |               Default                  |  ㅡ  |                                        |
 |           Architecture Style           |      |            Mandatory Skill             |
 |                                        |      |                                        |
 |                                        |      |                                        |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



교육자는 풀 스택 애플리케이션이 Spring 과 Spring Boot 과정에 포함되는 게 맞는지 오랫동안 고민했다고 한다   
하지만 최근 몇 년간 지켜보니 이미 대부분의 기없에서 풀 스택이 기본적인 아키텍쳐 스타일로 자리잡고 있다고 한다
풀 스택 애플리케이션 구축 방법을 배워 두면 너에게 큰 도움이 될 거라고 생각했다고 한다 
그래서 과정에 이 섹션을 추가했다고 한다
다음 강의에 보겠다
