



                                                                              Spring Boot
                                                                            PRODUCTION-READY






이전 단계에선 애플리케이션을 빠르게 개발할 수 있도록 Spring Boot가 제공하는 기능을 살펴봤는데, 이번 단계부턴
프로덕션 환경에서 사용 가능한 애플리케이션을 쉽게 만들 수 있도록 Spring Boot의 중요한 기능을 몇 가지 알아보겠다



Managing App. Configuration using Profiles
                                                                                                                                       Application                                  
● Applications have different environments: Dev, QA, Stage, Prod, ...                                            Environments         Configuration                                                     
● Different environments need different configuration:                                                                            ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ                                                   
 ■ Different Databases                                                                                                           |  ________________    |                          
 ■ Different Web Services                                                                                            _____       | |      Dev       |   |                                   
● How can you provide different configuration for different environments?                                     ______|_____|ㅡㅡㅡㅡ>| Configuration  |   |                            
 ■ Profiles: Environment specific configuration                                                              |      |_____|      | |________________|   |                                 
● How can you define externalized configuration for your application?                                        |      |_____|      |                      |                       
                                                                                                             |       Dev         |                      |                       
                                                                                                             |        _____      |   ________________   |                                  
                                                                                             ______          |       |_____|     |  |      Test      |  |                                 
                                                                                            |      \  ㅡㅡㅡㅡ|ㅡㅡㅡ>|_____|ㅡㅡㅡㅡ>|  Configuration |  |                                                         
                                                                                            |JAR    |        |       |_____|     |  |________________|  |                                                          
                                                                                             ㅡㅡㅡㅡ         |        Test       |                      |                                 
                                                                                            Source           |       _____       |  ________________    |                                               
                                                                                            Bundle           |      |_____|      | |     Prod       |   |                                            
                                                                                                             |______|_____|ㅡㅡㅡㅡ>| Configuration  |   |                                           
                                                                                                                    |_____|      | |________________|   |                                    
                                                                                                                   Production    |ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ|                                                      
                                                                                                                                                                                   
                                                                                                                                                                        
                                                                                                                                                                        
                                                                                                                                                                        

첫 번째 살펴볼 기능은 프로필을 사용하여 애플리케이션 설정을 관리하는 기능이다
● Applications have different environments: Dev, QA, Stage, Prod, ...   
애플리케이션에 관해 말하자면 애플리케이션에는 다양한 환경이 있다 
개발 환경, QA환경, 스테이지 환경, 프로덕션 환경이 있다 
● Different environments need different configuration: 
동일한 애플리케이션의 다양한 환경에는 다양한 설정이 필요하다, 
동일한 코드에서 다양한 환경의 다양한 설정이 있어야 한다
 ■ Different Databases
 ■ Different Web Services  
다른 데이터베이스와 통신하거나 다른 웹 서비스를 호출할 수도 있다 
● How can you provide different configuration for different environments?   
 ■ Profiles: Environment specific configuration 
개발 환경은 개발 데이터베이스와 통신하고 테스트 환경은 테스트 데이터베이스와 통신하며 
프로덕션 환경은 프로덕션 데이터베이스와 통신한다 이것이 프로필의 개념이다
프로필을 통해 환경별 설정을 제공할 수 있다
● How can you define externalized configuration for your application? 


그럼 내 환경에 맞는 다양한 항목을 설정해 보자
dev 환경이 있을수 있고, qa환경이 있을수 있고 stage환경, prod 환경이 있을 수 있다
다양한 환경에 맞는 설정을 관리해야 할 때마다 이러한 각 환경을 위한 별도의 프로필을 만들면 된다
dev용 프로필, qa용 프로필, stage용 프로필, prod용 프로필을 만들 수 있는 것이다
그리고 이러한 각 환경을 위한 별도의 설정을 만들 수 있다 어떻게 하냐고? 간단하게 해 보자

--------------
dev
~~~~

prod
--------------
일단 환경이 dev환경과 prod 환경 두 개만 있다고 가정하자
현재 application.properties가 있는데, application.properties 파일은 src/main/resourses 아래에 있다

-----------------------------------------------------------------

⏺ application.properties


logging.level.org.springframework=debug
-----------------------------------------------------------------

현재 여기에는 logging.level.org.springframework=debug가 있다
이것은 정보를 디버그 수준에서 출력하는 것이다
하지만 내 dev 환경에선 디버그 수준에서가 아니라 trace 수준에서 정보를 출력하려고 한다

--------------
dev
~~~~
logging.level.org.springframework=trace

prod
~~~~
--------------

trace는 더 내려오고, 훨씬 더 많은 로그를 출력한다 
이제 prod 환경을 이야기해 보자, prod 프로필에선 info 수준에서 구성하려고 한다 

--------------
dev
~~~~
logging.level.org.springframework=trace

prod
~~~~
logging.level.org.springframework=info
--------------
모든 정보를 로깅하는 게 아니라 중요한 정보만 로깅하려고 한다
그러면 어떻게 해야 할까?

프로필을 사용하면 된다
일단 application.properties로 이동하여 복붙해준다
변경사항을 모두 저장한 다음 이름을 apllication-dev.properties라고 지정한다
-------------------------------------------------------------------------------------------------------------------

⏺ application-dev.properties

#dev에서 사용할 로깅 수준은 뭐지? trace이다 따라서 여기에 로깅 수준을 trace로 입력한다

logging.level.org.springframework=trace

-------------------------------------------------------------------------------------------------------------------

또 이 파일을 복사하여 다시 붙여넣고, application-prod.properties 라는 파일을 만든다

-------------------------------------------------------------------------------------------------------------------


⏺ application-prod.properties

#prod에서 사용할 로깅 수준은 뭐지? info이다

logging.level.org.springframework=info
-------------------------------------------------------------------------------------------------------------------


trace가 적용된 application-dev가 있고 info가 적용된 application-prod가 있다, 그리고 debug가 적용된 application.properties가 있다

현재 이 애플리케이션은 기본적으로 어떤 프로필도 사용하고 있지 않는다 
프로필을 사용하고 있지 않으면 애플리케이션은 application.properties에서 설정된 디폴트 프로퍼티를 사용한다
따라서 debug 로그외 debug 로그 아래 모든 수준이 표시된다 여기에는 info도 포함되어 있다


그러면 여기로 가서 프로덕션 프로필을 설정해 보겠다

-------------------------------------------------------------------------------------------------------------------

⏺ application.properties



logging.level.org.springframework=debug

#spring.profiles.active=prod라고 입력하면 된다
#특정 프로필을 설정하려면 application.properties에 있는 디폴트 설정의 값과 application-prod의 값을 함께 병합해야 한다
#application-prod에서 어떤 것을 설정하든 해당 특정 프로필의 우선순위가 더 높다 //1-1application-prod로..
spring.profiles.active=prod

#//1-2: 프로필의 값은 application-prod.properties의 우선순위가 더 높다 따라서 우선순위가 높은 info 로그만 현재 출력된다
#여기서 출력한 마지막 몇 가지를 살펴보면 info만 출력되어 있다
/*SpringBoot 실행시:
  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

[32m :: Spring Boot :: [39m           [2m (v3.3.0-M3)[0;39m

[2m2024-03-29T23:40:27.892+09:00[0;39m [32m INFO[0;39m [35m18276[0;39m [2m---[0;39m [2m[learn-spring-boot] [  restartedMain][0;39m [2m[0;39m[36mc.s.s.l.LearnSpringBootApplication      [0;39m [2m:[0;39m Starting... 
*/



-----------------------------------------------------------------

⏺ application-prod.properties

#여기에는 logging.level.org.springframework=info가 입력되어 있고, 동일한 로깅 수준이 application.properties에선 debug이다 //1-2: 다시 application.properties로..

logging.level.org.springframework=info
-------------------------------------------------------------------------------------------------------------------
        |
        V
-------------------------------------------------------------------------------------------------------------------

⏺ application.properties

#자, 이제 개발 환경이라고 해 보자 이것을 개발 환경에 배포한다고 가정하면 활성 프로필을 dev로 설정하면 된다

logging.level.org.springframework=debug
spring.profiles.active=dev

/*
2024-03-30T00:06:08.327+09:00[0;39m [32mTRACE[0;39m [35m18276[0;39m [2m---[0;39m [2m[learn-spring-boot] [  restartedMain][0;39m [2m[0;39m[36mo.s.c.e.EventListenerMethodProcessor    [0;39m [2m:[0;39m No @EventListener annotations found on bean class: org.apache.catalina.core.ApplicationContextFacade
[2m2024-03-30T00:06:08.327+09:00[0;39m [32mDEBUG[0;39m [35m18276[0;39m [2m---[0;39m [2m[learn-spring-boot] [  restartedMain][0;39m [2m[0;39m[36mo.s.j.e.a.AnnotationMBeanExporter       [0;39m [2m:[0;39m Registering beans for JMX exposure on startup
실행하면 trace 정보가 여기에 많이 출력되어 있는 것을 확인할 수 있다
따라서 trace,debug,info가 출력되고 있다
*/
-------------------------------------------------------------------------------------------------------------------




--------------
dev
~~~~
logging.level.org.springframework=trace

prod
~~~~
logging.level.org.springframework=info




trace
debug
info
warning
error
off
--------------
일반적으로 로깅 프레임워크를 살펴보면 지원되는 여러 로깅 수준이 있다 trace, debug, info, warning, error, off가 그것이다
off는 실제로 전체 로깅을 끈다, error를 사용하면 오류와 예외만 출력된다,warning은 한 단계 위에 있으며 조금 더 많은 정보를 출력하고
info는 info수준에서 로깅된 모든 정보를 출력한다 debug는 훨씬 더 많은 정보를 출력하고, trace는 로그에있는 모든 정보를 출력한다
이러한 다양한 로깅 수준을 대부분의 로깅 프레임워크에서 일반적으로 사용한다 
한 가지 알아야 할 점은 trace를 사용 설정하면, 로깅 수준을 trace로 설정하면, logging.level.org.springframework=trace 여기에 설정한 것처럼
이러한 시나리오에서는 모든 정보가 출력된다
따라서 trace로 설정하면 trace, debug, info, warning, error, off 
trace로 설정하면 trace 아래 수준인 debug, info, warning, error가 출력된다

로깅 수준을 debug로 설정하면 debug, info, warning, error가 출력된다
info로 설정하면 info, warning, error가 출력되고 
warning은 warning과 error가 출력되고
error는 error정보만 출력된다

따라서 대략적으로 이런 사실을 알고 있으면 로깅을 자세히 살펴볼 때 매우 유용하다









이 단계에선 애프리케이션에는 여러 환경이 있으며 여러 환경에는 다양한 설정이 필요할 수 있음을 알아봤다
예를 들어 환경이 다르면 로깅 수준도 달라야 할 수 있다 
그리고 바로 이 지점에서 프로필을 사용할 수 있다
다른 환경을 위해 여러 프로필을 만들 수 있다, application-dev, application-prod, application-qa등으로 이름을 지정해서 가능했다
그리고 활성 프로필을 사용하여 활성 상태로 유지하려는 프로필을 설정할 수 있다 spring.profiles.active=dev

이 단계에서 살펴본 예는 쉬운 예였는데 다양한 로깅 수준을 다뤄봤다
다음 단계에선 훨씬 복잡한 예를 살펴보도록 하자
