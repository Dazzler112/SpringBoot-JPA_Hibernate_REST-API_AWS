

지난 단계에서 REST API에 Spring Security 사용을 설정했고,
REST API가 성공적으로 인증되는 걸 확인할 수 있었다 
하지만 POST 요청을 하면, 예를 들어 localhost:8080/users로 POST 요청을 할 경우 인증헤더를 설정했지

-----------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | POST    | ▼  |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS

  HEADERS   ⬇                   | Form ▼ |        ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾           |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________   ___________________________     |   
☑ | Authorization|:|Basic dXNlcm5hbWU6cG..| 🧪 | 🗝 |    { 
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |      "name": "New User",
   ______________   ___________________________     |      "birthDate": "1997-08-11"
☑ |Content-Type  |:|application/json           |    |     }
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |
  ______________                                    |                                  
 ( + Add header )   🗝 Add authorization     🗑      |                                                       
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                    | 
                                                    |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                    |  
                                                    V
(🗝 를 클릭하면 따로 인증 화면이 나옴)


                  ___________________________________________________________________________
                 |  Authorization                                                            |
                 | _________________________________________________________________________ |
                 |                         _______________                                   |                      
                 |                   Type | Authorization |                                  |
                 |                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                   |
                 |                         ______________________________                    |                                          
                 |               Username | username                     |                   |             
                 |                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                    |                                 
                 |                         ______________________________                    |                                    
                 |               Password | ********                     |                   | 
                 |                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                    |                                           
                 |                         ▢ show password                                   |                                
                 |                                                                           |             
                 |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|                                                                                  
                 |                                                 ___________    ________   |                                
                 |                                                | X Cancel  |  | ✔ Set  |  |                              
                 |                                                 ‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾   |                                 
                  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

-----------------------------------------------------------------------------------------------------------------

편집을 누르면 사용자 이름과 비밀번호가 정확히 설정되어 있고, 
콘텐츠 타입으로 application/json을 보내고 본문도 제대로 되어있다
이름은 "New User"로, 생년월일은 이렇게 되어 있지
전송을 누르면   
                                                    |
                                                    V
-----------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  401                (빨간색 바탕)
___________________________________________________________________________________________________

  HEADERS                       | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                |
Vary:	Origin                                    |    {                                
Vary:	Access-Control-Request-Method             |     timestamp:"2024-06-13",                                    
Vary:	Access-Control-Request-Headers            |     status: 403,                                     
X-Content-Type-Options:	nosniff                 |     error: "Forbidden",                                
X-XSS-Protection:	0                             |     message: "Forbidden",                                    
Cache-Control:no-cache, no-store, max-age=0,    |     path: "/users"
              must-revalidate                   |    }
Pragma:	no-cache                                |                                            
Expires:	0                                     |                                   
X-Frame-Options:	DENY                          |                                          
WWW-Authenticate:	Basic realm="Realm"           |                                                       
Content-Length:	0 byte                          |                                              
Date:	Thu, 13 Jun 2024 08:25:31 GMT             |                                                     
Keep-Alive:	timeout=60                          |                                                        
Connection:	keep-alive                          |                                                                                
                                                |                                                    
▶ COMPLETE REQUEST HEADERS        
                                                     lines nums 📄 copy            length: 116 bytes


-----------------------------------------------------------------------------------------------------------------
403 응답이 돌아온다
금지되었다는 뜻인데 어떻게 바로 잡을까?
바로 이번 단계에서 살펴보게 될 내용이다


문제 해결 방법을 알아보기 전에  Spring Security의 원리를 고차원으로 살펴보겠다

🔵 Spring Security 원리

●Spring Security

● Filter Chains
  ■ 1) All requests should be authenticated
  ■ 2) If a request is not authenticated, a web page is shown
  ■ 3) CSRF -> POST , PUT


● Configuration

● Bean FilterChain

요청을 보낼 때마다 Spring Security가 해당 요청을 가로 챈다
예를 들어 니가 localhost:8080/users로 요청을 보내면 Spring Serurity가 이 요청을 가로채서 일련의 필터를 실행한다
Filter Chains
이런 일련의 필터를 필터 체인이라고 하는데
필터 체인에서 확인이 여러 차례 이루어진다
  ■ 1) All requests should be authenticated
1번은 모든 요청이 인증되어야 한다는 건데,
모든 요청에 자격 증명이 첨부되어야 겠지 그게 첫 번째 확인 절차고 
  ■ 2) If a request is not authenticated, a web page is shown
요청이 인증되지 않았다면, 자격 증명이 없거나 인증되지 않았다면 기본값으로 웹 페이지가 나타난다
실제 모습을 확인해보자, 브라우저를 모두 닫고 크롬을 다시 시작해 보겠다 
localhost users로 가보면 

-----------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/login 페이지 화면 ==>


                                              Please sign in
                                               __________________________
                                              |Username                  |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
                                               __________________________
                                              |Password                  |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                               __________________________
                                              |         Sign in          |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-----------------------------------------------------------------------------------------------------------------
이 웹 페이지가 나오지.

  ■ 3) CSRF -> POST , PUT
3번은 필터 체인에서 수행되는 것 중 하나가 CSRF라고 하는 걸 확인할 수 있게 설정하는 건데 
이렇게 하면 POST 와 PUT 요청에 영향을 주게 된다

그 외에도 필터 체인에서 수행되는 것들이 아주 많다 


이제 필터 체인을 커스터마이징해볼 텐데
기존 필터 체인에서 수정해야 할 게 두가지 있다

🔵 필터 체인 커스터마이징 수정 할 두 가지

1.
하나는
-----------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/login 페이지 화면 ==>


                                              Please sign in
                                               __________________________
                                              |Username                  |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
                                               __________________________
                                              |Password                  |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                               __________________________
                                              |         Sign in          |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-----------------------------------------------------------------------------------------------------------------
여기에서 나타나는 웹 페이지가 있다는 사실인데 
로그인 페이지가 나오면 웹 애플리케이션에 정말 좋지 
하지만 REST API의 경우에는 HTTP 기본 인증이라는 걸 사용하려고 하니까 사용자 자격 증명을 묻는 팝업창이 떠야 한다

이게 필터 체인에서 변경하려는 한 가지 사항이고
HTTP 인증을 사용할 때는 localhost users를 입력하게 되면 

2.
두 번째는 
CSRF를 해체해서 POST 요청을 보낼 수 있게 하는 것이다, Spring Security에서 기존 필터 체인을 오버라이드 하려면
체인 전체를 다시 정의해야 한다

● Configuration
그럼 이제 Spring 설정 파일을 생성하고 
● Bean FilterChain
여기에 필터 체인을 정의할 Bean을 생성하고, 
  ■ 1) All requests should be authenticated
  ■ 2) If a request is not authenticated, a web page is shown
  ■ 3) CSRF -> POST , PUT
필터 체인을 구성하는 모든 단계를 정의할 것이다


🔵 시작

src/main/java로 들어가서 rest.webservices를 선택하고 ctrl+N을 눌러서 새 클래스를 생성한다
.security 패키지에 생성할 것이다, 이름은 SpringSecurityConfiguration 이라고 하겠다

곧바로 생성될 Spring Bean이 이 클래스에 들어가게 된다 

-----------------------------------------------------------------------------------------------------------------


⏺ SpringSecurityConfiguration 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.security;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.web.*;

//1: Spring Configuration이니까 @Configuration 을입력하고 import문을 정리하면 org.springframework.context.annotation.Configuration이 뜨지
//@Configuration은 하나 이상의 @Bean 메서드를 선언한다는 뜻이다
@Configuration
public class SpringSecurityConfiguration {

  //1-1: 여기 정의하려는 Bean은 @Bean이라고 입력해보자
  //여기에서 정의하려는 Bean은 필터 체인인데 Spring Security에선 SecurityFilterChain이겠지 SecurityFilterChain을 반환하는 public 메서드를 생성할 것이다 이걸 filterChain이라고 하겠다 여기에 입력값은 HttpSecurity로 넣어준다 파라미터 명은 http로 하고 메서드를 닫는다
  public SecurityFilterChain filterChain(HttpSecurity http) {

    //1-2: 여기에는 return http.build를 입력하고 세미콜론을 붙여준다 
    return http.build();
	}
}

-----------------------------------------------------------------------------------------------------------------

import문을 정리하면 org.springframework.context.annotation.Bean을 가져오게 된다 이건 @Bean이고 
SecurityFilterChain도 가져오기 되는데, org.springframework.security.web.SecurityFilterChain이 보이지
이걸 사용해서 HttpServletRequest에 대응하는 필터 체인을 정의한다는 걸 알 수 있다( Defines a filter chain which is capable of being matched against an HttpServletRequest. in order to decide whether it applies to that request. )
HttpSecurity도 가져오기했는데 컴파일 오류가 나타난다, 

-----------------------------------------------------------------------------------------------------------------


⏺ SpringSecurityConfiguration 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.security;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.web.*;

@Configuration
                                        //2-1:이 구문으로 예외를 던지게 된다, 이제 저장하고
public class SpringSecurityConfiguration throws Exception {

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) {

    //2: 처리되지 않은 예외라고 되어있다 ( Unhandled exception type Exception ) Ctrl+1을 눌러 throws 선언 추가를 선택한다 
		return http.build();
	}
}

-----------------------------------------------------------------------------------------------------------------

브라우저로 가서 localhost:8080/users를 시도해볼까?

-----------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users 사이트화면 ==>


[
  {
    "id": 1,
    "name": "Adam",
    "birthDate": "1994-06-13"
  },
  {
    "id": 2,
    "name": "Eve",
    "birthDate": "1999-06-13"
  },
  {
    "id": 3,
    "name": "Jim",
    "birthDate": "2004-06-13"
  }
]

-----------------------------------------------------------------------------------------------------------------

이렇게 응답을 받고 있네


이제 
---------------------------------------------------
@Configuration
public class SpringSecurityConfiguration {

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {


		return http.build();
	}
---------------------------------------------------
여기서 Spring Security에 정의되어 있는 기본값 필터 체인을 오버라이드할 텐데, 
지금 여기서는 아무 작업도 수행하지 않기 떄문에 인증이 없다
이 http://localhost:8080/users 브라우저를 완전히 닫고 돌아와도 인증되는 요청이 전혀 없을 것이다
지금 바로 할 일이 그것이다, 필터 체인에 단계를 추가해야겠지
  ■ 1) All requests should be authenticated
  ■ 2) If a request is not authenticated, a web page is shown
  ■ 3) CSRF -> POST , PUT
SpringSecurityConfiguration으로 들어가보겠다


-----------------------------------------------------------------------------------------------------------------


⏺ SpringSecurityConfiguration 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.security;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.web.*;

@Configuration
public class SpringSecurityConfiguration {

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

  //3: 주석처리하고 여기 상단에 위 단계 설명을 넣겠다 (하면서 참조할 수 있게), 하나씩 구현해보자, 제일 먼저 할 일은 모든 요청이 인증되도록 하는 것이다,
//		1) All requests should be authenticated

      //3-1: http.authorizeHttpRequests()를 입력한다, 여기에 로직을 정의해야겠지
      http.authorizeHttpRequests(
                //3-2: 변수명을 auth로 하고 람다 표현식을 정의한다 auth.anyRequest라고 입력하면 들어오는 요청은 전부 인증을 받게 되겠지 이게 1단계고
                //이렇게 모든 요청을 인증하게 된다
                auth -> auth.anyRequest().authenticated()
                );
                //3-2 계속: 그러니까 1단계로 모든 요청이 인증을 받아야 한다 저장하고 새로고침 해보자
//	  2) If a request is not authenticated, a web page is shown
//	  3) CSRF -> POST , PUT

		return http.build();
	}
}


-----------------------------------------------------------------------------------------------------------------
                                                          |
                                                          V
-----------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users 사이트화면 ==>


📄
localhost에 대한 액세스가 거부됨이 페이지를 볼 수 있는 권한이 없습니다.
HTTP ERROR 403
 _______
(새로고침)
 ‾‾‾‾‾‾‾
-----------------------------------------------------------------------------------------------------------------

로컬호스트 액세스가 거부되었다
잘된 것이다
403 응답을 받고 있다, 이 페이지를 볼 수 있는 권한이 없다

전에 봤었지, 기본값으로 요청이 인증을 받지 못하면 웹 페이지가 나타난다 
하지만 REST API의 경우 기본 인증을 사용 설정할 수 있는데, 그 방법은 

-----------------------------------------------------------------------------------------------------------------


⏺ SpringSecurityConfiguration 클래스파일




package com.in28minutes.rest.webservices.restfulwebservices.security;

//4-1: 이건 정적메서드이다 import static을 입력해서 withDefaults를 가져온다(붙여넣기), static import를 입력하면 클래스명을 써주지 않아도 곧바로 여기서 사용할 수 있다//4-2: 다시 filterChain() 메소드로... 
import static org.springframework.security.config.Customizer.withDefaults;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.web.*;

@Configuration
public class SpringSecurityConfiguration {

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		
//		1) All requests should be authenticated
		http.authorizeHttpRequests(
				auth -> auth.anyRequest().authenticated()
				);

//	  	2) If a request is not authenticated, a web page is shown
        //4: http.httpBasic을 입력하는 것이다, httpBasic 기본 설정을 활용해야겠지 ()안에 withDefaults라고 입력해서 여기에 메서드를 넣고
        // 이제 이 withDefaults 메서드는 어디에서 정의되지? Customizer 클래스를 검색하면 org.springframework.security.config안에 Customizer라는 클래스가 나온다 ❗ 여러가지 Customizer가 나오는데, 그중에서 잘 보고 org.springframework.security.config 안에 있는 클래스로 골라야 한다 ❗ 이걸 선택하고
        /*📄 public interface Customizer<T> 설명 ==>
          설정된 기본값이 이 안에 있으니까 여기 설정되는 기본값을 활용해야 겠지?
          ctrl + f 로 찾아서
          	static <T> Customizer<T> withDefaults() { <= 우클릭해서 정규화된 이름을 복사하고(Copy Qualified Name 클릭)
        */ //4-1: import 들 위에 작성..
        //4-2: 이렇게 httpBasic을 withDefaults로 설정하고, 이제 이걸 저장하고 .... 
        http.httpBasic(withDefaults());

//	  	3) CSRF -> POST , PUT
		
		return http.build();
	}
}

-----------------------------------------------------------------------------------------------------------------
새로고침 하면?                                        |
                                                     V
-----------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users 사이트화면 ==>

                          ____________________________________________________
                         |   Sign in                                          |
                         |   http://localhost:8080                            |
                         |                ________________________________    |
                         |   사용자 이름  |                                |   |
                         |                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    |
                         |                ________________________________    |
                         |   비밀번호     |                                |   |
                         |                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    |
                         |                        _________      _________    |
                         |                       (  로그인  )    (  취 소  )   |
                         |                        ‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾    |
                          ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾



                                 (바로 주소창 아래에 로그인 화면이 나옴)



-----------------------------------------------------------------------------------------------------------------

사용자 이름과 비밀번호를 묻는 팝업창이 뜨지 
기본 인증은 이렇게 동작한다
웹 페이지를 보여주지는 않지만 팝업창으로 인증을 요청하는 것이다, 



마지막 단계는 CSRF를 해제하는건데

-----------------------------------------------------------------------------------------------------------------


⏺ SpringSecurityConfiguration 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.security;

import static org.springframework.security.config.Customizer.*;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.web.*;

@Configuration
public class SpringSecurityConfiguration {

	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		
//		1) All requests should be authenticated
		http.authorizeHttpRequests(
				auth -> auth.anyRequest().authenticated()
				);

//	  	2) If a request is not authenticated, a web page is shown
		http.httpBasic(withDefaults());

//	  	3) CSRF -> POST , PUT
		//5: http.csrf().disable()을 입력하고 저장한 다음
		 http.csrf().disable();

		return http.build();
	}
}

-----------------------------------------------------------------------------------------------------------------

Talend API Tester로 가보겠다

-----------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | POST    | ▼  |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS

  HEADERS   ⬇                   | Form ▼ |        ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾           |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________   ___________________________     |   
☑ | Authorization|:|Basic dXNlcm5hbWU6cG..| 🧪 | 🗝 |    { 
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |      "name": "New User",
   ______________   ___________________________     |      "birthDate": "1997-08-11"
☑ |Content-Type  |:|application/json           |    |     }
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |
  ______________                                    |                                  
 ( + Add header )   🗝 Add authorization     🗑      |                                                       
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                    | 
                                                    |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

-----------------------------------------------------------------------------------------------------------------

여기에서 POST 요청을 보낼 수 있지
localhost:8080/users로 POST 요청을 한다
본문이 제대로 있고, 인증도 맞고 콘텐츠 타입도 잘되어 있다 전송을 누르면       
                                                    |
                                                    V
-----------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  201                (초록색 바탕)
___________________________________________________________________________________________________

  HEADERS                       | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                |
Vary:	Origin                                    |                  
Vary:	Access-Control-Request-Method             |                               
Vary:	Access-Control-Request-Headers            |                                  
Location:	http://localhost:8080/users4          |                                      
X-Content-Type-Options:	nosniff                 |                                       
X-XSS-Protection:	0                             |                       No Content                       
Cache-Control: no-cache, no-store,              |                            
               max-age=0, must-revalidate       |                                               
Pragma:	no-cache                                |                          
Expires:	0                                     |                 
X-Frame-Options:	DENY                          |                            
Content-Length:	0 byte                          |                              
Date:	Thu, 13 Jun 2024 10:59:33 GMT             |                                     
Keep-Alive:	timeout=60                          |                                      
Connection:	keep-alive                          |                                                                                
                                                |                                                    
▶ COMPLETE REQUEST HEADERS        
                                                     lines nums 📄 copy            


-----------------------------------------------------------------------------------------------------------------

보이지? 201 응답이 돌아왔다, 





지난 몇 단계에 걸쳐서 Spring Security를 활용해봤는데 
다음 강의에 또 보겠다
