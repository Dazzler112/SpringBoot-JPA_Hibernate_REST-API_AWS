

Evolution of Jakarta EE: vs J2EE vs Java EE
                                                                                        J2EE(1.2,1.3,1.4)            Jakarta EE |\              
● Enterprise capabilities were initially built into JDK                                   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ|  \
● With time, they were separated out:                                                         🔵          🟢          🟠           >
 ■ J2EE - Java 2 Platform Enterprise Edition                                              ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ|  /    
 ■ Java EE - Java Platform Enterprise Edition (Rebranding)                                           Java EE(5 to 8)            |/
 ■ Jakarta EE (Oracle gave Java EE rights to the Eclipse Foundation)
  ▢ Important Specifications:
   ◦ Jakarta Server Pages (JSP)
   ◦ Jakarta Standard Tag Library (JSTL)
   ◦ Jakarta Enterprise Beans (EJB)
   ◦ Jakarta RESTful Web Servises (JAX-RS)
   ◦ Jakarta Bean Validation
   ◦ Jakarta Contexts and Dependency Injection (CDI)
   ◦ Jakarta Persistence (JPA)
  ▢ Supported by Spring 6 and Spring Boot 3
   ◦ That's why we use jakarta, packages (instead of javax.)

이번 학습에선 J2EE, Java EE, Jakarta EE의 발전에 대해 전반적으로 알아보자
이를 가리키는 데 다양한 용어가 사용되는데 예전에는 J2EE였고 중간에는 Java EE였으며 현재는 Jakarta EE 라고 불린다 그게 뭘까?
지금부터 역사를 간략하게 살펴보자

● Enterprise capabilities were initially built into JDK 
초기 Java 버전에서 엔터프라이즈 기능 대부분은 JDK, 자바 개발 키트에 Java 언어로 직접 구축되어 있었다
● With time, they were separated out:
하지만 시간이 지나면서 분리됐다
 ■ J2EE - Java 2 Platform Enterprise Edition  
J2EE, 즉 Java2 플랫폼, 엔터프라이즈 에디션에 따라 분리됐다 
서블릿,JSP, EJB등 관련된 모든 표준이 새로운 J2EE(Java 2 플랫폼, 엔터프라이즈 에디션) 에 따라 만들어졌다
JDK(Java Development kit)에서 분리되었다
 ■ Java EE - Java Platform Enterprise Edition (Rebranding) 
이후 J2EE는 Java EE가 되었다 
J2EE를 JavaEE, 즉 Java 플랫폼, 엔터프라이즈 에디션으로 바꾸어 브랜드를 개선한 것이다
 ■ Jakarta EE (Oracle gave Java EE rights to the Eclipse Foundation)
시간이 흐른 뒤에는 Jakarta EE가 되었는데, Java EE의 소유자였던 Oracle에서 Java EE의 권리를 Eclipse Foundation에 넘겼고
Eclipse Foundation에서는 여론 조사를 통해 Java EE를 Jakarta EE로 바꿨다


Jakarta EE의 발전에 대해 이야기하고 있었는데 J2EE로 시작헀고 처음 버전은 1.2와 1.3 1.4였고 이후 Java EE가 되었다
Java EE 버전은 5,6,7,8이었고 현재는 Jakarta EE라 부른다 Jakarta EE에도 버전이 많다

  ▢ Important Specifications:
오늘날 Jakarta EE에는 어떤 것들이 속해 있을까?
   ◦ Jakarta Server Pages (JSP)
첫 번째는 Jakarta Server Pages이다 전에는 Java Server Pages라고 불렀는데 
이제는 Jakarta Server Pages라 부르고 이게 JSP이다 웹 애플리케이션에 뷰를 만드는데 사용된다
   ◦ Jakarta Standard Tag Library (JSTL)
다음은 Jakarta Standard Tag Library이다 
전에는 Java Standard Tag Library나 JSTL이라 불렀는데 지금은 Jakarta Standard Tag Library이다
웹 페이지에 동적 정보를 나타내는데 사용할 수 있는 태그 라이브러리이다
   ◦ Jakarta Enterprise Beans (EJB)
EJB라는 것도 있다 이젠 Jakarta Enterprise Beans라고 부른다
   ◦ Jakarta RESTful Web Servises (JAX-RS)
REST 웹 서비스 구축 방법에 대한 규격도 있는데 JAX-RS,
즉 Jakarta RESTful Web Services 규격이라고 한다 
   ◦ Jakarta Bean Validation
Bean 유효성 검사 규격도 여기에 속해 있고,
   ◦ Jakarta Contexts and Dependency Injection (CDI)
CDI도 있다 Jakarta Contexts and Dependency Injection 규격이다
의존성 주입을 위한 API이다
첫 번째 Spring Framework 버전은 2004년에 도입되었고 Spring Framework가 널리 사용되면서 의존성 주입이란 개념도 잘 알려지게 되었다
이때 CDI가 도입되었다 의존성 주입 방법과 관련된 규격이다
   ◦ Jakarta Persistence (JPA)
JPA(◦ Jakarta Persistence API)도 중요한 규격이다 관계형 데이터베이스와 상호작용하는 방법을 다룬다

  ▢ Supported by Spring 6 and Spring Boot 3
이제 Spring 6와 Spring Boot 3에서 Jakarta를 지원해서 좋다
   ◦ That's why we use jakarta, packages (instead of javax.)
그래서 이 강의에서 자주 보이는 것이다 jakarta.packages를 사용하잖아 이전에는 javax.패키지를 사용했었다
이제는 jakarta.packages를 사용하고 있다




방금 다룬 모든 내용을 이해해야 하는 건 아니다
궁극적으로 기억해야 할 중요한 사항은 J2EE든, Java EE든, Jakarta EE든 같은 것을 이야기하고 있다는 점이다
J2EE, Java EE, Jakarta EE가 규격 그룹이라는 점을 기억하는 게 중요하다 
JSP, JSTL, EJB, CDI, JPA가 좋은 예이다 
Spring Framework 6와 Spring Boot 3에 대해 알아야 하는 건 Jakarta EE를 지원한다는 점, 
그래서 이 과정의 예제 대부분에 jakarta.pakages를 사용한다는 점이다 
