

지난 시간에 스타일링 작업을 마쳤으니 
이번 시간에는기능 구현에 집중해보자
우리가 구현하려는 건 +1 버튼을 클릭할 때마다 위에 있는 카운터 숫자가 증가하게 만드는 것이다
이를 위해서는 컴포넌트의 상태(State)를 저장할 수 잇게 만들어야 한다
컴포넌트 상태는 어떻게 저장해야 할까?




Understanding State in React

● State: Built-in React object used to contain data or information about the component                       _____________________                   
● (REMEMBER) In earlier versions of React, ONLY Class Components can have state                             |        View         |     
  ■ AND implementing state was very complex!                                                                |  JSX or Javascript  |            
● Hooks were introduced in React 16.8                                                                     ↗  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                    
  ■ Hooks are very easy to use                                                                          /      ____________________                  
  ■ useState hook allows adding state to Function Components                                          /     ↗ |        Logic       | 
    ○ useState returns two things                                                                    /     /  |      JavaScript    |    
      ◦ 1: Current state                                                                            /    /     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                 
      ◦ 2: A function to update state                                                  ______________   /      ____________________ 
  ■ Each instance of component it's own state                                         |  Components  |  ==>   |       Styling      |   
  ■ How to share state between components?                                            |              |        |         CSS        |          
    ○ Move state "upwards" (to a parent component)                                     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾  \       ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                                     \   \     ____________________  
                                                                                                      \    ↘  |        State       |
                                                                                                       \      | Internal Data Store|                     
                                                                                                        \      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                         
                                                                                                         \                                
                                                                                                           ↘  ____________________                           
                                                                                                             |        Props       |
                                                                                                             |      Pass Data     |          
                                                                                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 


그걸 알려면 먼저 리액트에서 상태의 개념을 이해해햐 한다
● State: Built-in React object used to contain data or information about the component 
State는 리액트의 내장 객체로서 컴포넌트의 데이터 또는 정보를 저장하는 데 사용된다
우리가 생성한 객체는 모두 State를 가질 수 있다, 컴포넌트 내부에 있는 데이터 저장소니까
● (REMEMBER) In earlier versions of React, ONLY Class Components can have state 
한 가지 중요한 사실은 구버전의 리액트에서 클래스형 컴포넌트만 State를 가질 수 있었고
  ■ AND implementing state was very complex! 
클래스형 컴포넌트에서 State를 구현하는 게 매우 어려웠다는 것이다
● Hooks were introduced in React 16.8 
하지만 리액트 16.8 버전부터 훅(Hooks)라는 개념이 도입되었다
  ■ Hooks are very easy to use 
훅은 사용이 쉬울 뿐만 아니라 
  ■ useState hook allows adding state to Function Components
함수형 컴포넌트에서도 사용할 수 있다는 장점이 있었다
'useState'라는 훅을 사용하면 함수형 컴포넌트에도 State를 추가할 수 있다
리액트 버전 16.8 이후부터 함수형 컴포넌트에도 State를 추가할 수 있게 된 거지
우리는 이번 단계에서 이 기능을 활용할 것이다, useState 훅이라는 걸 사용할 것이다
    ○ useState returns two things
useState 훅은 두 가지 값을 반환한다 
      ◦ 1: Current state
첫 번째는 현재 State 값이고 
      ◦ 2: A function to update state 
두 번째는 State를 업데이트하는 함수이다
먼저 State를 추가해 값을 0으로 설정한 다음, 그 값을 증가시켜서 1로 만들 것이다
상태가 1일 때는 증가시켜서 2로 만들고
이런 식으로 상태 값을 업데이트하는 함수도 활용할 것이다,
  ■ Each instance of component it's own state 
다음 단계를 진행하면서 컴포넌트의 인스턴스는 각자의 State를 가진다는 걸 배우게 될 것이다 
어떤 컴포넌트의 인스턴스를 5개 만들면 State 역시 5개가 생긴다
  ■ How to share state between components? 
그리고 컴포넌트 간에 State를 공유하는 방법도 살펴볼 것이다 
    ○ Move state "upwards" (to a parent component)
버튼이 여러 개 있을 때 그 사이에서 State를 공유하려면 어떻게 해야 할까?
앞으로 섹션을 진행하면서 이런 내용들을 살펴볼 것이다


먼저 우리가 만든 컴포넌트에 상태를 추가해 보자

Counter 클래스로 가보자
위쪽으로 가서 상태를 추가해 보겠다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import './Counter.css'

export default function Counter() {

  //1: 상태는 useState라는 훅을 사용해 추가할 수 있다, useState() 훅에는 인자로 기본값을 넘길 수 있다
  //우리가 카운터의 기본값으로 사용할 값은 '0'이지, 그리고 useState()는 두 가지 값을 반환한다, 
  //그래서 'state'라는 변수를 선언해 useState()의 반환 값을 저장할 것이다, 
  //그런 다음 밑에 있는 incrementCounterFunction()으로 가서 console.log()로 state를 출력하겠다 //1-1: incrementCounterFunction 함수로..
  const state = useState(0);

    function incrementCounterFunction() {
        //1-1: console.log(state)를 사용, 그리고 브라우저로 가보자
        console.log('increment clicked')
    }
    

    return(
    <div className='Counter'>
        <span className='count'>0</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+1</button>
        </div>
    </div>
    )
}
-----------------------------------------------------------------------------------------------
콘솔 창에서                                                 |
출력창을 비우고 +1버튼을 클릭하겠다                           V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                          
                                          0  
                                        
                                     ◜ ‾‾‾‾‾‾‾ ◝ 
                                     |   +1    | 
                                     ◟ _______ ◞ 

-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Download the React DevTools for a better development experience:         react refresh:6 
  https://reactjs.org/link/react-devtools
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
   ▶ (2) [0, ƒ]                                                              Counter.jsx:9
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  increment clicked                                                         Counter.jsx:10
-------------------------------------------------------------------------------------------

보는 것처럼 두 개의 값이 반환되었다
출력된 값을 보면 0과 f(함수)이다
이렇게 상태에서는 두 개의 값이 반환된다, 첫 번째는 초기값이고 두 번쨰는 함수이다 
보다시피 두 개의 값을 가진 배열이 반환된다 

그러니까 여기 있는 state로 반환되는 값은 두 개의 요소를 가진 배열이다 ([0, ƒ])
첫 번째는 상태의 초기값이고 (0), 두 번째는 이 상태를 업데이트하기 위한 함수이다(ƒ)

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import './Counter.css'

export default function Counter() {

    // [0, ƒ] 
    const state = useState(0);

    function incrementCounterFunction() {
        //2: 'console.log(state[0]),console.log(state[1])' 이렇게 하면 어떻게 출력될까?, 이렇게 저장하고
        console.log(state[0])
        console.log(state[1])
        console.log('increment clicked')
    }
    

    return(
    <div className='Counter'>
        <span className='count'>0</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+1</button>
        </div>
    </div>
    )
}
-----------------------------------------------------------------------------------------------
+1을 클릭해 보겠다                              |
                                               V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                          
                                          0  
                                        
                                     ◜ ‾‾‾‾‾‾‾ ◝ 
                                     |   +1    | 
                                     ◟ _______ ◞ 

-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Download the React DevTools for a better development experience:         react refresh:6 
  https://reactjs.org/link/react-devtools
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
    0                                                                       Counter.jsx:10
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ƒ dispatchSetState(fiber, queue, action) {                               Counter.jsx:11
    {
     if (typeof arguments[3] === 'function') {
       error("State updates from the useState() and useReducer() Hooks don't support 
   the " + 'sec…  i
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  increment clicked                                                         Counter.jsx:12
-------------------------------------------------------------------------------------------

( 위의 콘솔에  ƒ dispatchSetState(fiber, queue, action) {  더블클릭하면 나옴 )
                                    |
                                    V
---------------------------------------------------
function dispatchSetState(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }
---------------------------------------------------
보는 것처럼 '0'이 출력되고 'dispatchSetState()' 함수가 출력된다
내부 함수가 함께 출력됐다 이창은 닫고 별로 보고싶지 않기 때문이다 ㅋ

어찌됐든 이렇게 0과 dispatchSetState()함수가 콘솔 창에 출력된다
state[0]에는 상태 값이 들어있고
state[1]에는 상태를 갱신할 때 사용하는 함수가 들어있다 

