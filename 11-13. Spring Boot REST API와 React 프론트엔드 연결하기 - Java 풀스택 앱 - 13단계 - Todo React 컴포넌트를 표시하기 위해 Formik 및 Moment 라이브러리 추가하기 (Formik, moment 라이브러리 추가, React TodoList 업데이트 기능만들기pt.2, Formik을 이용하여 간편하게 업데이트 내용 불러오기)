


------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>



          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
                                          descrition:Learn DevOps


------------------------------------------------------------------------------------------------------------------

여기서는 양식을 만들고 Todo 세부정보를 잡으려고 한다 
우린 사용자가 Todo 세부정보를 업데이트할 수 있길 원하고, 그렇게 하기 위해 양식을 만들 것이다
앞에서 로그인을 만들 때 우린 수작업으로 양식을 만들었지 
그러지 말고 라이브러리를 사용해서 모든 양식 관리를 자동으로 하는 게 더 좋겠지?
그래서 우리는 formik이라는 이름의 라이브러리를 사용할 것이다
날짜 형식화도 좀 하려고 하고, 그럼 그 부분에 moment라는 또 다른 라이브러리를 사용할 것이다

그럼 그 두 라이브러리를 설치하는 것부터 시작해보자
그 두 라이브러리를 설치해보겠다

그럼 지금 실행 중인 애플리케이션을 중지하고
정리를 하고 npm install formik이라고 해준다

------------------------------------------------------------------------------------------------------------------

⏺ cmd 창>

C:\study\frontend\todo-app>npm install formik
/ (<= 설치 로딩중)

added 8 packages, and audited 1559 packages in 7s

265 packages are looking for funding
  run `npm fund` for details

9 vulnerabilities (2 moderate, 7 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
------------------------------------------------------------------------------------------------------------------

formik이 설치되었고


그리고 npm install moment라고 해준다

------------------------------------------------------------------------------------------------------------------

⏺ cmd 창>


C:\study\frontend\todo-app>npm install moment

up to date, audited 1560 packages in 3s

265 packages are looking for funding
  run `npm fund` for details

9 vulnerabilities (2 moderate, 7 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
------------------------------------------------------------------------------------------------------------------

준비되었고

그럼 VSC로 가서 package.json을 살펴보자

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ package.json


{
  "name": "todo-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",
    "axios": "^1.7.2",
    "bootstrap": "^5.3.3",
    "formik": "^2.4.6",    //<= 여기 formik이 있고
    "moment": "^2.30.1",  //<= moment도 들어왔다
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.24.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
...

------------------------------------------------------------------------------------------------------------------

좋다 

이제 npm start로 애플리케이션을 시작하자

이제 애플리케이션이 실행되고 있고 

콘솔을 정리하고 로그인을 한 다음에 Todos로 가서 
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                                       Login   Logout
     ______________________________________________________________________________________________________

                                        Things You Want To Do!

                        
                     Description	          is Done?     Target Date       Delete             Update
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
                   Get AWS Certified	           false     Sat Jul 05 2036   | Delete |     | Update |
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾                                                                      
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
                     Learn DevOps		   false     Sat Jul 05 2036   | Delete |               | Update |     
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                ________     ________
               Learn Full Stack Development	   false     Sat Jul 05 2036   | Delete |       | Update |
                                                                                ‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 1                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

Update를 클릭해보자
                                |
                                V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>



          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
                                       descrition:Get AWS Certified


------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 1                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

그리고 이제 우린 양식을 만들려고 한다 

그럼 TodoComponent로 가서 거기서 양식을 

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx




import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'

//1-1: import { Formik } from 'formik' 이라고 해 줄 것이다 
import { Formik } from 'formik'

export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
                //1: 여기 안으로 와서 여기 있는 descrition:{description} 를 삭제하고 양식을 추가해보자 
                //그럼 <Formik>태그를 넣고 닫는 태그를 넣어보겠다 이렇게 <Formik>태그를 넣었고 그게 어디서 오는 걸까? //1-1: import로..
                <Formik>
                    
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------
그리고 <Formik> 안에서 너는 jsx를 리턴하는 함수를 정의할 것이다, 너가 표시하려는 jsx를 이 함수의 리턴값으로 리턴하는 것이지                 
                                                  |
                                                  V
------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx



import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'
import { Formik } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
                <Formik>
                //2: 그리고 이 함수는 props를 입력값으로 받고, jsx를 리턴할 것이다 
                //그리고 이게 함수이기 때문에 중괄호를 여닫아서 안에 넣어 보자, 이렇게 중괄호 안에서 우리는 함수를 정의하고
                  {
                 (props) => (
                    //2-1: 여기에 원하는 <div>를 넣을 수 있다,<div>라고 하고 Some Content라고 해두자, 이렇게 해주면
                    <div>Some content</div>
                 )   
                  }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------
                                        |
                                        V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>



          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
                                               Some content


------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  clicked 1                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

여기서 Some content를 볼 수 있다



그럼 이제 여기에 우리 양식 요소를 넣는다 
그럼 양식을 만들어보자

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx




import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'

//3-1: ( {}에 ,Form 작성 ) 그럼 임포트를 해보자 
//3-5: 그리고 역시 Field도 formik에서 온다 ({}에 Field 추가..)
import { Formik, Form, Field } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
                <Formik>
                    {
                    (props) =>  (
                        //3: <Form> 이라고 적는다, 역시 이것도 formik에서 오고//3-1: import로.. 
                        <Form>
                        //3-2: 그리고 <Form>안에 모든 요소가 들어갈 것이다, 통상적으로 <Form>안의 모든 요소는 필드 세트 안에 포함된다, 그럼 필드세트를 만들어 보자
                          <fieldset>
                            //3-3: 모든 필드에는 레이블이 있을 거고 그럼 <label>을 넣어주자
                            <label></label>
                            //3-4: 그리고 보통은 입력값이 있지, 하지만 양식에선 필드라는 걸 만들어야 한다 그럼 여기에 <Field>를 만든다 //3-5: 다시 import로..
                            <Field />
                          </fieldset>
                        </Form>
                    )
                }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------

이렇게 우리는 양식의 구조를 설정하고 있고

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx




import {Form, useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'
import { Formik, Form, Field } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
                <Formik>
                    {
                    (props) =>  (
                        <Form>
                          //4: 그리고 <fieldset>에 className을 추가해보자, 이름을 "form-group"이라고 해준다
                            <fieldset className="form-group">
                                <label></label>
                                //4-1: 그리고 <Field>에 className="form-control"이라고 해준다
                                <Field className="form-control" />
                            </fieldset>
                        </Form>
                    )
                }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------

이렇게 
----------------------
<fieldset className="form-group">
  <label></label>
  <Field className="form-control" />
</fieldset>
----------------------
두 개의 필드가 필요하고, 하나는 targetDate를 위한 것이고 다른 하나는 description을 위한 것이다

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx




import {Form, useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'
import { Formik, Form, Field } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
                <Formik>
                    {
                    (props) =>  (
                          //5:그럼 그걸 다시 복사할 거고 (<= <fieldset> 복사)
                        <Form>
                            <fieldset className="form-group">
                            //5-1: 첫 번째 것은 Description이라고 해주고 
                                <label>Description</label>
                                //5-3: 그리고 이것의 type="text"고
                                <Field type="text" className="form-control" />
                            </fieldset>
                            <fieldset className="form-group">
                              //5-2: 두 번째 것은 Target Date라고 해주자, 
                                <label>Target Date</label>
                                //5-4: 이것은 type="date"라고 해준다 ,저장하고 
                                <Field type="date" className="form-control" />
                            </fieldset>
                        </Form>
                    )
                }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------

마지막은 필드의 이름이다

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx



import {Form, useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'
import { Formik, Form, Field } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
                <Formik>
                    {
                    (props) =>  (
                        <Form>
                            <fieldset className="form-group">
                                <label>Description</label>

                                //6: name="description"이고 
                                <Field type="text" className="form-control" />
                            </fieldset>
                            <fieldset className="form-group">
                                <label>Target Date</label>

                                  //6-1: 여기서는 name="targetDate"지, 좋다 이렇게 기본적인 필드세트를 만들었고 
                                <Field type="date" className="form-control" name="targetDate"/>
                            </fieldset>
                        </Form>
                    )
                }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------

가보면 
                                                |
                                                V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>




          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
               
                                                Description
               ________________________________________________________________________________ 
              |                                                                                |
               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                Target Date
                ________________________________________________________________________________ 
               | 연도-월-일                                                                 📅  |
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------
  Elements  ⚛ Component  >>                                                       🔅  ⁞  x
            ‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ↖  |  🔍  Search (text or /regex/)                                               |  🔅
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▼ App
    ▼ TodoApp
     ▼ AuthProvider
      ▼ Context.Provider
       ▼ BrowserRouter
        ▼ Router
         ▼ Navigation.Provider
          ▼ Location.Provider
           ▼ HeaderComponent
              Link
              Link
              Link
              Link
           ▼ Routes
            ▼ RenderedRoute
             ▼ Route.Provider
              ▼ AuthencatedRoute
                ▼ TodoComponent
                 ▼ Formik
                  ▼FormikContext.Provider
                   ▼ Form
                      Field
                      Field
-------------------------------------------------------------------------------------------

이렇게 양식이 나오고 
여기 몇 가지 값들이 있다 
모든 게 문제 없고, 좋다


그리고 Formkik에 너는 초기 값을 설정할 수도 있다

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx



import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'
import { Formik, Form, Field } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>

                //7: 그럼 <Formik initialValues= 라고 하고, 여기에 객체를 생성해보자
                <Formik initialValues={{ }}>
                    {
                    (props) =>  (
                        <Form>
                            <fieldset className="form-group">
                                <label>Description</label>
                                <Field type="text" className="form-control" name="description"/>
                            </fieldset>
                            <fieldset className="form-group">
                                <label>Target Date</label>
                                <Field type="date" className="form-control" name="targetDate"/>
                            </fieldset>
                        </Form>
                    )
                }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------

그리고 여기서 우리가 초기 값으로 넣으려는 값은 우리가 retrieveTodos()에서 받는 값이다
우린 이미 상태에 description을 설정했고 (<= const[description, setDescription] = useState(''))
너는 targetDate도 상태에 설정하려고 한다

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx




import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'
import { Formik, Form, Field } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    //8: 그럼 너는 targetDate, setTargetDate라고 해주고
    const[targetDate, setTargetDate] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)

            //8-1: 그리고 여기서 setTargetDate라고 할 텐데, 날짜 형식화에 몇 가지 문제가 있을 거고, 진행하면서 수정해보도록 하자
            //지금은 그냥 추가해보겠다, 그럼 (response.data.targetDate)라고 해주자
            setTargetDate(response.data.targetDate)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
                <Formik initialValues={}>
                    {
                    (props) =>  (
                        <Form>
                            <fieldset className="form-group">
                                <label>Description</label>
                                <Field type="text" className="form-control" name="description"/>
                            </fieldset>
                            <fieldset className="form-group">
                                <label>Target Date</label>
                                <Field type="date" className="form-control" name="targetDate"/>
                            </fieldset>
                        </Form>
                    )
                }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------

이렇게 우리는 retrieveTodos()로 부터 값을 받고 있고 
그걸 Description과 TargetDate에 설정하고 있다, 그리고 그 값들을 여기서 사용하고 있지 (<= <Formik initialValues={}>)

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx




import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'
import { Formik, Form, Field } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const[targetDate, setTargetDate] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
            setTargetDate(response.data.targetDate)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>

              //9: 그럼 상태로부터 우린 description과 targetDate를 잡을 것이다, 우린 그것들을 초기 값으로 설정하려 하고 그럼 어떻게 되는지 볼까?
                <Formik initialValues={{ description, targetDate }}>
                    {
                    (props) =>  (
                        <Form>
                            <fieldset className="form-group">
                                <label>Description</label>
                                <Field type="text" className="form-control" name="description"/>
                            </fieldset>
                            <fieldset className="form-group">
                                <label>Target Date</label>
                                <Field type="date" className="form-control" name="targetDate"/>
                            </fieldset>
                        </Form>
                    )
                }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------

Todos로 가고 Update를 클릭한다
                                    |
                                    V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>




          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
               
                                                Description
               ________________________________________________________________________________ 
              |                                                                                |
               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                Target Date
                ________________________________________________________________________________ 
               | 연도-월-일                                                                 📅  |
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  (2) clicked 1                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

하지만
                                Description
 ________________________________________________________________________________ 
|                                                                                |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
여기로 들어오는 Description이 없다

양식이 생성될 때
---------------------------------
const[description, setDescription] = useState('')

const[targetDate, setTargetDate] = useState('')
---------------------------------
이 상태에 있는 초기 값으로 초기화가 이루어지는데

그리고 함수 실행이 완료되면 너는 formik을 다시 초기화해야 한다
기본값으로서, formik은 재초기화를 하지 않지 


그럼 우리는 재초기화를 활성화하기 위해 formik을 설정해야 한다 
그럼 지금 바로 설정해보자

------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoComponent.jsx



import {useParams} from 'react-router-dom'
import { retrieveTodoApi } from './api/TodoApiService'
import { useAuth } from './security/AuthContext'
import { useEffect, useState } from 'react'
import { Formik, Form, Field } from 'formik'


export default function TodoComponent() {

    const {id} = useParams()

    const[description, setDescription] = useState('')

    const[targetDate, setTargetDate] = useState('')

    const authContext = useAuth()

    const username = authContext.username

    useEffect(
        () => retrieveTodos(),
        [id]
        )

    function retrieveTodos() {
        retrieveTodoApi(username, id)
        .then(response => {
            setDescription(response.data.description)
            setTargetDate(response.data.targetDate)
        })
        .catch(error => console.log(error))
    }

    return (
        <div className="container">
            <h1>Enter Todo Details</h1>
            <div>
                <Formik initialValues={{ description ,targetDate }}
                  //10: enableReinitialize={true}라고 하면 된다, 이제 어떻게 되는지 볼까?
                  enableReinitialize = {true}
                >
                    {
                    (props) =>  (
                        <Form>
                            <fieldset className="form-group">
                                <label>Description</label>
                                <Field type="text" className="form-control" name="description"/>
                            </fieldset>
                            <fieldset className="form-group">
                                <label>Target Date</label>
                                <Field type="date" className="form-control" name="targetDate"/>
                            </fieldset>
                        </Form>
                    )
                }
                </Formik>
            </div>
        </div>
    ) 
}
------------------------------------------------------------------------------------------------------------------
                                    |
                                    V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>




          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
               
                                                Description
               ________________________________________________________________________________ 
              | Get AWS Certified                                                              |
               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                Target Date
                ________________________________________________________________________________ 
               | 2034-08-02()                                                              📅  |
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  (2) clicked 1                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

이제 가서 보면 Get AWS Certified 와 날짜가 표시된 걸 볼 수 있다 
멋지지?

그리고 이제 날짜를 선택할 수 있지

------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>




          in28minutes                                                                          Logout
     ______________________________________________________________________________________________________

                                            Enter Todo Details
               
                                                Description
               ________________________________________________________________________________ 
              | Get AWS Certified                                                              |
               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                Target Date
                ________________________________________________________________________________ 
               | 2034-08-02()                                                              📅  |
               |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
               | 2034년 08월 ▼         ↑ ↓  |
               |                            |
               | 일  월  화  수  목  금  토  |           
               | 30  31  1   2   3   4  5   |
               |  6  7   8   9  10  11  12  |
               | 13  14  15  16 17  18  19  |
               | 20  21  22  23 24  25  26  |
               | 27  28  29  30 31   1   2  | 
               |  3  4   5   6  7    8   9  |
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                                           🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------------------
  (2) clicked 1                                                                    ListTodosComponent.jsx:51 
------------------------------------------------------------------------------------------------------------------

가령 특정한 날짜를 선택하려 한다고 해보자
그럼 너는 그걸 선택할 수 있고 멋지지?

