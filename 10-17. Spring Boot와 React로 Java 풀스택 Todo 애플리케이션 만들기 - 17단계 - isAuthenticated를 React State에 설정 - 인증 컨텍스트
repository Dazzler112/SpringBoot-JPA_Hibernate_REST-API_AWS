

우리는 사용자의 로그인 여부에 따라 메뉴를 활성화하거나 비활성화 하고 싶다
어떻게 할까?

로그인을 눌러서 로그인하면 사용자가 인증되었다는 컨텍스트를 설정하고 싶다
사용자가 로그인을 클릭하고 인증이 되면 인증되었다는 플래그를 컨텍스트에 추가하고 
메뉴를 보여줄지 말지 결정하는 데 플래그를 사용하고 싶다
괜찮을 것 같지?
구현을 시작해보자

인증이 되었는지 여부를 설정하는 변수를 생성하는 것부터 시작하자

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ AuthContext.js




import { createContext, useContext, useState } from "react";

// Create a Context
export const AuthContext = createContext()

export const useAuth = () => useContext(AuthContext)


// Share the created context with other components
export default function AuthProvider({ children }) {

    //Put some state in the context
    const [number, setNumber] = useState(10)

    //1: const isAuthenticated, setAuthenticated를 선언한다, 좋다 인증 여부의 기본값은 false이다
    //컨텍스트에 상태 값을 저장하는 isAuthenticated 변수를 만들고 변수를 업데이트하는 메서드도 만들었지 isAuthenticated, setAuthenticated 그리고 useState(false) 좋다
    //그러면 이 값을 다른 컴포넌트에서도 사용할 수 있게 하고 싶다, 어떻게 하지? value에 추가하면 된다 //1-1로..
    const [isAuthenticated, setAuthenticated] = useState(false)

    setInterval(() => setNumber(number + 1), 10000)

    return (

        //1-1: 여기 number 외에도 우리는 isAuthenticated를 추가한다, 이제 다른 컴포넌트가 isAuthenticated에 접근할 수 있다
        //그리고 setAuthenticated에도 접근하게 하겠다, 로그인 컴포넌트에선 setAuthenticated에 접근해야겠지, 사용자가 인증되었는지 여부를 설정하기 위해서다 
        <AuthContext.Provider value={ {number, isAuthenticated, setAuthenticated} }>
            {children}
        </AuthContext.Provider>
    )
}
-----------------------------------------------------------------------------------------------

그러면 이 구문이 어떻게 작동할까?  <={number, isAuthenticated, setAuthenticated} 
뭐가 전달되는 거지?
저장하고

뭘 할 거냐면
헤더 컴포넌트로 가서 여기에 console.log를 추가하겠다 

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ AuthContext.js




import {Link} from 'react-router-dom'
import { useAuth } from './security/AuthContext'



function HeaderComponent() {

    // const authContext = useContext(AuthContext)

    const authContext = useAuth()

    //2: console.log(authContext) 를 추가하고 저장한다
    console.log(authContext);

    //console.log(authContext.number);

    return (
        <header className="border-bottom border-light border-5 mb-5 p-2">
        <div className="container">
            <div className="row">
                <nav className="navbar navbar-expand-lg">
                    <a className="navbar-brand ms-2 fs-2 fw-bold text-black" href="https://www.in28minutes.com">in28minutes</a>
                    <div className="collapse navbar-collapse">
                        <ul className="navbar-nav">
                            <li className="nav-item fs-5"><Link className="nav-link" to="/welcome/in28minutes">Home</Link></li>
                            <li className="nav-item fs-5"><Link className="nav-link" to="/todos">Todos</Link></li>
                        </ul>
                    </div>
                    <ul className="navbar-nav">
                        <li className="nav-item fs-5"><Link className="nav-link" to="/login">Login</Link></li>
                        <li className="nav-item fs-5"><Link className="nav-link" to="/logout">Logout</Link></li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>
    )
}

export default HeaderComponent
-----------------------------------------------------------------------------------------------

현재 authContext로 세 가지를 공유하고 있다 ( {number, isAuthenticated, setAuthenticated} )
number 값, isAuthenticated 값, setAuthenticated 함수지
어떻게 되는지 보자

콘솔을 다 지우고 새로 고침 한다

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here

                                        


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ▶ {number: 10, isAuthenticated: false, setAuthenticated: ƒ}     HeaderComponent.jsx:12 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {number: 10, isAuthenticated: false, setAuthenticated: ƒ}     HeaderComponent.jsx:12 
-------------------------------------------------------------------------------------------

JavaScript 객체가 출력된다
number는 10, isAuthenticated는 false, setAuthenticated는 함수지
여기서 우리는 객체를 생성하는 것이다 ( <AuthContext.Provider value={ {number, isAuthenticated, setAuthenticated} }> )
우리는 이 값을 공유하고 싶다 {number, isAuthenticated, setAuthenticated}
그러면 이런 객체를 만드는 것이다

그럼 이렇게 해보겠다,

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ AuthContext.js




import { createContext, useContext, useState } from "react";

//1: Create a Context
export const AuthContext = createContext()

export const useAuth = () => useContext(AuthContext)


//2: Share the created context with other components
export default function AuthProvider({ children }) {

    //Put some state in the context
    const [number, setNumber] = useState(10)

    const [isAuthenticated, setAuthenticated] = useState(false)

    setInterval(() => setNumber(number + 1), 10000)

    //3: const valueToBeShared로 선언하고 이걸 준다 ( {number, isAuthenticated, setAuthenticated} )
    const valueToBeShared = {number, isAuthenticated, setAuthenticated}

    return (

            //3-1: //valueToBeShared를 여기에 넣는다
        <AuthContext.Provider value={ {valueToBeShared} }>
            {children}
        </AuthContext.Provider>
    )
}

-----------------------------------------------------------------------------------------------

{number, isAuthenticated, setAuthenticated} 여기 나와있는 이런 구문을 JavaScript에만 있다
어떤 일이 일어난 거지?
JavaScript에서 객체를 생성하는 건 매우 쉽다


콘솔로 가서 
                                        |
                                        V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here

                                        


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ▶ {number: 10, isAuthenticated: false, setAuthenticated: ƒ}     HeaderComponent.jsx:12 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {number: 10, isAuthenticated: false, setAuthenticated: ƒ}     HeaderComponent.jsx:12 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {number: 11, isAuthenticated: false, setAuthenticated: ƒ}     HeaderComponent.jsx:12 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {number: 11, isAuthenticated: false, setAuthenticated: ƒ}     HeaderComponent.jsx:12 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {number: 12, isAuthenticated: false, setAuthenticated: ƒ}     HeaderComponent.jsx:12 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {number: 12, isAuthenticated: false, setAuthenticated: ƒ}     HeaderComponent.jsx:12 
                                      ....
-------------------------------------------------------------------------------------------

이런 콘솔이 계속 생성되고 있다
콘솔을 지우고 setInterval도 주석 처리하겠다
------------------------------------
export default function AuthProvider({ children }) {

    //Put some state in the context
    const [number, setNumber] = useState(10)

    const [isAuthenticated, setAuthenticated] = useState(false)

   // setInterval(() => setNumber(number + 1), 10000) // (<== 이부분 주석 처리, 데이터 업데이트는 하지 않겠다 이미 봤으니까, setInterval은 주석 처리함)

    const valueToBeShared = {number, isAuthenticated, setAuthenticated}

    return (
        <AuthContext.Provider value={ {valueToBeShared} }>
            {children}
        </AuthContext.Provider>
    )
}
------------------------------------


그리고 여기 간단한 const를 만들고 싶다

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here

                                        


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  //4: const val = 10
  >  const val = 10 
  <• undefined
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-1: const val1 = 11
  >  const val1 = 11
  <• undefined
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-2: const val3 = 12
  >  const val3 = 12
  <• undefined
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-3: 그리고 const obj = { val, val1, val3 } 어떻게 될까?, 값이 세 개가 있다, val, val1, val3,
  //그리고 객체에 모두 넣었지, 객체는 중괄호 안에 있는 것들이다
  >  const obj = { val, val1, val3 }
  <• undefined
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-4: 여기서 우리는 객체를 생성했다 
  >  obj
  <• ▶ {val: 10, val1: 11, val3: 12}
  //4-4 계속 : 이런 타입이지, JavaScript는 객체를 생성할 때 속성 이름을 val로 하고 속성 값은 val의 값이 되는 것이다
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-5: val은 10, val1은 11, val3은 12, 문자열도 가능하다, 문자열로도 정의해보겠다 
  //const str = "Thist is awesome"
  >  const str = "Thist is awesome"
  <• undefined
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-6: const obj2 = 하나는 정수로 하고 하나는 문자열로 해보자, 중괄호도 닫아주면 이렇게 된다
  >  const obj2 = {val, str}
  <• undefined 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-7: 그리고 여기서 obj2를 출력해보면 이렇게 val은 10, str은 This is awesome이라고 출력된다
  >  obj2
  <• ▶ {val: 10, str: 'Thist is awesome'}
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-7: 특정 값에 접근하고 싶으면 obj2.val 하면 10이 나오고
  >  obj2.val
  <• 10
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //4-8: obj2.str하면 문자열이 나온다
  >  obj2.str
  <• 'Thist is awesome'
-------------------------------------------------------------------------------------------

이런 간단한 형식으로 객체의 값을 설정할 수 있다
여기서도 그렇게 하는 거지
<AuthContext.Provider value={ {number, isAuthenticated, setAuthenticated} }>
이건 간단한 형식이다
이 모든 값을 가지고 객체를 생성하는 간단한 모델이지
이 값을 다른 컴포넌트와 공유하고 싶은 것이다
그래서 컨텍스트에 넣는 거지
컨텍스트의 값으로 넣어서 공유하고 싶은 것이다

const valueToBeShared = {number, isAuthenticated, setAuthenticated}
이런 구문은 JavaScript를 시작하는 사람들에게는 조금 어렵게 느껴질 수 있다

그래서 별도 const로 분리한 것이다
이렇게 valueToBeShared로 값을 공유할 수 있도록 하고 valueToBeShared를 여기에 두지
일반적으로 리액트 프로젝트에선 이렇게 const로 선언해서 하지 않는다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ AuthContext.js




import { createContext, useContext, useState } from "react";

//1: Create a Context
export const AuthContext = createContext()

export const useAuth = () => useContext(AuthContext)


//2: Share the created context with other components
export default function AuthProvider({ children }) {

    //Put some state in the context
    const [number, setNumber] = useState(10)

    const [isAuthenticated, setAuthenticated] = useState(false)

    // setInterval(() => setNumber(number + 1), 10000)

    //5: 이 선언은 그냥 지우겠다
//    const valueToBeShared = {number, isAuthenticated, setAuthenticated} (<=주석처리)

    return (

          //5-1: 보통은 지우고 바로 여기에 넣는다 ( {number, isAuthenticated, setAuthenticated} value에다가 넣어줌 )
          //그래서 중괄호를 두 번 열고 공유할 값을 넣고 중괄호를 두 번 닫는 거지, 내부적으로는 객체가 생성되고 그 객체가 값으로 파싱되는 것이다
          //그러면 다른 컴포넌트는 여기 있는 값에 객체의 속성으로 접근할 수 있다, 이 객체의 속성으로 접근하는 거지
          //아까 하던 것으로 돌아가겠다, isAuthenticated와 setAuthenticated를 설정했다
        <AuthContext.Provider value={ {number, isAuthenticated, setAuthenticated} }>
            {children}
        </AuthContext.Provider>
    )
}

-----------------------------------------------------------------------------------------------

이제 로그인 컴포넌트로 가보자, ctrl + p 로 명령 팔레트를 열어 검색하면 된다
여기서 할 것은 사용자가 로그인에 성공하면 setAuthenticated함수로 isAuthenticated값을 true로 설정한다 어떻게 하지?
HeaderComponent에서 인증 컨텍스트를 사용하는 방법을 봤었지
useAuth 메서드를 사용하면 된다 (HeaderComponent()의 const authContext = useAuth() 복사)
로그인 컴포넌트로 가서 상단 navigate 바로 아래에 

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ LoginComponent.jsx




import { useState } from 'react'
import {useNavigate} from 'react-router-dom'

//6-1: useAuth를 임포트한다 './security/AuthContext'에서 useAuth가 임포트 되었지, 좋다 그리고 함수 로직에서//6-2: handleSubmit()의 if로..
import { useAuth } from './security/AuthContext'

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)
    const navigate = useNavigate();

    //6: hook을 추가하겠다, AuthContext에 접근하도록 말이다 , ctrl + 스페이스로 임포트 하겠다
    const authContext = useAuth()

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {


        if(username === 'in28minutes' && password === 'dummy') {

          //6-2: authContext의 set 함수 메서드 이름이 뭐지? setAuthenticated지, authContext에서 setAuthenticated로 true를 넘겨줬다
          //이렇게 한다, 성공하면 true로 설정하고 
            authContext.setAuthenticated(true)

            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
            navigate(`/welcome/${username}`)
        }else {
          //6-3: 성공하지 못하면 false로 설정한다, 저장하고
            authContext.setAuthenticated(false)

            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            <h1>Time to Login!</h1>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}

export default LoginComponent
-----------------------------------------------------------------------------------------------
                                       |
                                       V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here

                                        


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

컴파일 된다 좋다

콘솔을 비우고 로그인으로 가보자

컴포넌트를 보면 
                                       |
                                       V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                          Time to Login!
                  
                                               _________________
                                  User Name:  |in28minutes      | 
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              __________________
                                  Password:  |●●●●●             |
                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                              _______
                                             | login |  
                                              ‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------
  Elements  ⚛ Component  >>                                                       🔅  ⁞  x
            ‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ↖  |  🔍  Search (text or /regex/)                                               |  🔅
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▼ App
    ▼ TodoApp
     ▼ AuthProvider
      ▼ Context.Provider
       ▼ BrowserRouter
        ▼ Router
         ▼ Navigation.Provider
          ▼ Location.Provider
           ▼ HeaderComponent
              Link
              Link
              Link
              Link
           ▼ Routes
            ▼ RenderedRoute
             ▼ Route.Provider
-------------------------------------------------------------------------------------------

컴포넌트를 보면 AuthProvider가 최상단에 있다
Context가 그 안에 있고, 

-------------------------------------------------------------------------------------------

Context.Provider                  ⏱  👁  🐞  <>
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
props
▶ children:{$$typeof: Symbol(react.element), _owner: FiberNode…}
▶ value: {isAuthenticated: false, number: 10, setAuthenticat…}
  new entry: ""
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
rendered by
  AuthProvider
  TodoApp
  App
  createRoot()
  react-dom@18.3.1

-------------------------------------------------------------------------------------------

Context 안에는 value 객체가 있지
여기서 value 객체를 볼 수 있다 isAuthenticated가 false인 value가 보이지
number는 10이고 setAuthenticat 메서드가 있지

그리고 in28minutes, dummy를 입력하고 로그인하면
                                        |
                                        V
-------------------------------------------------------------------------------------------

Context.Provider                  ⏱  👁  🐞  <>
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
props
▶ children:{$$typeof: Symbol(react.element), _owner: FiberNode…}
▶ value: {isAuthenticated: true, number: 10, setAuthenticat…}
  new entry: ""
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
rendered by
  AuthProvider
  TodoApp
  App
  createRoot()
  react-dom@18.3.1

-------------------------------------------------------------------------------------------

isAuthenticated가 이제 true가 되는 걸 볼 수 있다
이제 로그인 컴포넌트에서 인증 정보 컨텍스트를 설정할 수 있다

