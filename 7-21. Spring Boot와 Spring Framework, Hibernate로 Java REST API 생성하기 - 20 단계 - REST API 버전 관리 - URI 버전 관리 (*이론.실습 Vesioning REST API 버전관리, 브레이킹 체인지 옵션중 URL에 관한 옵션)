

Versioning REST API

● You have build an amazing REST API                                                        _____________________________________
  ■ You have 100s of consumers                                                                localhost:8080/v1/person
  ■ You need to implement a breaking change                                                 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    ○ Example: Split name into firstName and lastName                                         {
● SOLUTION: Versioning REST API                                                                 "name" : "Bob charlie"
  ■ Variety of options                                                                        }
    ○ URL
    ○ Request Parameter                                                                     _____________________________________
    ○ Header                                                                                  localhost:8080/v2/person
    ○ Media Type                                                                            ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                              {
                                                                                                "name":{
                                                                                                  "firstName": "BOb",
                                                                                                  "lastName": "Charlie"
                                                                                                }
                                                                                              }




이번 단계에선 REST API의 버전 관리에 대해 살펴보겠다
우선 버전 관리에 무엇이 필요한지 짚어보도록 하자
● You have build an amazing REST API 
너는 REST API를 구축했고, 
  ■ You have 100s of consumers
이 REST API를 사용하는 수백만 명의 사람들이 있다
  ■ You need to implement a breaking change 
하지만 이제 브레이킹 체인지를 구현해야 하는데
    ○ Example: Split name into firstName and lastName 
firstName과 lastName으로 이름을 나누는 작업이 적절한 예시가 되겠지
이 API는 현재 잘 작동하고 있는데 너는 이름과 성, 중간 이름을 포함하는 하나의 이름을 모두 반환하려고 한다
따라서 너는 firstName, lastName, middleName으로 나누고, 각 값을 반환하려고 하는데 
프로덕션에 이 변경 사항을 직접 구현할 수 있을까?

모범 사례에 따르면 이 변경 사항을 프로덕션에 직접 구현하지 않아야 한다
이유가 뭘까?
소비자가 이 구조에서 
{
  "name" : "Bob charlie"
}
응답을 기대하기 때문이다 
응답의 구조를 변경한다면 모든 소비자에 영향을 주게 되는데
이 API를 사용하는 사람이 코드를 즉시 업데이트 해서 우리가 구현해 둔 새 구조를 사용해야 한다 
이것은 좋은 방법이 아니다
API를 변경할 때마다 고객도 즉시 변경하도록 강요하지 말아야 한다

● SOLUTION: Versioning REST API
이것이 바로 구현할 큰 변경이 있을 때마다 REST API의 버전 관리를 해야하는 이유인데 
{
  "name" : "Bob charlie"
}
이것을 버전 1이라고 하고 
{
   "name":{
    "firstName": "BOb",
    "lastName": "Charlie"
  }
}
이것을 버전 2라고 하겠다
버전 1은 저대로 두도록 하고 소비자가 준비되면 API 버전 1에서 버전 2로 전환할 수 있다
이를 통해 소비자는 원할 때 마다 새 버전의 API로 전환할 수 있는 유연성을 받게 되는데
  ■ Variety of options
API에 대한 버전 관리를 구현할 수 있는 여러 가지 방법이 있다
    ○ URL
URL을 기반으로 버전 관리를 할 수 있다
보다시피 person v1과 person v2에 대해 다른 URL을 사용하고 있는데 이것이 하나의 옵션이다
    ○ Request Parameter
다른 옵션으로는 요청 매개변수가 있다 가령, version=v1, version=v2로 작성할 수 있는데
    ○ Header  
이 밖에도 Request 헤더를 사용하는 옵션과
    ○ Media Type
Media또는 MIME 유형을 기반으로 버전 관리를 하는 옵션도 있다

이번 시간과 다음 시간에 걸쳐 이 옵션을 자세히 살펴보겠다 
그럼 URL 버전 관리의 기본 버전을 구현하는 것으로 시작해보자, 
새 컨트롤러를 생성해야 한다

restfulwebservices로 이동하여 ctrl+N을 누르고 클래스를 생성한다 
VersioningPersonController로 지정해보자 해당 패키지의 경우 restfulwebservices.versioning으로 마무리하고 Finish를 클릭

-------------------------------------------------------------------------------------------------------------------


⏺ VersioningPersonController



package com.in28minutes.rest.webservices.restfulwebservices.versioning;

import org.springframework.web.bind.annotation.*;

//1: 이곳에는 @RestController를 입력하고 구현을 시작해야 하는데, 첫 번째 버전인 localhost:8080/v1/person을 다뤄보자 //1-1: 클래스 안으로 작성..
@RestController
public class VersioningPersonController {
  //1-1:@GetMapping() "/v1/person"을 작성하고 반환해야 하기 때문에 다음과 같이 입력한다 
  //public Person getFirstsVersionOfPerson() {} 안에 return new Person("") 그리고 이름이 하나 필요한데 이것을 PersonV1이라고 지정해보자, PersonV1에는 전체 이름을 하나로 저장해 두었다 Bob Charlie
  //이 클래스를 생성하려면 Create class "PersonV1"을 선택한다 같은 버전의 패키지에서 생성해보자, Finish를 클릭 //1-2: PersonV1 클래스 파일로...
  @GetMapping("v1/person")
	public Person getFirstsVersionOfPerson() {
		return new PersonV1("Bob Charlie");
	}
}
//1-6: 임포트를 정리하면 org.springframework.web.bind.annotation.RestController;와 org.springframework.web.bind.annotaion.GetMapping;이 임포트된다,
//이것은 PersonV1을 반환하겠지 이것도 수정한 다음 저장 이제 이 v1/person URL로 이동해보겠다

--------------------------------------------------------------


⏺ PersonV1 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.versioning;

public class PersonV1 {
  //1-2: 여기에서 private String name;을 입력하고 우클릭해서 > Source > Generate Constructor using Fields 그리고 생성자를 생성한다 
  private String name;

  //1-3: 생성자가 만들어졌고 이제 Setters도 만들어보자 Generate Getters and Setters를 선택 Getter만 생성해 보겠다 
	public PersonV1(String name) {
		super();
		this.name = name;
	}

  //1-4: 이렇게 하면 getName 메소드가 생성될 텐데 마지막으로 toString 메소드를 생성해야 하지  Generate to String()과 Generate를 차례로 선택한다
	public String getName() {
		return name;
	}

  //1-5: 잘된거 같다 이렇게 PesronV1 클래스와 버전 관리가 주어졌다 VersioningPersonController를 살펴볼까?//1-6:VersioningPersonController클래스파일로..
	@Override
	public String toString() {
		return "PersonV1 [name=" + name + "]";
	}

}


-------------------------------------------------------------------------------------------------------------------
                                                                                            |
                                                                                            V
-------------------------------------------------------------------------------------------------------------------


🌎 http://localhost:8080/v1/person 사이트화면 ==>


{
  "name": "Bob Charlie"
}

-------------------------------------------------------------------------------------------------------------------

이렇게 Bob Charlie를 확인할 수 있고 대단한 것은 없다 무척 간단한 작업이다
이제 person의 새 구조를 통해 이 특정 API의 다른 버전을 구현하고 싶다면 getFirstsVersionOfPerson의 사본을 생성하면 된다

-------------------------------------------------------------------------------------------------------------------


⏺ VersioningPersonController 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.versioning;

import org.springframework.web.bind.annotation.*;

@RestController
public class VersioningPersonController {
	
	@GetMapping("v1/person")
	public PersonV1 getFirstsVersionOfPerson() {
		return new PersonV1("Bob Charlie");
	}

//2:URL이 달라지므로 v1대신 v2를 호출해야 하는데 메소드명도 getSecondVersionOfPerson로 변경해야 하고 SecondV2라고 해도 되겠지, 여기서 두 번째 버전의 person을 사용하게 된다 
//이제 PersonV2 클래스를 생성할 차례인데 Create class 'PersonV2'를 클릭한다 기본세팅으로 하고 패키지는 restfulwebservices.versioning으로 한다 Finish 클릭//2-1: PersonV2 클래스파일로..
	@GetMapping("v2/person")
	public PersonV2 getSecondVersionOfPerson() {

    //2-9: Versioning 컨트롤러에서 PersonV2를 생성해야 하는데, 그렇게 하려면 new Name을 생성해야 한다
    //이름으로 Bob을, 성으로 Charlie를 사용해보자, 잘 된 것 같다 이제 URL로 이동..
		return new PersonV2(new Name("Bob", "Charlie"));
	}
}

--------------------------------------------------------------



⏺ PersonV2 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.versioning;

public class PersonV2 {
  //2-1: 여기에서는 name 객체가 필요하기 때문에 private Name name;을 작성한다 그리고 Create class 'Name'을 선택하면 Name 클래스를 생성할 수 있는데 //2-2: Name 클래스파일로..
  private Name name;

  //2-6: PersonV2의 경우 Name을 생성하고 설정할 수 있을 것이다 그럼 생성자를 만들어 보자 우선 생성자를 생성하려고 하는데 Generate Constructor using Fields를 클릭한다 
  public PersonV2(Name name) {
		super();
		this.name = name;
	}	

  //2-7: Name을 사용하여 Getters를 생성한다
  public Name getName() {
		return name;
	}

  //2-8: toString도 생성해보자 
	@Override
	public String toString() {
		return "PersonV2 [name=" + name + "]";
	}	
  //잘 됐다 문제는 없어보인다 저장해 보겠다//2-9: VersioningPersonController클래스파일로...
}


--------------------------------------------------------------


⏺ Name 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.versioning;

public class Name {
  //2-2: 다음으로 private String firstName;과 private String lastName;을 입력한다, 여기에 다른 모든 사항도 추가할 수 있다 Generate Constructor using Fields를 클릭한다
  private String firstName;
  private String lastName;

  //2-3: 이렇게 생성자를 생성하고 다음으로 Getters and Setters도 생성해야 겠다 그렇게 하려면 getters만 생성해보자
	public Name(String firstName, String lastName) {
		super();
		this.firstName = firstName;
		this.lastName = lastName;
	}

  //2-4: Getters를 생성한 다음 toString 메소드도 생성해야 한다 
	public String getFirstName() {
		return firstName;
	}

	public String getLastName() {
		return lastName;
	}

  //2-5: 모든 것이 준비되었다 코드를 정리하고 저장하겠다, 이렇게 Name 클래스가 준비되었는데//2-6: PersonV2 클래스파일로..
	@Override
	public String toString() {
		return "Name [firstName=" + firstName + ", lastName=" + lastName + "]";
	}
}

-------------------------------------------------------------------------------------------------------------------
이제 v2로 변경해서 이동해보자                                                                          |
                                                                                                     V
-------------------------------------------------------------------------------------------------------------------


🌎 http://localhost:8080/v2/person 사이트 화면 ==>



{
  "name": {
    "firstName": "Bob",
    "lastName": "Charlie"
  }
}
-------------------------------------------------------------------------------------------------------------------
보다시피 지금 응답이 새 구조로 들어오고 있다 
name이 firstName과 lastName으로 분류되었다





이번 시간에는 브레이킹 체인지가 일어날 경우, 
API 버전 관리가 고려할 수 있는 솔루션 중 하나라는 사실을 다뤄봤다 
REST API의 버전 관리를 구현하는 데 여러 가지 옵션이 있다는 사실도 짚어봤는데 
URI 버전 관리를 다루는 것으로 시작했었다

Versioning REST API = Options

● URI Versioning - Twitter                                                                  _____________________________________
  ■ http://localhost:8080/v1/person                                                           localhost:8080/v2/person
  ■ http://localhost:8080/v2/person                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                              {
                                                                                                "name":{
                                                                                                  "firstName": "BOb",
                                                                                                  "lastName": "Charlie"
                                                                                                }
                                                                                              }

URI 버전 관리의 경우, 다른 버전에 대해 다른 URL을 사용했는데 
v1의 경우에 URL에 v1을 사용했으며, v2의 경우 URL에 v2를 사용했다
따라서 소비자가 원하는 특정 버전에 따라 올바른 URL을 열어서 API의 특정 버전을 사용할 수 있다
다음 수업에서는 다른 옵션을 살펴보겠다
