

이번 단계부터는 우리 애플리케이션의 외관과 느낌에 약간 집중해보겠다 

--------------------------------------------------------------------------------------------

Welcome in28minutes
Your Todos are [Todo [id=1, username=in28minutes, description=Learn AWS, targetdDate=2025-04-23, done=false], Todo [id=1, username=in28minutes, description=Learn DevOps, targetdDate=2026-04-23, done=false], Todo [id=1, username=in28minutes, description=Learn Full Stack Development, targetdDate=2027-04-23, done=false]]

--------------------------------------------------------------------------------------------

지금은 위에처럼 페이지 외관이 별로 좋지 않지?

이제 우리는 이걸 적절한 HTML 테이블에 표시할 거고, 페이지 형식을 좀 더 다듭어 보겠다 

<html>
  <head>
    <title>
    	List Todos Page
    </title>
  </head>
  <body>
  		<div>Welcome ${name}</div> 
  		<div>Your Todos are ${todos}</div>
  </body>
</html>

지금까지 우리는 모델에서 온 값들을 표시하기 위해 표현 언어를 사용해 왔다 
표현 언어는 간단한 것들을 표시하는 데 사용한다 
그럼 우리는 값을 표현하기 위해 컨트롤러에서 모델에 값을 넣을 때 표현 언어를 사용했다 
모든 정적 콘텐츠와 모든 하드코딩된 콘텐츠는 HTML 태그에서 오는 것들이다 
이렇게 <html>, <head>, <title>, <body>, <div> 등이 있다 이 모든 것은 HTML 태그이다
지금까지 모든 동적 콘텐츠는 Expression Language(표현 언어)였다

⚫ JSTL의 필요성

하지만 우리가 동적 콘텐츠를 중심으로 더욱 복잡한 걸 하고 싶은 경우가 상당히 많다
예를 들어, 이 Todo는 컨트롤러에서 유입되는 값들의 동적 리스트이다 
너는 그걸 테이블에 나열하고 싶다고 해보자
그걸 하려면 Expression Language(표현 언어)만으로는 충분하지 않겠지

그 부분에서 우리는 JSTL 태그를 사용한다 

JSTL을 사용하기 위해서 우린 몇 가지 의존성을 pom.xml에 추가해야 한다 
먼저 그걸 해보자 pom.xml로 가서 의존성 몇 개 추가해보자 그럼 tomcat-embed-jasper바로 아래에 의존성을 추가해보자

-------------------------------------------------------------------

⏺ pom.xml 파일


...
	<dependencies>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	
	
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>	

    <!--<dependency>를 추가하고 평소처럼 <goroupId>를 넣는다 그리고<artifactId>를 넣자, 우린 의존성 2개를 추가해야 하고, 그럼 이걸 다시 복사하자-->
    <!--그럼 지금 의존성 2개를 추가하고 있고 첫 번째 의존성은 JSTL API의존성이고, 두 번째는 JSTL구현 의존성이다 의존성은 jakarta.servlet.jsp.jstl이다 그리고 artifactId는 jakarta.servlet.jsp.jstl.api다 여기 오탈자를 내지 않도록 조심해라 오탈자가 있으면 pom.xml에 오류가 나기 때문이다-->
    <!--정확하게 의존성을 입력했는지 확인하고 다른 의존성도 확인해보자 지금한 이건 JSTL API이고, JSTL 구현물도 사용하려고 한다 구현물은 org.eclipse.jetty고 artifactId는 glassfish-jstl이다 저장해주자-->
		<!--저장을 마치면 모든 오류가 사라지는게 보일 것이다, 우리가 의존성을 추가하자마자 Maven이 그 의존성을 다운로드하는 걸 볼 수 있다 완료했으면 서버를 껐다 다시 시작해야 적용이 된다-->
    <dependency>
			<groupId>jakarta.servlet.jsp.jstl</groupId>
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
			<version>3.0.0</version>
		</dependency>
		
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>glassfish-jstl</artifactId>
			<version>11.0.20</version>
		</dependency>

</dependencies>
....

-------------------------------------------------------------------

