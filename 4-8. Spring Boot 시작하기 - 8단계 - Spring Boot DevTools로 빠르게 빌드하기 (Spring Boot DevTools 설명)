
Build Faster with Spring Boot DevTools

• Increase developer productivity
• Why do you need to restart the server manually for every code change?
• Remember: For pom.xml dependenct changes, you will need to restart server manually

이전 몇 단계에선 애플리케이션을 빠르게 빌드하는 데 도움이 되는 세 가지 Spring Boot 기능을 알아봤다
첫 번째는 Spring Initializer였고 두 번째는 Spring Boot Starter Project 세 번째는 Auto Configuration이였다
지금부터 알아보는 네 번째 기능은 바로 Spring Boot DevTools이다

• Increase developer productivity
DevTools를 사용하면 개발자의 생산성을 높일 수 있다 
애플리케이션을 빌드할 때면 아주 빠르게 빌드하길 바란다 개발자의 생산성은 정말 중요하다
• Why do you need to restart the server manually for every code change?
Spring Boot DevTools는 다음과 같이 묻는다, 코드를 변경할 때마다 왜 수동으로 서버를 재시작해야 할까?
자동으로 서버를 다시 시작하고 코드 변경사항을 적용하는 건 어떨까?

그럼, 실제로 Spring Boot DevTools를 간단하게 살펴보자, Spring Boot를 사용할 수 있는 방식으로 DevTools를 사용하려면 pom.xml에 추가해야 한다
추가해야 할 것은 Spring Boot Devtools다, 

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
		</dependency>
pom.xml에 써주고 기다리면 다운로드가 완료되고 프로젝트가 설정된다
이후 CourseController클래스로 이동하겠다 안에 Course List가 정의되어 있는데
여기서 localhost:8080/courses를 새로 고침하면 이러한 Course가 표시된다
[{"id":1,"name":"Learn AWS","author":"in28minutes"},{"id":2,"name":"Learn DevOps","author":"in28minutes"}]

지금부터는 CourseController클래스 내용을 조금 변경해 보곘다


----------------------------------------------------------------------------------------------------------------


⏺ CourseController2 클래스파일



package com.springstudy.springboot.learnspringboot;

import java.util.*;

import org.springframework.web.bind.annotation.*;

@RestController                 
public class CourseController2 {
	
	@RequestMapping("/courses")
	public List<Course> retrieveAllCourses (){
		
		//1: 새 코스를 추가해 보겠다 Learn Azure를 추가한다 id는 3이다 이 변경사항을 저장하자 마자 Console에는 다시 시작이 실행되고 있다
		//다시 시작은 자동으로 트리거된다 그리고 http://localhost:8080/courses 다시들어가 보면 변경된 기능이 표시되는 것을 확인할 수 있다 //1-1: http://localhost:8080/courses 아래로..
		//2: 메소드나 클래스를 추가하려고 한다면 여기를 변경하고 여기에서 오류 없이 변경하고 저장만 하면된다 그리고 마법이 일어난 걸 확인하면 된다 //2-1: 다시 http://localhost:8080/courses 접속..
    return Arrays.asList(
				new Course(1, "Learn AWS", "in28minutes"),
				new Course(2, "Learn DevOps", "in28minutes"),
				new Course(3, "Learn Azure", "in28minutes"),
        new Course(4, "Learn GCP", "in28minutes")
				);
	}
	
}

--------------------------------------------------

⏺ http://localhost:8080/courses

[
{
"id": 1,
"name": "Learn AWS",
"author": "in28minutes"
},
{
"id": 2,
"name": "Learn DevOps",
"author": "in28minutes"
},
{
"id": 3,
"name": "Learn Azure",
"author": "in28minutes"
}
]

//1-1 : 따라서 Learn Azure도 표시된다

이제 코드 변경사항을 테스트하는 작업이 정말 쉬워졌다 그럼 또하나의 기능을 추가해 보자//2: 다시 클래스파일로...

  |
  V
//2-1: 변경사항이 자동으로 적용되고 쉽게 테스트할 수 있다
[
{
"id": 1,
"name": "Learn AWS",
"author": "in28minutes"
},
{
"id": 2,
"name": "Learn DevOps",
"author": "in28minutes"
},
{
"id": 3,
"name": "Learn Azure",
"author": "in28minutes"
},
{
"id": 4,
"name": "Learn GCP",
"author": "in28minutes"
}
]
----------------------------------------------------------------------------------------------------------------





이 단계에선 Spring Boot DevTools를 알아봤다
Spring Boot DevTools의 목표는 개발자의 생산성을 높이는 것이다 
왜 코드를 변경할 때마다 수동으로 서버를 다시 시작해야 할까?
Spring Boot DevTools의 의존성을 추가하고 나면 java 파일이나 property 파일을 변경하는 경우 확인할 수 있다
Spring Boot DevTools는 애플리케이션의 다시 시작을 자동으로 트리거하므로 수동으로 서버를 다시 시작하지 않아도 된다

• Remember: For pom.xml dependenct changes, you will need to restart server manually
한 가지 정말 중요하게 기억할 점은 pom.xml을 변경하는 경우이다
pom.xml여기에서 모든 의존성을 정의하는데, 현재 pom.xml에서 정의한 것은
<artifactId>spring-boot-starter-web</artifactId> 과 devtools, starter-test가 정의되어 있다, pom.xml에서 하나라도 변경하면 
애플리케이션을 수동으로 중지했다가 시작해야 한다
Spring Boot DevTools는 pom.xml의 변경사항을 처리할 수 없다 
하지만 대다수 다른파일, 예를 들어 property파일, view 파일, java 파일의 경우 이러한 모든 변경에도 더 이상 수동으로 서버를 다시 시작하지 않아도 된다
