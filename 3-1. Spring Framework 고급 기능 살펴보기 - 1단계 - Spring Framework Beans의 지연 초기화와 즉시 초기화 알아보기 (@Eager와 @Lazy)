

Exploring Lazy Initialization of Spring Beans


● Default initialization for Spring Beans: Eager
● Eager initialization is recommended:
 ■ Errors in the configuration are discovered immediately at application startup
● However, you can configure beans to be lazily initialized using Lazy anotation:
 ■ NOT recommended (AND) Not frequently used
● Lazy annotation:
 ■ Can be used almost everywhere @Component and @Bean are used
 ■ Lazy-resolution proxy will be injected instead of actual dependency
 ■ Can be used on Configuration (@Configuration) class:
  ▢ All @Bean methods within the @Configuration will be lazily initialized


이번 단계는 Spring Bean의 지연 초기화를 살펴보겠다

● Default initialization for Spring Beans: Eager
Spring Bean의 기본 초기화는 즉시 초기화이다 무슨 의미일까?

간단한 예시를 만들어 보겠다

-------------------------------------------------------------------------------------------


⏺ LazyInitializationLauncherApplication 클래스파일


package com.example.demo.d1;

import org.springframework.context.annotation.*;
import org.springframework.stereotype.*;

//1: 여기 Bean 몇 가지를 여기에 만들 것이다 @Component적고 ClassA라고 클래스를 만든다
@Component
class ClassA {
	
}
//그리고 이 클래스를 사용할 다른 컴포넌트를 만들것이다 ClassB라 쓴 다음, ClassB에 초기화 로직이 있다고 해보자
@Component
@Lazy //2: Lazy라고 써서 임포트한다 그리고 다시 실행 //실행결과 초기화 논리가 이제는 실행되지 않고, Bean 초기화가 일어나지 않는다 이제 ClassB Bean은 시작할 때 초기화되지 않는다
	  //그렇다면 ClassB Bean은 언제 초기화될까?	ClassB Bean을 사용할 때 초기화된다 //3:메인메소드로...
class ClassB {
	//의존성을 정의해야 한다 ClassB에서 수행되는 초기화 논리이다
	private ClassA classA;
	
	//여기에 모든 자동 작업이 나타날 것이다 생성자를 만들겠다 ublic ClassB (ClassA classA) {this.classA = classA; } 입력 
	public ClassB (ClassA classA) {
		//여기에 다른 논리를 많이 둘 수도 있다, 여기에 복잡한 초기화 논리를 다양하게 둘 수도 있다 
		/* 현재까지 정리 :
		이곳의 설정은 간단하다 Bean을 생성하고 있는 ClassA가 있고 
		ClassA Bean을 사용하여 초기화하는 ClassB가 있다 
		*/
		//이곳에 syso도 적어주자 그리고 자바실행을해보자
		
		//Logic
		System.out.println("Some Initialization logic");
		this.classA = classA; 
		/*출력결과 ==>
		Some Initialization logic
		..
		...
		classA
		classB
		이 Spring 컨텍스트에서 Some Initialization logic이 실행되는게 보인다
		여기서는 ClassB Bean을 사용하고 있지 않는다 Spring 컨텍스트를 실행하면 초기화가 자동으로 일어났다
		Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println); 이줄을 주석처리해서 더 잘 드러나게 하겠다
		*/
		
		/*Arrays.stream 주석 처리후 실행결과 ==>
	    Some Initialization logic
	    지금은 Spring 컨텍스트를 시작하고 있고, 그러면 초기화가 자동으로 일어날 것이다
	    Some Initialization logic이 자동으로 호출되는게 보인다
	    Bean을 로드하지 않고 Bean에서 메서드를 호출하지 않더라도 자동으로 Bean이 초기화된다
	    */
		//2: 어떻게 하면 그렇게 되지 않을까? 이떄 @Lazy 어노테이션을 이용할 수 있다 //ClassB위에 @Lazy어노테이션 달기...
	}
	
	//3-1: syso를 적어준다 다 만들었으면 다시 아래로.. //3-2: 메인메서드..
	public void doSomething() {
		System.out.println("Do Something");
	}
}


@Configuration
@ComponentScan
public class LazyInitializationLauncherApplication {
	
	public static void main(String[] args) {

		try(var context = 
				new AnnotationConfigApplicationContext
				(LazyInitializationLauncherApplication.class)) {
			
			//3: 예를 들어 여기에 뭔가 출력한다고 해보자 syso에 "Initialization of context is completed"라고 쓴다음, 컨텍스트 초기화가 완료된 후에 누군가가 이 Bean을 사용한다 가정해보자
			//context.getBean이라 쓰고, ClassB Bean에 액세스 하려 하니 사용하려 하는 ClassB.class를 입력하고 메소드를 호출할 것이니 다른 메서드 생성을 위해 다시위로//3-1: doSomething()메서드로..
			//3-2: getBean(ClassB.class)에서 .doSomething();이라 입력하겠다 실행해보면 잘 작동 할것이다
			System.out.println("Initialization of context is completed");
			context.getBean(ClassB.class).doSomething();
			/*실행결과 ==>
			Initialization of context is completed
			Some Initialization logic
			Do Something
			초기화가 완료되었다고 입력된 다음에 보인다
			여기 Initialization of context is completed가 나타나고 이 이후에 Bean이 로드된다(Some Initialization logic) 사용되기 바로 전에 로드되지 사용하려고 할 때 로드되는 것이다
			ClassB를 참조하거나 사용하려 할 때면 이 Bean이 로드되는데 ( context.getBean(ClassB.class).doSomething(); ), 이게 Lazy어노테이션의 기능이다
			*/
			
			/*Lazy어노테이션?
			Lazy 어노테이션 설명 : Indicates whether a bean is to be lazily initialized.
			May be used on any class directly or indirectly annotated with @Component or on methods annotated with @Bean. 
			Lazy어노테이션은 Bean을 지연하여 초기화할지 여부를 나타낸다 @Component를 사용하는 모든 클래스나 Bean에 어노테이션을 적용한 모든 메서드에서 Lazy를 사용할 수 있다
			*/
			
//			Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);

		}
	} 
}

-------------------------------------------------------------------------------------------


지연 초기화와 관련된 자세한 정보를 조금 더 살펴보자 
앞서 살펴본 것처럼 Spring Bean의 기본 초기화는 즉시 초기화이다
@Lazy 어노테이션을 지정하지 않는 한, 각각의 Spring Bean은 시작할 때 즉시 초기화된다
● Eager initialization is recommended:
❗ 어떤걸 추천하냐고? 항상 즉시 초기화를 추천한다 ❗ 왜냐고?
 ■ Errors in the configuration are discovered immediately at application startup
 Spring 구성에 오류가 있을 경우 즉시 초기화를 사용하면 애플리케이션이 시작할 때 오류를 바로 확인할 수 있다
● However, you can configure beans to be lazily initialized using Lazy anotation:
앞서 봤던 것처럼 Lazy 어노테이션을 사용해 Bean이 지연 초기화되도록 구성할 수 있다
 ■ NOT recommended (AND) Not frequently used
 권장되지는 않고, 자주 사용되지도 않는다
● Lazy annotation:
Lazy 어노테이션과 관련된 자세한 정보를 조금 더 살펴보자
 ■ Can be used almost everywhere @Component and @Bean are used
 @Component와 @Bean이 사용되는 거의 모든 곳에서 사용할 수 있다 
 ■ Lazy-resolution proxy will be injected instead of actual dependency
 지연 해결 프록시가 실제 의존성 대신 주입된다
 ■ Can be used on Configuration (@Configuration) class:
 그리고 @Configuration 클래스에서도 사용할 수 있다
  ▢ All @Bean methods within the @Configuration will be lazily initialized
  @Configuration 클래스에 Lazy를 적용하면 @Configuration 클래스 내의 모든 @Bean 메서드가 지연 초기화된다

Lazy를 자주 사용할 필요는 없다 복잡한 초기화 논리가 많고 
시작 시 지연시키고 싶지 않은 상황이라면 Spring Bean의 지연 초기화를 고려해 볼 수 있다

❗ 하지만 이 점은 꼭 기억해야 하는데, 지연 초기화를 사용하는 경우 애플리케이션이 시작될 때 Spring 구성 오류는 발견되지 않는다 ❗
런타임 오류가 발생하겠지
