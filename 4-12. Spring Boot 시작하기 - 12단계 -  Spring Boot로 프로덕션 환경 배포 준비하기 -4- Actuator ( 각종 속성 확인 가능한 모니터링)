
Monitor Application using Spring Boot Actuator
                                                                                                                                                                                                                                    
● Monitor and manage your application in your production                                                                                                                                                                                                                                    
● Provides a number of endpoints:                                                                                                                                                                                                                                    
 ■ beans - Complete list of Spring beans in your app                                                                                                                                                                                                                                    
 ■ health - Application health information                                                                                                                                                                                                                                    
 ■ metrics - Application metrics                                                                                                                                                                                                                                    
 ■ mappings - Details around Request Mappings                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                                    
                                                                                                                                                                                                                          
                                                                                                                                                                                                                                    

이번에는 프로덕션 환경에서 사용 가능한 애플리케이션의 또 다른 중요 기능인 모니터링을 알아보자
애플리케이션의 백그라운드에서 어떤 일이 발생하는지 확인하고 싶을 수 있다 
이를 가능하게 하는 Spring Boot 기능이 Spring Boot Actuator이다 

● Monitor and manage your application in your production
이를 통해 프로덕션 단계의 애플리케이션을 모니터링하고 관리할 수 있다 
● Provides a number of endpoints:
Spring Boot Actuator는 여러 개의 엔드포인트를 제공한다 
 ■ beans - Complete list of Spring beans in your app   
애플리케이션에 포함된 모든 Spring beans를 이 beans 엔드포인트를 사용하여 확인할 수 있다
 ■ health - Application health information  
health 엔드 포인트로는 애플리케이션의 상태 정보를 확인할 수 있다, 애플리케이션이 제대로 작동하는지 보는 것이 health이다
 ■ metrics - Application metrics     
애플리케이션과 관련된 여러 가지 metrics도 제공된다, metrics 엔드포인트를 사용하면 되고 
 ■ mappings - Details around Request Mappings    
애플리케이션에서 설정된 모든 요청 매핑 관련 세부 사항을 확인하려면 mappings 엔드포인트를 사용하면 된다

Spring Boot Actuator에서 노출하는 다른 엔드포인트도 많은데 여기에는 몇 가지 선별해서 표시했다
그럼 Spring Boot Actuator는 어떻게 사용할까?
늘 그랬듯 아주 쉽다 

pom.xml로 가보자
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

이것을 복사하고 spring-boot-starter-actuator로 변경한후 저장한다
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-actuator</artifactId>            <=== 생성
		</dependency>

다운로드가 끝나면 이제 위로 이동하여 자바 애플리케이션을 실행할 수 있다
상단의 실행버튼에서 LearnSpringBootApplication을 선택하여 실행해 보겠다
...
...
2024-04-01T19:47:27.060+09:00[0;39m [32mDEBUG[0;39m [35m8544[0;39m [2m---[0;39m [2m[learn-spring-boot] [  restartedMain][0;39m [2m[0;39m[36mo.s.b.a.ApplicationAvailabilityBean     [0;39m [2m:[0;39m Application availability state ReadinessState changed to ACCEPTING_TRAFFIC
애플리케이션이 잘 실행되고 있다 
그리고 브라우저로 이동하여 URL localhost:8080/actuator를 입력해 보겠다

{
  "_links": {
    "self": {
      "href": "http://localhost:8080/actuator",
      "templated": false
    },
    "health": {
      "href": "http://localhost:8080/actuator/health",
      "templated": false
    },
    "health-path": {
      "href": "http://localhost:8080/actuator/health/{*path}",
      "templated": true
    }
  }
}

JSON응답이 이와 같이 표시된다 현재 URL로 연결되는 self 링크가 있고 health URL로 연결되는 health 링크가 있다
health URL http://localhost:8080/actuator/health를 클릭하면
{
"status": "UP"
}
애플리케이션의 상태가 표시된다
애플리케이션의 상태는 현재 'UP'으로 실행 중임을 나타낸다 
기본적으로 Actuator를 실행하면 health 엔드포인트만 노출한다 
Actuator의 더 많은 기능을 사용하고 싶다면 application.properties에서 기능을 사용 설정해야 한다

----------------------------------------------------------------------------------------------------------------------

⏺ application.properties 파일

logging.level.org.springframework=debug
spring.profiles.active=dev

currency-service.url=http://default1.in28minutes.com
currency-service.username=defaultusername
currency-service.key=defaultkey

#application.properties로 이동하여, 추가 엔드포인트를 설정하는 것이기 때문에 다음과 같이 입력한다 
#management.endponints.web.exposure.include=*
#이렇게하면 Actuator에서 제공하는 모든 엔드포인트가 노출된다 애플리케이션이 시작된 것을 확인할 수 있다

management.endponints.web.exposure.include=*

----------------------------------------------------------------------------------------------------------------------

이제 다시 URL로 와서 Actuator URL을 새로 고침한다, 

{
  "_links": {
  "self": {
    "href": "http://localhost:8080/actuator",
    "templated": false
  },
  "beans": {
    "href": "http://localhost:8080/actuator/beans",
    "templated": false
  },
  "caches-cache": {
    "href": "http://localhost:8080/actuator/caches/{cache}",
    "templated": true
  },
  "caches": {
    "href": "http://localhost:8080/actuator/caches",
    "templated": false
  },
  "health": {
    "href": "http://localhost:8080/actuator/health",
    "templated": false
  },
  "health-path": {
    "href": "http://localhost:8080/actuator/health/{*path}",
    "templated": true
  },
  "info": {
    "href": "http://localhost:8080/actuator/info",
    "templated": false
  },
  "conditions": {
    "href": "http://localhost:8080/actuator/conditions",
    "templated": false
  },
  "configprops": {
    "href": "http://localhost:8080/actuator/configprops",
    "templated": false
  },
  "configprops-prefix": {
    "href": "http://localhost:8080/actuator/configprops/{prefix}",
    "templated": true
  },
  "env": {
    "href": "http://localhost:8080/actuator/env",
    "templated": false
  },
  "env-toMatch": {
    "href": "http://localhost:8080/actuator/env/{toMatch}",
    "templated": true
  },
  "loggers": {
    "href": "http://localhost:8080/actuator/loggers",
    "templated": false
  },
  "loggers-name": {
    "href": "http://localhost:8080/actuator/loggers/{name}",
    "templated": true
  },
  "heapdump": {
    "href": "http://localhost:8080/actuator/heapdump",
    "templated": false
  },
  "threaddump": {
    "href": "http://localhost:8080/actuator/threaddump",
    "templated": false
  },
  "metrics-requiredMetricName": {
    "href": "http://localhost:8080/actuator/metrics/{requiredMetricName}",
    "templated": true
  },
  "metrics": {
    "href": "http://localhost:8080/actuator/metrics",
    "templated": false
  },
  "sbom": {
    "href": "http://localhost:8080/actuator/sbom",
    "templated": false
  },
  "sbom-id": {
    "href": "http://localhost:8080/actuator/sbom/{id}",
    "templated": true
  },
  "scheduledtasks": {
    "href": "http://localhost:8080/actuator/scheduledtasks",
    "templated": false
  },
  "mappings": {
    "href": "http://localhost:8080/actuator/mappings",
    "templated": false
  }
  }
}

localhost:8080/actuator를 새로고침 했다, 이제 엔드포인트가 많이 표시되어 있다 .
여기 표시된 엔드포인트를 모두 알아야 할 필요는 없다 


중요한 몇 가지만 간단히 살펴보겠다 
Spring Boot Actuator beans를 보면 로드된 모든 Spring beans가 표시된다 

{
"contexts": {
"learn-spring-boot": {
"beans": {
"endpointCachingOperationInvokerAdvisor": {
"aliases": [],
"scope": "singleton",
"type": "org.springframework.boot.actuate.endpoint.invoker.cache.CachingOperationInvokerAdvisor",
"resource": "class path resource [org/springframework/boot/actuate/autoconfigure/endpoint/EndpointAutoConfiguration.class]",
"dependencies": [
"org.springframework.boot.actuate.autoconfigure.endpoint.EndpointAutoConfiguration",
"environment"
]
},

....
.....

"courseController2": {
"aliases": [],
"scope": "singleton",
"type": "com.springstudy.springboot.learnspringboot.CourseController2",
"resource": "file [C:\\Users\\LG\\Downloads\\learn-spring-boot\\learn-spring-boot\\target\\classes\\com\\springstudy\\springboot\\learnspringboot\\CourseController2.class]",
"dependencies": []
},
앞서 course리소스를 만들었다 
앞서 courseController를 만들었다 이에 대한 bean이 있다

"org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration": {
"aliases": [],
"scope": "singleton",
"type": "org.springframework.boot.autoconfigure.web.servlet.DispatcherServletAutoConfiguration$DispatcherServletRegistrationConfiguration",
"dependencies": []
},
"preserveErrorControllerTargetClassPostProcessor": {
"aliases": [],
"scope": "singleton",
"type": "org.springframework.boot.autoconfigure.web.servlet.error.ErrorMvcAutoConfiguration$PreserveErrorControllerTargetClassPostProcessor",
"resource": "class path resource [org/springframework/boot/autoconfigure/web/servlet/error/ErrorMvcAutoConfiguration.class]",
"dependencies": []
},
DispatcherServlet에 대한 bean도 있고 ErrorMVC설정에 관한 bean도 있다 
따라서 자동 설정된 모든 것에 대해서는 여기 표시된 bean을 확인하면 된다 
특정 항목이 자동 설정되었는지 아닌지를 확인하려면 이 방법을 사용해도 된다 

지금까지 localhost:8080:/actuator/beans를 확인했다 이제 닫고 
health는 이미 확인했지? health는 기본적으로 노출되므로 항상 표시된다

다음 살펴볼 엔드포인트는 configprops로, 주소는 localhost:8080/actuator/configprops이다
열어 보면 애플리케이션의 application.properties에서 설정할 수 있는 모든 항목이 표시된다
이 강의 코스에서 만든 항목도 표시되는데

"currencyServiceConfiguration": {
  "prefix": "currency-service",
  "properties": {
    "url": "******",
    "key": "******",
    "username": "******"
  },
  "inputs": {
      "url": {
      "value": "******",
      "origin": "class path resource [application-dev.properties] - 3:22"
    },
      "key": {
      "value": "******",
      "origin": "class path resource [application-dev.properties] - 5:22"
    },
      "username": {
      "value": "******",
      "origin": "class path resource [application-dev.properties] - 4:27"
    }
  }
},

currencyServiceConfiguration를 만들었었다, 따라서 currencyService의 값을 설정할 수 있다
"prefix": "currency-service",
  "properties": {
    "url": "******",
    "key": "******",
    "username": "******"
설정 방법은 currency-service.url, currency-service.key, currency-service.username을 사용한다
여기 표시된 값이 현재 값이다 값 dev.in28minutes.com은 application=dev.properties에서 사용한다
이와 마찬가지로 다른 값도 확인할 수 있다


/actuator에서 env로 이동하면 env 엔드 포인트가 표시된다
env 엔드포인트는 환경에 관한 세부 사항을 모두 표시한다 

"propertySources": [
{
    "name": "server.ports",
      "properties": {
      "local.server.port": {
      "value": "8080"
      }
  }
},
8080포트를 사용하고 

"name": "systemProperties",
"properties": {
  "java.specification.version": {
  "value": "17"
},
"sun.jnu.encoding": {
  "value": "******"
},
  "java.class.path": {
  "value": "******"
},
자바 17을 사용한다 사용중인 인코딩도 표시되며 
애플리케이션에 설정된 클래스 경로도 표시된다, 또한 실행되는 환경에 관한 많은 세부 사항이 여기에 표시된다
자바, JVM, Tomcat에 관한 정보 등 모든 사항이 여기에 표시된다


마지막으로 살펴볼 것은 metrics이다
열어보면 반환된 metrics 목록이 표시된다 

{
  "names": [
  "application.ready.time",
  "application.started.time",
  "disk.free",
  "disk.total",
  "executor.active",
  "executor.completed",
  "executor.pool.core",
  "executor.pool.max",
  "executor.pool.size",
  "executor.queue.remaining",
  "executor.queued",
  "http.server.requests",
  "http.server.requests.active",
  "jvm.buffer.count",
  "jvm.buffer.memory.used",
  "jvm.buffer.total.capacity",
  "jvm.classes.loaded",
  "jvm.classes.unloaded",
  "jvm.compilation.time",
  "jvm.gc.live.data.size",
  "jvm.gc.max.data.size",
  "jvm.gc.memory.allocated",
  "jvm.gc.memory.promoted",
  "jvm.gc.overhead",
  "jvm.gc.pause",
  "jvm.info",
  "jvm.memory.committed",
  "jvm.memory.max",
  "jvm.memory.usage.after.gc",
  "jvm.memory.used",
  "jvm.threads.daemon",
  "jvm.threads.live",
  "jvm.threads.peak",
  "jvm.threads.started",
  "jvm.threads.states",
  "logback.events",
  "process.cpu.time",
  "process.cpu.usage",
  "process.start.time",
  "process.uptime",
  "system.cpu.count",
  "system.cpu.usage",
  "tomcat.sessions.active.current",
  "tomcat.sessions.active.max",
  "tomcat.sessions.alive.max",
  "tomcat.sessions.created",
  "tomcat.sessions.expired",
  "tomcat.sessions.rejected"
  ]
}
 "application.started.time",애플리케이션 시작 시간 "disk.free", 디스크 여유 공간 "disk.total", 총공간이 표시되고
  "executor.pool.core", "executor.pool.max", "executor.pool.size", 풀에 관한 metric도 확인할 수 있다
 "jvm.buffer.count",.... 또한 JVM 관련 matrics도 여러 개 표시된다
  "http.server.requests",라는 특정 metric를 살펴 보겠다 복사해서 /  "http.server.requests",를 붙여넣는다

그러면 http.server.requests에 관한 모든 metrics가 표시된다

  "name": "http.server.requests",
  "baseUnit": "seconds",
  "measurements": [
    {
      "statistic": "COUNT",
      "value": 5
    },
    {
      "statistic": "TOTAL_TIME",
      "value": 0.1927512
    },
    {
      "statistic": "MAX",
      "value": 0
    }
],
충분하게 표시된다 요청개수는 5이고, 이러한 요청을 처리하는 총 실행 시간은 0.1927512이며, 요청 처리하는 최대 시간은 0이다

이제 다시 actuator로 가자, 이 URL 페이지를 열 번 정도 새로 고침 한다 그리고 다시 http://localhost:8080/actuator/metrics/http.server.requests 특정 metrics로 들어온다
  "name": "http.server.requests",
  "baseUnit": "seconds",
  "measurements": [
    {
      "statistic": "COUNT",
      "value": 22
    },
    {
      "statistic": "TOTAL_TIME",
      "value": 0.2520088
    },
    {
      "statistic": "MAX",
      "value": 0.004971
    }
],
그러면 요청 개수가 증가한 것을 확인할 수 있다 (22)
따라서 이것은 애플리케이션으로 들어오는 요청의 횟수를 추적하는 것이다


실제로 이것은 애플리케이션과 애플리케이션이 실행되는 환경에 관한 많은 정보를 제공한다 
애플리케이션에 관한 여러 가지 metrics를 얻을 수 있고 
자바 런타임 또는 JVM과 애플리케이션이 실행되는 Tomcat서버에 관한 metrics도 다양하게 얻을 수 있다

Actuator에 관해 기억해야 할 중요한 한 가지는 여러 엔드포인트를 사용 설정하면 
해당 정보를 수집한다는 것이고 정보를 많이 수집하면 CPU와 메모리가 많이 사용된다는 점이다
일반적으로 엔드포인트를 포함하려면 명시적으로 설정해야 한다 

-------------------------------------------------------------------------------------------------------------

⏺ application.properties 파일

logging.level.org.springframework=debug
spring.profiles.active=dev

currency-service.url=http://default1.in28minutes.com
currency-service.username=defaultusername
currency-service.key=defaultkey

#예를 들어 health, metrics를 설정할 수 있는데 이것이 사용하는 유일한 엔드포인트라고 예를 들어보자.. 이것을 사용 설정
management.endpoints.web.exposure.include=health,metrics

-------------------------------------------------------------------------------------------------------------

actuator로 다시 오면 이러한 엔드포인트만 현재 노출되어 있다

{
  "_links": {
    "self": {
    "href": "http://localhost:8080/actuator",
    "templated": false
  },
    "health": {
    "href": "http://localhost:8080/actuator/health",
    "templated": false
  },
    "health-path": {
    "href": "http://localhost:8080/actuator/health/{*path}",
    "templated": true
  },
    "metrics-requiredMetricName": {
    "href": "http://localhost:8080/actuator/metrics/{requiredMetricName}",
    "templated": true
  },
    "metrics": {
    "href": "http://localhost:8080/actuator/metrics",
    "templated": false
  }
  }
}

health와 metrics이다






이 단계에선 프로덕션 환경의 애플리케이션을 모니터링하는 방법을 알아봤다 
사용할 수 있는 Spring Boot 기능은 Spring Boot Actuator이다
