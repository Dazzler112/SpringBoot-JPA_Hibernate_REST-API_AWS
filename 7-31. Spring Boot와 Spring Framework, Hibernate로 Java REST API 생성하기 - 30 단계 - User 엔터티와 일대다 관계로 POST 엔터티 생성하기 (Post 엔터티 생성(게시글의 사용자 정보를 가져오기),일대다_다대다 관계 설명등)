

Social Media Application - Resources & Methods
                                                                                                  i localhost:8080/users
● Users REST API                                                                                   [
  ■ Retrieve all Users                                                                                -  {
    ○ GET/users                                                                                             id: 1,
  ■ Create a User                                                                                           name: "Adam",
    ○ POST/users                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
  ■ Retrieve one User                                                                                    },                                                                                                                                                                           
    ○ Get/users/{id}->/users/1                                                                        -  {
  ■ Delete a User                                                                                           id: 2,
    ○ DELETE/users/{id}->/users/1                                                                           name: "Eve",
  ■ Posts REST API                                                                                          birthDate: "2024-05-18T17:16:30.057+0000"
    ○ Retrieve all posts for a User                                                                      },                                    
      ◦ GET/users/{id}/posts                                                                        -  {
    ○ Create a post for a User                                                                              id: 3,
      ◦ POST/users/{id}/posts                                                                               name: "Jack",
                                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                        }                                       
                                                                                                    ] 

이 과정 앞부분에서 사용자 REST API를 많이 생성했는데, 
모든 사용자 검색, 사용자 생성, 단일 사용자 검색 사용자 삭제였지,
  ■ Posts REST API
이제 게시물 REST API 생성이 남아 있다 
    ○ Retrieve all posts for a User  
      ◦ GET/users/{id}/posts 
REST API를 생성해서 특정 사용자에 대해 모든 게시물을 검색할 수 있게 하려는 것이다
    ○ Create a post for a User
     ◦ POST/users/{id}/posts 
특정 사용자에 대한 게시물 생성도 가능하게 하려고 한다 



이를 위해 먼저 게시물 엔터티부터 생성해보자
.user패키지에서 새 클래스를 생성한다 Post라고 하고 Finish를 누른다
Post는 엔터티지?
-----------------------------------------------------------------------------------------------------------------------------


⏺ Post 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.user;

import jakarta.persistence.*;

//1:@Entity를 넣어준다
@Entity
public class Post {

  //1-1: 여기에는 ID를 넣어야겠다, 각 게시물에 정수 id를 저장하려고 하는데, 
  //이것과 비슷하게 정수 id를 넣을 거니까 User()클래스에 있는 부분을 복사해 여기 붙여 넣겠다
	@Id
	@GeneratedValue
	private Integer id;

  //1-2: 이제 @GeneratedValue 정수를 추가했으니 설명을 저장해야겠지
  //private String description을 입력한다
  private String description;

  //1-3: 다음 게터와 세터를 생성해보자 (alt + shift + s => 숏컷) 게터 세터 생성으로 가서 모두선택, 생성
  	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

  //1-4: 이제 toString 메서드도 생성하겠다
	@Override
	public String toString() {
		return "Post [id=" + id + ", description=" + description + "]";
	}

  //이제 Post 엔터티가 준비됐다 
}

-----------------------------------------------------------------------------------------------------------------------------

애플리케이션이 재시작할 때까지 기다리고 
H2 콘솔로 가서 로그인한다
----------------------------------------------------------------------------------------------------------------------------------


🌎 localhost:8080/h2-console 사이트화면 ==>

  ______________________
 |English             v |  Preferences  Tools  Help
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  _______________________________________________________________________
 |  Login (파바탕)                                                        | 
 |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
 |                    ______________________________________________     |
 |  Saved Settings:  | Generic H2 (Embedded)                    v   |    |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |
 |                    ______________________________   ____   ______     |
 |  Setting Name :   | Generic H2 (Embedded)        | |Save| |Remove|    |
 |                     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾   ‾‾‾‾‾‾     |
 |  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   |
 |                    ____________________________________________       |
 |  Driver Class:    |org.h2.Driver                               |      |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       |
 |                    ____________________________________________       |
 |  JDBC URL:        |jdbc:h2:mem:testdb                          |      |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       |
 |                    ________________________________                   |
 |  User Name:       |sa                              |                  |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   | 
 |                    ________________________________                   |
 |  Password:        | Generic H2 (Embedded)          |                  |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   |
 |                    _________   _________________                      |                               
 |                   | Connect | | Test Connection |                     |                                       
 |                    ‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

----------------------------------------------------------------------------------------------------------------------------------
Connect 클릭                                        |
                                                    V
----------------------------------------------------------------------------------------------------------------------------------
H2 Database 안 ==>

🔋 jdbc:h2:mem:testdb
 + 💷 POST
 + 💷 USER_DETAILS
 + 📁 INFORMATION_SCHEMA
 + 🎫 Sequences
 + 👪 Users
 i H2 2.2.224 (2023-09-17)


여기에도 POST가 보인다
----------------------------------------------------------------------

⏺ H2 Console 
 _____   ______________   _______________   _______
| Run | | Run Selected | | Auto complete | | Clear | SQL statement:
 ‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾ 
 ___________________________________________________________________________________
| SELECT * FROM POST                                                       |
|                                                                                   |                     
|                                                                                   |                     
|                                                                                   |                     
|                                                                                   |                    
|                                                                                   |                     
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
SELECT * FROM TODO;
 ____________________________
|ID       | DESCRIPTION      |   
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
(no row, 2 ms)
 ____
|Edit|
 ‾‾‾‾
----------------------------------------------------------------------------------------------------------------------------------

지금은 아무 게시물도 없다

이제 게시물을 사용자에게 매핑해야겠지?

----------------------------------------------------------------------------------------------------------------------------------


⏺ Post 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import jakarta.persistence.*;

@Entity
public class Post {

	@Id
	@GeneratedValue
	private Integer id;
	
	private String description;

  //2: 여기에서 게시물이 특정 사용자에게 매핑된다 private User user를 입력하고 User 엔터티로 돌아가 보겠다 //2-1: User 클래스파일로..
  //2-2: Post에서는 관계가 반대이다 다대일이 되겠지 (@ManyToOne 사용) 그러면 import문을 가져온다 jakarta.persistence.ManyToOne을 가져오는게 보인다 Post클래스와 User클래스를 저장하고
	@ManyToOne
	private User user;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Override
	public String toString() {
		return "Post [id=" + id + ", description=" + description + "]";
	}
	
}

----------------------------------------------


⏺ User 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.time.*;
import java.util.*;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;

@Entity(name = "user_details")
public class User {

	protected User() {
		
	}
	
	@Id
	@GeneratedValue
	private Integer id;
	
	@Size(min=2, message = "Name should have atleast 2 characters")
//	@JsonProperty("user_name")
	private String name;
	
	@Past(message = "Birth Date should be in the past")
//	@JsonProperty("birth_date")
	private LocalDate birthDate;

//2-1: User 엔터티에도 게시물 목록을 저장해야겠지? 여기에 private List<Post> posts를 입력한다 import문을 정리 Java.util.List를 가져오겠다
//사용자와 게시물에 관계를 설정해야겠지, 사용자는 게시물과 어떤 관계일까? 사용자 1명은 여러 게시물을 둘 수 있으니까 일대다 관계이다
//그러니까 사용자는 게시물과 일대다 관계를 맺는다 (@OneToMany 어노테이션을 사용) ctrl+1을 눌러 jakarta.persistence.OnetoMany를 가져오기하면 된다
//OneToMany 안에 속성으로 매핑하기를 설정할 수 있다, 이 특정 관계를 가지는 필드를 설정할 수 있다, 그러면 mappedby= 다음에 Post에서 이 관계를 가지는 필드가 뭔지 넣어준다 사용자 필드다
//그럼 Post클래스의 private User user;의 "user"를 넣어 Post에서 해당 특정 관계를 갖는 필드로 저장한다 //2-2: Post 클래스파일로..
	@OneToMany(mappedBy = "user")
	private List<Post> posts;

	public User(Integer id, String name, LocalDate birthDate) {
		super();
		this.id = id;
		this.name = name;
		this.birthDate = birthDate;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public LocalDate getBirthDate() {
		return birthDate;
	}

	public void setBirthDate(LocalDate birthDate) {
		this.birthDate = birthDate;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", name=" + name + ", birthDate=" + birthDate + "]";
	}
	
}

----------------------------------------------------------------------------------------------------------------------------------

User Bean을 REST API 응답의 일부분으로 사용하고 있고, Post Bean도 REST API 응답의 일부분으로 사용하고 있다 
User Bean에 대해 게시물을 JSON 응답에 포함시키려는 것은 아니다 


----------------------------------------------------------------------------------------------------------------------------------


⏺ User 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.time.*;
import java.util.*;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;

@Entity(name = "user_details")
public class User {

	protected User() {
		
	}
	
	@Id
	@GeneratedValue
	private Integer id;
	
	@Size(min=2, message = "Name should have atleast 2 characters")
//	@JsonProperty("user_name")
	private String name;
	
	@Past(message = "Birth Date should be in the past")
//	@JsonProperty("birth_date")
	private LocalDate birthDate;

  //3: 그러니 여기에 @JsonIgnore를 넣겠다, @JsonIgnore에 com.fasterxml.jacksno.annotation.JsonIgnore를 넣어서 가져오기한다
  //Post에도 User에 대해 같은 어노테이션을 추가하겠다 //3-1: Post클래스파일로..
	@OneToMany(mappedBy = "user")
	@JsonIgnore
	private List<Post> posts;
	
	public User(Integer id, String name, LocalDate birthDate) {
		super();
		this.id = id;
		this.name = name;
		this.birthDate = birthDate;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public LocalDate getBirthDate() {
		return birthDate;
	}

	public void setBirthDate(LocalDate birthDate) {
		this.birthDate = birthDate;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", name=" + name + ", birthDate=" + birthDate + "]";
	}
	
}

----------------------------------------------------


⏺ Post 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.user;

import jakarta.persistence.*;

@Entity
public class Post {

	@Id
	@GeneratedValue
	private Integer id;
	
	private String description;

  //3-1: Post안의 User에 JsonIgnore를 넣고, User 클래스의 posts에도 넣고있다 , 여기에 추가로 @ManyToOne 어노테이션을 커스터마이징 하겠다
  //()를 넣고 Ctrl + space를 누르면 팝업창이 열리면서 값을 설정할 수 있는 여러 가지 속성이 보인다, 
  /* fetch 속성??
  우리에게 필요한 속성은 fetch인데 여기 있는 fetch속성은 관계가 지연 로딩되는지 아니면 즉시 로딩되는지 결정한다 ( (Optional) Whether the association should be lazilyloaded or must be eagerly fetched. The EAGERstrategy is a requirement on the persistence provider runtime thatthe associated entity must be eagerly fetched. The LAZYstrategy is a hint to the persistence provider runtime. ) 
  그게 무슨 뜻일까? 동일한 쿼리에서 게시물과 사용자의 세부 정보를 검색하려고 한다면 EAGER fetch를 요청하는 건데, 게시물 세부 정보와 함께 가져오도록 요청하면 사용자 세부 정보도 같이 가져오게 된다 그게 다대일 관계에서 기본값이다
  */
  //하지만 우린 LAZY fetch타입을 사용할 것이다 그러면 fetch 타입으로 FetchType.LAZY를 넣어준다 = 게시물을 가져올 때 게시물에 연결된 사용자 세부 정보도 가져오려는 건 아니다. 저장하고
	@ManyToOne(fetch = FetchType.LAZY)
	@JsonIgnore
	private User user;
	
	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Override
	public String toString() {
		return "Post [id=" + id + ", description=" + description + "]";
	}
	
}

----------------------------------------------------------------------------------------------------------------------------------

이제 application.properties로 가서 프로퍼티 하나를 더 추가할 것이다

----------------------------------------------------------------------------------------------------------------------------------

⏺ application.properties 파일


spring.application.name=restful-web-services

logging.level.org.springframework=info

management.endpoints.web.exposure.include=*

spring.datasource.url=jdbc:h2:mem:testdb

spring.jpa.defer-datasource-initialization=true

#4: 이렇게 입력한다 spring.jpa.show-sql=true 이 설정의 용도는 뭘까? 이걸 저장하고 실제 일어나는 마법을 확인해보자
spring.jpa.show-sql=true

----------------------------------------------------------------------------------------------------------------------------------

콘솔로 가 보면 여기 쿼리 몇 개가 출력된 게 보이지?
Hibernate: drop table if exists post cascade 
Hibernate: drop table if exists user_details cascade 
Hibernate: drop sequence if exists post_seq
Hibernate: drop sequence if exists user_details_seq
Hibernate: create sequence post_seq start with 1 increment by 50
Hibernate: create sequence user_details_seq start with 1 increment by 50
Hibernate: create table post (id integer not null, user_id integer, description varchar(255), primary key (id))
Hibernate: create table user_details (birth_date date, id integer not null, name varchar(255), primary key (id))
Hibernate: alter table if exists post add constraint FKa3biitl48c71riii9uyelpdhb foreign key (user_id) references user_details
...
이 쿼리등은 show-sql=true로 설정한 결과이다
이제 이 부분을 텍스트 파일로 복사할 것이다 
-----------------------------------------------------------------
create sequence post_seq start with 1 increment by 50

create sequence user_details_seq start with 1 increment by 50

create table post 
(id integer not null, user_id integer, description varchar(255), primary key (id))

create table user_details 
(birth_date date, id integer not null, name varchar(255), primary key (id))
-----------------------------------------------------------------
로그를 텍스트 파일로 복사하고 포맷을 정리했다
create table user_details 
전에 봤던 것처럼, user_details라는 테이블이 생성된다 ID와 생년월일, 이름이 있다 
여기서 기본 키는 id 필드이다

create table post
방금 post 엔터티를 추가했고, post 테이블도 생성되는 것을 알 수 있다 
게시물 테이블을 생성하는데 ID와 설명이 있고 기본 키는 id이다
여기서 흥미로운 것은 user_id 필드이다(user_id integer), 게시물은 사용자와 연결하겠지?
그래서 이 user_id 필드가 유용하다 왜 user_id 필드가 Post에 생성될까?

	@ManyToOne(fetch = FetchType.LAZY)
	@JsonIgnore
	private User user;

Post에 user 객체를 생성했고,

	@OneToMany(mappedBy = "user")
	@JsonIgnore
	private List<Post> posts;

User 클래스에서 관계의 소유자는 user라고 했지? (mappedBy = "user")

그래서 user_id 열이 Post 클래스에 생성된 것이다
user_id 열은 게시물과 특정 사용자를 연결할 때 사용될 것이다


또 알 수 있는 게 이 시퀀스 생성인데
여기에 시퀀스가 2개가 있지
create sequence post_seq start with 1 increment by 50
create sequence user_details_seq start with 1 increment by 50
user_details_seq와 post_seq이다 

user_details_seq는 User에 @GenerateValue id를 추가했기 떄문이고
--------------------------------
@Entity(name = "user_details")
public class User {

	protected User() {
		
	}
	
	@Id
	@GeneratedValue
	private Integer id;
--------------------------------

post_seq는 
--------------------------------
@Entity
public class Post {

	@Id
	@GeneratedValue
	private Integer id;
	
	private String description;

	@ManyToOne(fetch = FetchType.LAZY)
	@JsonIgnore
	private User user;
--------------------------------
Post에서도 id 필드에 GeneratedValue를 추가했기 때문이다

그러니까 이 시퀀스 2개는 새 게시물이나 새 사용자를 생성할 때 ID 값 생성에 사용된다




H2 콘솔로 넘어가서 동작 중인 관계를 살펴보자
----------------------------------------------------------------------------------------------------------------------------------


🌎 localhost:8080/h2-console 사이트화면 ==>

  ______________________
 |English             v |  Preferences  Tools  Help
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  _______________________________________________________________________
 |  Login (파바탕)                                                        | 
 |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
 |                    ______________________________________________     |
 |  Saved Settings:  | Generic H2 (Embedded)                    v   |    |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |
 |                    ______________________________   ____   ______     |
 |  Setting Name :   | Generic H2 (Embedded)        | |Save| |Remove|    |
 |                     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾   ‾‾‾‾‾‾     |
 |  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   |
 |                    ____________________________________________       |
 |  Driver Class:    |org.h2.Driver                               |      |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       |
 |                    ____________________________________________       |
 |  JDBC URL:        |jdbc:h2:mem:testdb                          |      |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       |
 |                    ________________________________                   |
 |  User Name:       |sa                              |                  |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   | 
 |                    ________________________________                   |
 |  Password:        | Generic H2 (Embedded)          |                  |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   |
 |                    _________   _________________                      |                               
 |                   | Connect | | Test Connection |                     |                                       
 |                    ‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

----------------------------------------------------------------------------------------------------------------------------------
Connect를 누르면                                                                   |
                                                                                  V
----------------------------------------------------------------------------------------------------------------------------------
H2 Database 안 ==>

🔋 jdbc:h2:mem:testdb
 - 💷 POST
   + 🛢 ID
   + 🛢 USER_ID
   + 🛢 DESCRIPTION
   + 🔠 indexes
 + 💷 USER_DETAILS
 + 📁 INFORMATION_SCHEMA
 + 🎫 Sequences
 + 👪 Users
 i H2 2.2.224 (2023-09-17)


여기에도 POST가 보인다
POST에 ID와 DESCRIPTION, USER_ID가 나온다 
----------------------------------------------------------------------

⏺ H2 Console 
 _____   ______________   _______________   _______
| Run | | Run Selected | | Auto complete | | Clear | SQL statement:
 ‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾ 
 ___________________________________________________________________________________
|                                                                                   |
|                                                                                   |                     
|                                                                                   |                     
|                                                                                   |                     
|                                                                                   |                    
|                                                                                   |                     
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
 ____
|Edit|
 ‾‾‾‾
----------------------------------------------------------------------------------------------------------------------------------
이제 POST 테이블에 데이터를 한번 생성해보겠다 


data.sql로 가서

----------------------------------------------------------------------------------------------------------------------------------

⏺ data.sql 파일



INSERT INTO user_details(id,birth_date,name)
VALUES (10001, current_date(), 'Ranga');

INSERT INTO user_details(id,birth_date,name)
VALUES (10002, current_date(), 'Ravi');

INSERT INTO user_details(id,birth_date,name)
VALUES (10003, current_date(), 'Sathish');

--5: INSERT INTO post()를 입력하고 id, description, user_id를 넣어준다, 
-- 삽입하려는 값은 게시물 ID이지 게시물 ID가 20001부터 시작한다고 해보겠다 DESCRITION은 'I want to learn AWS' 그리고 사용자 ID는 위에 있는 값 중 하나겠지 10001을 넣고 세미콜론으로 마무리하겠다
INSERT INTO post(id,description,user_id)
VALUES (20001, 'I want to learn AWS', 10001);

--게시물을 몇 개 더 추가하겠다, 20002, DevOps를 배우고 ,
INSERT INTO post(id,description,user_id)
VALUES (20002, 'I want to learn DevOps', 10001);

--20003, 20004를 넣는다 여기는 둘 다 10002로 바꿔준다 AWS 자격증을 따고싶다, 멀티클라우드를 배우고싶다로 바꾸겠다 이걸 저장하고
INSERT INTO post(id,description,user_id)
VALUES (20003, 'I want to Get AWS Certified', 10002);

INSERT INTO post(id,description,user_id)
VALUES (20004, 'I want to learn Multi Cloud', 10002);


----------------------------------------------------------------------------------------------------------------------------------

오류가 없다 전부 괜찮아 보인다 
바로 H2 콘솔을 새로고침
----------------------------------------------------------------------------------------------------------------------------------


🌎 localhost:8080/h2-console 사이트화면 ==>

  ______________________
 |English             v |  Preferences  Tools  Help
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  _______________________________________________________________________
 |  Login (파바탕)                                                        | 
 |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
 |                    ______________________________________________     |
 |  Saved Settings:  | Generic H2 (Embedded)                    v   |    |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |
 |                    ______________________________   ____   ______     |
 |  Setting Name :   | Generic H2 (Embedded)        | |Save| |Remove|    |
 |                     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾   ‾‾‾‾‾‾     |
 |  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   |
 |                    ____________________________________________       |
 |  Driver Class:    |org.h2.Driver                               |      |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       |
 |                    ____________________________________________       |
 |  JDBC URL:        |jdbc:h2:mem:testdb                          |      |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       |
 |                    ________________________________                   |
 |  User Name:       |sa                              |                  |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   | 
 |                    ________________________________                   |
 |  Password:        | Generic H2 (Embedded)          |                  |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   |
 |                    _________   _________________                      |                               
 |                   | Connect | | Test Connection |                     |                                       
 |                    ‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

----------------------------------------------------------------------------------------------------------------------------------
Connect를 누르면                                                                   |
                                                                                  V
----------------------------------------------------------------------------------------------------------------------------------
H2 Database 안 ==>

🔋 jdbc:h2:mem:testdb
 - 💷 POST
   + 🛢 ID
   + 🛢 USER_ID
   + 🛢 DESCRIPTION
   + 🔠 indexes
 + 💷 USER_DETAILS
 + 📁 INFORMATION_SCHEMA
 + 🎫 Sequences
 + 👪 Users
 i H2 2.2.224 (2023-09-17)


여기에도 POST가 보인다
POST에 ID와 DESCRIPTION, USER_ID가 나온다 
----------------------------------------------------------------------

⏺ H2 Console 
 _____   ______________   _______________   _______
| Run | | Run Selected | | Auto complete | | Clear | SQL statement:
 ‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾ 
 ___________________________________________________________________________________
| SELECT * FROM POST                                                                |
|                                                                                   |                     
|                                                                                   |                     
|                                                                                   |                     
|                                                                                   |                    
|                                                                                   |                     
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
SELECT * FROM TODO;
 _____________________________________________
| ID  	| DESCRIPTION                | USER_ID|
----------------------------------------------
| 20001	|I want to learn AWS         |10001   |
----------------------------------------------
| 20002	|I want to learn DevOps      |10001   |
----------------------------------------------
| 20003	|I want to Get AWS Certified |10002   |
----------------------------------------------
| 20004	|I want to learn Multi Cloud |10002   |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

(4 row, 3 ms)
 ____
|Edit|
 ‾‾‾‾
----------------------------------------------------------------------------------------------------------------------------------
POST를 살펴볼까? 좋다
이제 게시물 세부 정보를 가져올 수 있다 





이번 단계에선 Post 엔터티를 생성했는데 
사용자 세부 정보와 관계도 설정했고 Post 엔터티에 데이터도 채웠다 
이제 다음 단계에선 게시물 관련해서 REST API를 만들어 보겠다
