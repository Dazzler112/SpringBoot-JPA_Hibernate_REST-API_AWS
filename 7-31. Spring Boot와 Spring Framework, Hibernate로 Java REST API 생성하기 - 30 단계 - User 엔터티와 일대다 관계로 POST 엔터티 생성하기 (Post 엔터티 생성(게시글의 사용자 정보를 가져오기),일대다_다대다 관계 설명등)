

Social Media Application - Resources & Methods
                                                                                                  i localhost:8080/users
● Users REST API                                                                                   [
  ■ Retrieve all Users                                                                                -  {
    ○ GET/users                                                                                             id: 1,
  ■ Create a User                                                                                           name: "Adam",
    ○ POST/users                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
  ■ Retrieve one User                                                                                    },                                                                                                                                                                           
    ○ Get/users/{id}->/users/1                                                                        -  {
  ■ Delete a User                                                                                           id: 2,
    ○ DELETE/users/{id}->/users/1                                                                           name: "Eve",
  ■ Posts REST API                                                                                          birthDate: "2024-05-18T17:16:30.057+0000"
    ○ Retrieve all posts for a User                                                                      },                                    
      ◦ GET/users/{id}/posts                                                                        -  {
    ○ Create a post for a User                                                                              id: 3,
      ◦ POST/users/{id}/posts                                                                               name: "Jack",
                                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                        }                                       
                                                                                                    ] 

이 과정 앞부분에서 사용자 REST API를 많이 생성했는데, 
모든 사용자 검색, 사용자 생성, 단일 사용자 검색 사용자 삭제였지,
  ■ Posts REST API
이제 게시물 REST API 생성이 남아 있다 
    ○ Retrieve all posts for a User  
      ◦ GET/users/{id}/posts 
REST API를 생성해서 특정 사용자에 대해 모든 게시물을 검색할 수 있게 하려는 것이다
    ○ Create a post for a User
     ◦ POST/users/{id}/posts 
특정 사용자에 대한 게시물 생성도 가능하게 하려고 한다 



이를 위해 먼저 게시물 엔터티부터 생성해보자
.user패키지에서 새 클래스를 생성한다 Post라고 하고 Finish를 누른다
Post는 엔터티지?
-----------------------------------------------------------------------------------------------------------------------------


⏺ Post 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.user;

import jakarta.persistence.*;

//1:@Entity를 넣어준다
@Entity
public class Post {

  //1-1: 여기에는 ID를 넣어야겠다, 각 게시물에 정수 id를 저장하려고 하는데, 
  //이것과 비슷하게 정수 id를 넣을 거니까 User()클래스에 있는 부분을 복사해 여기 붙여 넣겠다
	@Id
	@GeneratedValue
	private Integer id;

  //1-2: 이제 @GeneratedValue 정수를 추가했으니 설명을 저장해야겠지
  //private String description을 입력한다
  private String description;

  //1-3: 다음 게터와 세터를 생성해보자 (alt + shift + s => 숏컷) 게터 세터 생성으로 가서 모두선택, 생성
  	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

  //1-4: 이제 toString 메서드도 생성하겠다
	@Override
	public String toString() {
		return "Post [id=" + id + ", description=" + description + "]";
	}

  //이제 Post 엔터티가 준비됐다 
}

-----------------------------------------------------------------------------------------------------------------------------

애플리케이션이 재시작할 때까지 기다리고 
H2 콘솔로 가서 로그인한다
----------------------------------------------------------------------------------------------------------------------------------


🌎 localhost:8080/h2-console 사이트화면 ==>

  ______________________
 |English             v |  Preferences  Tools  Help
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  _______________________________________________________________________
 |  Login (파바탕)                                                        | 
 |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
 |                    ______________________________________________     |
 |  Saved Settings:  | Generic H2 (Embedded)                    v   |    |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |
 |                    ______________________________   ____   ______     |
 |  Setting Name :   | Generic H2 (Embedded)        | |Save| |Remove|    |
 |                     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾   ‾‾‾‾‾‾     |
 |  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   |
 |                    ____________________________________________       |
 |  Driver Class:    |org.h2.Driver                               |      |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       |
 |                    ____________________________________________       |
 |  JDBC URL:        |jdbc:h2:mem:testdb                          |      |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾       |
 |                    ________________________________                   |
 |  User Name:       |sa                              |                  |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   | 
 |                    ________________________________                   |
 |  Password:        | Generic H2 (Embedded)          |                  |
 |                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   |
 |                    _________   _________________                      |                               
 |                   | Connect | | Test Connection |                     |                                       
 |                    ‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

----------------------------------------------------------------------------------------------------------------------------------
Connect 클릭                                        |
                                                    V
----------------------------------------------------------------------------------------------------------------------------------
H2 Database 안 ==>

🔋 jdbc:h2:mem:testdb
 + 💷 POST
 + 💷 USER_DETAILS
 + 📁 INFORMATION_SCHEMA
 + 🎫 Sequences
 + 👪 Users
 i H2 2.2.224 (2023-09-17)


여기에도 POST가 보인다
----------------------------------------------------------------------

⏺ H2 Console 
 _____   ______________   _______________   _______
| Run | | Run Selected | | Auto complete | | Clear | SQL statement:
 ‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾ 
 ___________________________________________________________________________________
| SELECT * FROM POST                                                       |
|                                                                                   |                     
|                                                                                   |                     
|                                                                                   |                     
|                                                                                   |                    
|                                                                                   |                     
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
SELECT * FROM TODO;
 ____________________________
|ID       | DESCRIPTION      |   
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
(no row, 2 ms)
 ____
|Edit|
 ‾‾‾‾
----------------------------------------------------------------------------------------------------------------------------------

지금은 아무 게시물도 없다

이제 게시물을 사용자에게 매핑해야겠지?

----------------------------------------------------------------------------------------------------------------------------------


⏺ Post 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import jakarta.persistence.*;

@Entity
public class Post {

	@Id
	@GeneratedValue
	private Integer id;
	
	private String description;

  //2: 여기에서 게시물이 특정 사용자에게 매핑된다 private User user를 입력하고 User 엔터티로 돌아가 보겠다 //2-1: User 클래스파일로..
  //2-2: Post에서는 관계가 반대이다 다대일이 되겠지 (@ManyToOne 사용) 그러면 import문을 가져온다 jakarta.persistence.ManyToOne을 가져오는게 보인다 Post클래스와 User클래스를 저장하고
	@ManyToOne
	private User user;

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	@Override
	public String toString() {
		return "Post [id=" + id + ", description=" + description + "]";
	}
	
}

----------------------------------------------


⏺ User 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.time.*;
import java.util.*;

import jakarta.persistence.*;
import jakarta.validation.constraints.*;

@Entity(name = "user_details")
public class User {

	protected User() {
		
	}
	
	@Id
	@GeneratedValue
	private Integer id;
	
	@Size(min=2, message = "Name should have atleast 2 characters")
//	@JsonProperty("user_name")
	private String name;
	
	@Past(message = "Birth Date should be in the past")
//	@JsonProperty("birth_date")
	private LocalDate birthDate;

//2-1: User 엔터티에도 게시물 목록을 저장해야겠지? 여기에 private List<Post> posts를 입력한다 import문을 정리 Java.util.List를 가져오겠다
//사용자와 게시물에 관계를 설정해야겠지, 사용자는 게시물과 어떤 관계일까? 사용자 1명은 여러 게시물을 둘 수 있으니까 일대다 관계이다
//그러니까 사용자는 게시물과 일대다 관계를 맺는다 (@OneToMany 어노테이션을 사용) ctrl+1을 눌러 jakarta.persistence.OnetoMany를 가져오기하면 된다
//OneToMany 안에 속성으로 매핑하기를 설정할 수 있다, 이 특정 관계를 가지는 필드를 설정할 수 있다, 그러면 mappedby= 다음에 Post에서 이 관계를 가지는 필드가 뭔지 넣어준다 사용자 필드다
//그럼 Post클래스의 private User user;의 "user"를 넣어 Post에서 해당 특정 관계를 갖는 필드로 저장한다 //2-2: Post 클래스파일로..
	@OneToMany(mappedBy = "user")
	private List<Post> posts;

	public User(Integer id, String name, LocalDate birthDate) {
		super();
		this.id = id;
		this.name = name;
		this.birthDate = birthDate;
	}

	public Integer getId() {
		return id;
	}

	public void setId(Integer id) {
		this.id = id;
	}

	public String getName() {
		return name;
	}

	public void setName(String name) {
		this.name = name;
	}

	public LocalDate getBirthDate() {
		return birthDate;
	}

	public void setBirthDate(LocalDate birthDate) {
		this.birthDate = birthDate;
	}

	@Override
	public String toString() {
		return "User [id=" + id + ", name=" + name + ", birthDate=" + birthDate + "]";
	}
	
}

----------------------------------------------------------------------------------------------------------------------------------

User Bean을 REST API 응답의 일부분으로 사용하고 있고, Post Bean도 REST API 응답의 일부분으로 사용하고 있다 
User Bean에 대해 게시물을 JSON 응답에 포함시키려는 것은 아니다 
