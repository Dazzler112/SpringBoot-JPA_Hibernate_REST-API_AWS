

지난 단계에서 우린 Spring Security를 시작했고 
이번 단계에선 우리만의 사용자 이름과 패스워드로 Spring Security를 설정해보자

루트 패키지로 가서 새로 클래스를 만들 것이다 이름은 SpringSecurityConfiguration라고 해주자
패키지는 com.firstapplication.springboot.myfirstwebapp.security 여기로 해주자 (이미 루트패키지로 만들었다면 ctrl+1로 move package)


-------------------------------------------------------------------------------------------------------------



⏺ SpringSecurityConfiguration 클래스파일



package com.firstapplication.springboot.myfirstwebapp.security;

import org.springframework.context.annotation.*;

//1:여기에 @Configuration을 추가해보자 여기에 수많은 Spring Bean의 설정이 포함될 거고 우린 여기서 직접 Bean을 만들 것이다 그래서 이름을 @Configuratino이라고 했다
//여기서 우린 수많은 Spring Bean을 만들고 그걸 리턴할 것이다
@Configuration
public class SpringSecurityConfiguration {
  //LDAP or Database
  //In Memory

  //1-1: 일반적으로 너가 사용자 이름과 패스워드를 저장하려 할 때는 LDAP 또는 최소한 데이터베이스를 사용한다, 여기서 우린 간단히 인메모리 설정자를 사용할 것이다
  //그럼 InMemory라고 입력하고 Ctrl + Space를 누르면 InMemoryUserDetailsManager가 보일거고, 우리는 그걸 설정하려고 한다
  /*
  InMemoryUserDetailsManager를 ctrl+클릭으로 눌러보면 
	public InMemoryUserDetailsManager(UserDetails... users) {
		for (UserDetails user : users) {
			createUser(user);
		}
	}
  이런 생성자가 보이고, 거기에 사용자 세부정보를 넣을 수 있다
  */
  //그러면 우리는 UserDetails 객체를 생성하고 InMemoryUserDetailsManager 클래스를 구축해서 그걸 리턴할 것이다 그럼 시작해보자

  //1-2: 우리는 여기서 모든 Bean을 만들 거고 그럼 @Bean public이라고 하고 InMemoryUserDetailsManager를 리턴할 것이다,
  //그리고 createUserDetailsManager라고 할 거고, 너는 ConfigureUserDetails 등 원하는 대로 이름을 정할 수 있다
  @Bean
	public InMemoryUserDetailsManager createUserDetailsManager() {
		//1-3: 그리고 여기서 UserDetails를 만들 수 있다, UserDetails를 ctrl+클릭 을 해보면 그게 인터페이스인걸 알 수 있다 ( public interface UserDetails extends Serializable { )
    //그럼 직접 UserDetails의 인스턴스를 생성할 수 없다, 그래서 빌더를 사용하려고 한다,그걸 빌드하는 데 사용할 수 있는 User 클래스가 있고
    //그럼 먼저 withDefaultPasswordEncoder()부터 사용해보자, 보면 이게 도태된 걸 알 수 있는데 ( The method withDefaultPasswordEncoder() from the type User is deprecated ) 도태되었기 때문에 일반적으론 사용하지 말아야 한다, 모든 패스워드가 인코딩 되는 게 바람직하기 때문이다
    //지금은 우선 이걸로 시작하고, 나중에 우린 그걸 BCryptPasswordEncoder()로 대체할 것이다, 그럼 withDefaultPasswordEncoder()를 쓰고, .username()이라 하고 원하는 사용자 이름을 넣어 볼까? in28minutes라고 하자
    //그럼 패스워드는 뭐라고 할까? dummy라고 하자 dummy가 패스워드고, roles를 지정하려고 한다 그럼 이 사람이 USER와 ADMIN이라고 해보자
    //그럼 이 username과 password는 인증이고 그것들은 로그인하는 데 사용하는 자격증명이다, roles이것들은 애플리케이션 안에 있는 역할들이다 특정한 작업을 하기 위해선 일정한 역할이 필요할 것이다, 여기서 그런 역할들을 설정할 수 있다 그리고 .build()라고 할 수 있다
    //그리고 ctrl+1을 누르고 구문을 새로운 지역 변수에 지정을 선택하고 이걸 userDetails라고 할 수 있다
    @Bean
	  public InMemoryUserDetailsManager createUserDetailsManager() {
		UserDetails userDetails = User.-withDefaultPasswordEncoder()- //1-5: 여기 도태 경고가 하나 나오는데, 그걸 제외하면, 우리는 사용자를 설정할 수 있었다 이게 작동하는지 확인해보자
		.username("in28minutes")
		.password("dummy")
		.roles("USER", "ADMIN")
		.build();

    //이렇게 userDetails 객체를 만들었고 

    //1-4: 그럼 가서 InMemoryUserDetailsManager를 만들어보자
    //그럼 return이라고 하고 new InMemoryUserDetailsManager()라고 하고 userDetails 넣어준다, 그리고 임포트를 정리한다 //1-5: -withDefaultPasswordEncoder()- 여기로..
		return new InMemoryUserDetailsManager(userDetails);
	}
  
}

-------------------------------------------------------------------------------------------------------------
                                                                                    |
                                                                                    V
-------------------------------------------------------------------------------------------------------------

http://localhost:8087/logout 페이지화면 ==>


                        Are you sure you 
                        want to log out?
                       
                        _________________
                       |     Log Out     |
                        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------------------------
이렇게 Spring Security에서 기본적으로 로그아웃 URL을 제공하는 걸 볼 수 있다          |
                                                                                 V
-------------------------------------------------------------------------------------------------------------

http://localhost:8087/login 페이지 화면 ==>


                                              Please sign in
                                               __________________________
                                              |in28minutes               |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
                                               __________________________
                                              |●●●●●                     |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                               __________________________
                                              |         Sign in          |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------------------------
그럼 in28minutes라고 하고 dummy라고 적은 다음 Sign in 을 눌러본다                  |
                                                                                V
-------------------------------------------------------------------------------------------------------------

http://localhost:8087 페이지화면==>


‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
in28Minutes   Home Todos                         (베이지? 바탕)                                           Logout                                            
_______________________________________________________________________________________________________________
             

              Welcome in28minutes
              Manage your todos

-------------------------------------------------------------------------------------------------------------

좋다, 우리가 한 설정이 이제 작동하고 있다 
