

지난 몇 섹션에서 우리는 REST API를 많이 만들었다
특정한 Todo 세부정보를 받거나 특정한 사용자와 관련된 모든 Todo의 세부정보를 받을 수 있다
Todo를 업데이트 하거나 삭제하는 등 아주 많은 REST API가 있지 
이 REST API들은 너가 액세스하는 데 인증이나 승인이 필요하지 않다

이번 섹션에선 REST API에 인증을 적용할 것이고 먼저 기본적인 인증을 사용해보고 
이어서 JOT 또는 JWT를 사용해서 REST API를 인증하고 승인해볼 것이다

우리가 사용할 Spring Security라는 프레임워크만을 집중적으로 다루는 별도의 섹션이 있다는 점을 꼭 기억하기 바란다
그럼 먼저 REST API에 빠르게 인증과 승인을 활성화하고 우리의 프론트엔드를 보안 REST API에 연결해보자
그럼 시작할까?

pom.xml로 갈 거고 pom.xml을 열어보자
보안을 추가하기 위해 너가 추가해야 할 내용은 간단하다
바로 Spring Boot Starter다

------------------------------------------------------------------------------------------------------------------


⏺ pom.xml



...
	<dependencies>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

    //1: 너는 spring-boot-starter-web을 복사했고, 
		<dependency>
			<groupId>org.springframework.boot</groupId>
        //1-1: 뒤에 security를 붙여주면 될 것이다, 이걸 저장하고
			<artifactId>spring-boot-starter-security</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-validation</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>

	</dependencies>

	...
------------------------------------------------------------------------------------------------------------------

그리고 애플리케이션을 중지하고 다시 시작해보자

eclipse 콘솔창에
-------------------------------------------
.s.s.UserDetailsServiceAutoConfiguration : 

Using generated security password: 83338c0f-b0b0-4e07-b053-88dfb6de9410

This generated password is for development use only. Your security configuration must be updated before running your application in production.
-------------------------------------------
여기 새로운 보안 패스워드가 프린트된 게 보이지?

그리고 Chrome으로 가서 이 API중 하나를 실행해보자

여기에 GET 요청을 전송해보자
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | GET     | ▼  |    |    http://localhost:8080/users/in28minutes/todos/1         |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |   ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   _______________     __________________      |    
☑ | Accept        | : |application/json  | x   |    XHR does not allow payload for GET request.                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |                                   
  ______________                               |                                
 ( + Add header )  🗝 Add authorization     🗑  |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                               |                                                                       
                                               |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation

                                   

--------------------------------------------------------------------------------------------------------------------------------
                                          |
                                          V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  401                (빨간 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |      ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾         |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                  |
WWW-Authenticate:	Basic realm="Realm"       |  
X-Content-Type-Options:	nosniff                   |
X-XSS-Protection:	1; mode=block             |
Cache-Control:no-cache, no-store,                 |
              max-age=0, must-revalidate          |
Pragma:	no-cache                                  |                      No Content
Expires:	0                                 |
X-Frame-Options:	DENY                      |
WWW-Authenticate:	Basic realm="Realm"       |
Content-Length:	0 byte                            |
Date:	Wed, 07 Aug 2024 06:32:26 GMT             |
Keep-Alive:	timeout=60                        |
Connection:	keep-alive                        |                                       
                                                  |                                                                                                                                                 
                                                  |                  
▶ COMPLETE REQUEST HEADERS                        |                                              
                                                  |
                                                   
--------------------------------------------------------------------------------------------------------------------------------

401을 받는 게 보인다
인증되지 않은 것이지
이제 가서 인증을 추가해보자

--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | GET     | ▼  |    |    http://localhost:8080/users/in28minutes/todos/1         |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |   ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   _______________     __________________      |    
☑ | Accept        | : |application/json  | x   |    XHR does not allow payload for GET request.                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |                                   
  ______________                               |                                
 ( + Add header )  🗝 Add authorization     🗑  |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                               |                                                                       
                                               |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation

                                   

--------------------------------------------------------------------------------------------------------------------------------
( 여기서  🗝 Add authorization 이부분을 클릭하면)
너는 가서 사용자 이름과 패스워드를 설정할 수 있고 기본 사용자 이름은 user이고, 기본 패스워드는 로그에 프린트된 패스워드이다
그럼 콘솔창에 나온걸 복사해서 붙여넣는다, 기본값으로서 사용자 ID와 패스워드가 설정되고 너는 
                                        |
                                        V
 ________________________________________________________________
|  Authorization                                              x  |
| ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
|                    _______________                             |
|              Type | Authorization |                            |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                             |
|                    ______________________                      |
|          Username |user                  |                     |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
|                    ______________________                      |
|          Password |●●●●●●●●●●●●●●●●●●●●●●|                     |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
|                    ▢ show password                             |
|                                                                |
|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
|                                        __________    _______   |
|                                       | x Cancel |  | ✔ Set |  |
|                                        ‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾   |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
여기서 Set을 클릭할 수 있지
                            |
                            V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | GET     | ▼  |    |    http://localhost:8080/users/in28minutes/todos/1         |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |   ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   _______________     __________________      |    
☑ | Accept        | : |application/json  | x   |    XHR does not allow payload for GET request.                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |  
   _______________     __________________      |    
☑ | Authorization | : |Basic dXNlcjo4MzMz| x 🗝|                            
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |
  ______________                               |                                
 ( + Add header )  🗝 Add authorization     🗑  |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                               |                                                                       
                                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation

                                   

--------------------------------------------------------------------------------------------------------------------------------

   _______________     __________________          
☑ | Authorization | : |Basic dXNlcjo4MzMz| x 🗝                            
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      
Authorization <= 이게 인증 헤더이고 기본 인증 헤더이다, 그리고 너는 Send를 클릭할 수 있지
                                          |
                                          V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  200                (초록 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |      ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾         |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Vary:	Origin                                    |
Vary:	Access-Control-Request-Method             |        {
Vary:	Access-Control-Request-Headers            |          id: 1,
X-Content-Type-Options:	nosniff                   |          username: "in28minutes",
X-XSS-Protection:	1; mode=block             |          description: "Get AWS Certified",
Cache-Control: no-cache, no-store,                |          targetDate: "2034-08-07",
               max-age=0, must-revalidate         |          done: false
Pragma:	no-cache                                  |         }
Expires:	0                                 |
X-Frame-Options:	DENY                      |
Content-Type:	application/json                  |
Transfer-Encoding: chunked                        |
Date:	Wed, 07 Aug 2024 07:07:28 GMT             |
Keep-Alive:	timeout=60                        |
Connection:	keep-alive                        |
Set-Cookie: JSESSIONID=33 B, session, HttpOnly/   |
                                                  |
▶ COMPLETE REQUEST HEADERS                        |                                              
                                                  |
                                                    lines nums  📄 copy              length: 106 bytes 
--------------------------------------------------------------------------------------------------------------------------------

그럼 이제 너는 API에 액세스할 수 있다 

지금 우리는 우리의 모든 컨트롤러와 모든 리소스가 이제 보호되고 있는 걸 알 수 있다 
너가 Spring Security를 클래스 경로에 추가하자마자 Spring Boot는 REST API에 있는 모든 리소스를 보호하기 위해
자동으로 필터를 설정할 것이다 
다음 단계에서는 그걸 맞춤화하는 작업을 할 것이고 
기본값으로서 Spring Security는 모든 REST API에 보안을 추가할 것이다
그리고 기본 패스워드는 
-------------------------------------------
.s.s.UserDetailsServiceAutoConfiguration : 

Using generated security password: 83338c0f-b0b0-4e07-b053-88dfb6de9410

This generated password is for development use only. Your security configuration must be updated before running your application in production.
-------------------------------------------
여기 프린트되지

하지만 이런 건 별로 좋지 않다 
우린 보호되어야 할 URL을 선택하려 하고, 사용자 ID와 패스워드 그리고 이런 모든 걸 우리가 지정할 수 있길 원한다

지금 사용자 이름과 패스워드를 어떻게 지정할 수 있는지 지금 바로 알아보자 

그럼 application.properties로 가보겠다

------------------------------------------------------------------------------------------------------------------


⏺ application.properties


logging.level.org.springframework=info

#2: 여기서 너는 spring.security.user.name=in28minutes라고 해줄 수 있지 
spring.security.user.name=in28minutes

#2-1: 그리고 우리가 설정하려는 패스워드는 이미 알고 있을 것이다
#spring.security.user.password= dummy 이다, 그럼 이걸 저장해보자
spring.security.user.password=dummy
------------------------------------------------------------------------------------------------------------------

그럼 기본 패스워드가 더 이상 여기 콘솔창에 프린트되지 않는게 보일거고

그리고 우리가 지금 사용할 수 있는 패스워드는 가령 Add authorization을 클릭하고 설정할 수 있지 
                                        |
                                        V
 ________________________________________________________________
|  Authorization                                              x  |
| ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
|                    _______________                             |
|              Type | Authorization |                            |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                             |
|                    ______________________                      |
|          Username |in28minutes           |                     |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
|                    ______________________                      |
|          Password |●●●●●                 |                     |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
|                    ▢ show password                             |
|                                                                |
|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
|                                        __________    _______   |
|                                       | x Cancel |  | ✔ Set |  |
|                                        ‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾   |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
사용자 이름은 in28minutes고 패스워드는 dummy지
그리고 set을 클릭한다
                                        |
                                        V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | GET     | ▼  |    |    http://localhost:8080/users/in28minutes/todos/1         |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |   ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   _______________     __________________      |    
☑ | Accept        | : |application/json  | x   |    XHR does not allow payload for GET request.                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |  
   _______________     __________________      |    
☑ | Authorization | : |Basic aW4yOG1pbnV0| x 🗝|                            
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |
  ______________                               |                                
 ( + Add header )  🗝 Add authorization     🗑  |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                               |                                                                       
                                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation

                                   

--------------------------------------------------------------------------------------------------------------------------------
그리고 너는 Send를 클릭할 수 있지 
                                  |
                                  V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  200                (초록 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |      ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾         |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Vary:	Origin                                    |
Vary:	Access-Control-Request-Method             |        {
Vary:	Access-Control-Request-Headers            |          id: 1,
X-Content-Type-Options:	nosniff                   |          username: "in28minutes",
X-XSS-Protection:	1; mode=block             |          description: "Get AWS Certified",
Cache-Control: no-cache, no-store,                |          targetDate: "2034-08-07",
               max-age=0, must-revalidate         |          done: false
Pragma:	no-cache                                  |         }
Expires:	0                                 |
X-Frame-Options:	DENY                      |
Content-Type:	application/json                  |
Transfer-Encoding: chunked                        |
Date:	Wed, 07 Aug 2024 07:43:42 GMT             |
Keep-Alive:	timeout=60                        |
Connection:	keep-alive                        |
Set-Cookie: JSESSIONID=33 B, session, HttpOnly/   |
                                                  |
▶ COMPLETE REQUEST HEADERS                        |                                              
                                                  |
                                                    lines nums  📄 copy              length: 106 bytes 
--------------------------------------------------------------------------------------------------------------------------------

성공적으로 응답을 받는 걸 알 수 있다 

하지만 앞에서 우리가 실행한 POST 요청으로 가보자,
가령 우리가 앞에서 실행한 이 /users/in28minutes/todos POST 요청을 선택해보자

--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________       ____________________________________________________________    ___________________
 | POST     | ▼  |    |    http://localhost:8080/users/in28minutes/todos           |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾       ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |   ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   _______________     __________________      |    
☑ | Accept        | : |application/json  | x   |     {                         
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |      "username": "in28minutes",
   _______________     __________________      |      "description": "Learn To Dance",
☑ | Authorization | : |Basic aW4yOG1pbnV0| x 🗝|      "targetDate": "2033-08-04",                         
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |      "done": false                                 
  ______________                               |     }                            
 ( + Add header )  🗝 Add authorization     🗑  |                                  
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                               |       
                                               |                
                                               |      
                                               |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body | ☑ Enable body evaluation

                                   

--------------------------------------------------------------------------------------------------------------------------------

이게 우리가 앞에서 만든 것이다 
Learn To Dance지, http://localhost:8080/users/in28minutes/todos이고
Send를 클릭하면 
                                  |
                                  V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  403                (빨간 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |      ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾         |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
X-Content-Type-Options:	nosniff                   |     {
X-XSS-Protection:	1; mode=block             |       timestamp: "2024-08-07T07:51:04.131+00:00",
Cache-Control: no-cache, no-store,                |       status: 403,
               max-age=0, must-revalidate         |       error: "Forbidden",
Pragma:	no-cache                                  |       message: "Forbidden",
Expires:	0                                 |       path: "/users/in28minutes/todos"
X-Frame-Options:	DENY                      |     }
Vary:	Origin                                    | 
Vary:	Access-Control-Request-Method             | 
Vary:	Access-Control-Request-Headers            | 
Content-Type:	application/json                  |          
Transfer-Encoding:	chunked                   |                       
Date:	Wed, 07 Aug 2024 07:51:04 GMT             |
Keep-Alive:	timeout=60                        |
Connection:	keep-alive                        |
                                                  |
▶ COMPLETE REQUEST HEADERS                        |                                              
                                                  |
                                                    lines nums  📄 copy              length: 134 bytes 
--------------------------------------------------------------------------------------------------------------------------------

그럼 403이 나오지 Forbidden이라 나온다 

이 요청이 실패한 이유는 소위 CSRF, 즉 크로스 사이트 요청 위조 때문이다 
우리는 Spring Security에 관한 별도의 섹션에서 CSRF에 대해 자세히 알아볼 거고 

지금은 우선 CSRF를 비활성화할 것이다 
그리고 CSRF를 비활성화하기 위해 여기로 가서 새로운 Spring Security설정 파일을 만들거고
그럼 너는 RestfulWebServices로 가자
RestfulWebServicesApplication.java로 가면 여기 우리의 설정이 있다 

ctrl + n 을 눌러 새로운 클래스를 만들 것이다 
이름은 BasicAuthenticationSecurityConfiguration라고 해주자, 그리고 이걸 패키지에 넣을 거고 
그럼 package의 맨뒤에 .basic이라고 해주자, 그리고 이제 Finish를 누른다

우린 이걸 설정 파일로 만드려고 하고 
------------------------------------------------------------------------------------------------------------------


⏺ BasicAuthenticationSecurityConfiguration.java



package com.in28minutes.rest.webservices.restfulwebservices.basic;

//3: 여기에 Spring 설정을 약간 넣을 것이다, 그럼 이게 설정 파일이 될 거고
@Configuration
public class BasicAuthenticationSecurityConfiguration {

}

------------------------------------------------------------------------------------------------------------------

여기 우리가 설정하려는 건 Spring Security 필터 체인이다
요청이 들어오면 Spring Security는 일련의 필터를 이용해서 그걸 확인하려고 시도하지
우린 지금 그 필더들을 설정하려고 한다 

------------------------------------------------------------------------------------------------------------------


⏺ BasicAuthenticationSecurityConfiguration.java



package com.in28minutes.rest.webservices.restfulwebservices.basic;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.web.*;
import org.springframework.security.webSecurityFilterChain

@Configuration
public class BasicAuthenticationSecurityConfiguration {

	//Filter chain

  //4: 그럼 우린 @Bean이라고 해주고,  
	@Bean
  //4-1: 이건 public SecurityFilterChain이 될 것이다 그리고 메서드 명은 filterChain()이라고 하자
  //그리고 연결할 Bean은 HttpSecurity가 될 것이다 이걸 http라고 부르고
	public SecurityFilterChain filterChain(HttpSecurity http) {
		

    //4-2: 여기서 우리는 http.build()라고 해줄 것이다
    return http.build();
	}
}


------------------------------------------------------------------------------------------------------------------

임포트를 정리하면 org.springframework.security.webSecurityFilterChain이 들어오는 게 보일거고 
org.springframework.security.config.annotation.web.builders.HttpSecurity도 들어오는 게 보일 것이다

이렇게 SpringFilterChain은 
(Defines a filter chain which is capable of being matched against an HttpServletRequest. 
in order to decide whether it applies to that request. )
HttpServletRequest에 매칭될 수 있는 필터 체인을 정의한다
그럼 요청이 들어오면 Spring Security는 이 필터 체인을 사용하게 되지 

HttpSecurity는 실제로 
(A HttpSecurity is similar to Spring Security's XML <http> element in thenamespace configuration. 
It allows configuring web based security for specific httprequests.
By default it will be applied to all requests, 
but can be restricted using requestMatcher(RequestMatcher) or other similar methods. )
우리가 특정한 HTTP 요청에 대해 웹 기반 보안을 설정할 수 있게 도와준다 

그럼 우린 필터체인을 맞춤화하려고 하고, 그렇게 하기 위해 우리는 HttpSecurity를 사용하지
그리고 우리는 지금 CSRF를 비활성화한 상태로 시작하려고 한다
하지만 Spring Security에는 중요한 점이 있는데, 너가 체인을 정의하기 시작하면 그 체인 전체를 정의해야 한다는 점이다 
기본값으로서 Spring Security는 모든 요청을 인증하게 되지
그럼 모든 요청이 인증되고 우리는 모든 요청에 대해 기본적인 인증을 사용하려고 한다 
그리고 우리가 CSRF를 비활성화하는 이유는 세션이 전혀 없도록 하려는 것이지 
❗그래서 너에게 세션이 있으면 반드시 CSRF를 활성화해야 한다❗ 

여기서 우리는 REST API를 만들고 있고, 그래서 우리는 세션이 전혀 필요하지 않다
그럼 우리는 상태가 없는 REST API를 만들려고 하는 것이지
그럼 우린 지금
	//Filter chain
	// authenticate all request
	//basic authentication
	//disabling csrf
	//stateless rest api
이것들을 모두 설정하려고 한다

지금은
return http.build();
이부분에 컴파일 오류가 나고 있는데 
컴파일 오류 먼저 없에보자

------------------------------------------------------------------------------------------------------------------


⏺ BasicAuthenticationSecurityConfiguration.java


package com.in28minutes.rest.webservices.restfulwebservices.basic;


@Configuration
public class BasicAuthenticationSecurityConfiguration {

	//Filter chain
	// authenticate all request
	//basic authentication
	//disabling csrf
	//stateless rest api
	
	@Bean                                                //5계속..: (여기 throws Excetion이 생김...)
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

    //5: 여기서 ctrl+1을 누르면 Add throws declaration을 선택할 수 있고 여기에 컴파일 오류가 나는 이유는 http.build()가 예외를 내기 때문이다
    //그럼 너는 Add throws declaration을 선택해주자
		return http.build();
	}
}

------------------------------------------------------------------------------------------------------------------

그리고 이제 이걸 저장하고 앞에서 한 요청 중에 하나를 실행해보자
모든 요청을 실행할 수 있는 걸 보게 될 것이다 

------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users/in28minutes/todos/1 사이트화면 =>


{
"id": 1,
"username": "in28minutes",
"description": "Get AWS Certified",
"targetDate": "2034-08-07",
"done": false
}
------------------------------------------------------------------------------------------------------------------

모든 요청을 실행할 수 있는데, 그건 실제로 우리가 Spring Security 전체를 
비활성화했기 때문이지
그럼 설정된 보안 필터가 하나도 없고, 그래서 지금은 어떠한 인증도 없다
그럼 우리 애플리케이션에서 인증을 비활성화한 것과 거의 비슷하지
이제 우린 
	//Filter chain
	// authenticate all request
	//basic authentication
	//disabling csrf
	//stateless rest api
이것들을 하나씩 설정하기 시작할 것이다

먼저 모든 요청에 대한 인증 설정부터 시작해보자 // authenticate all request
🔵 1)요청에 대한 인증 설정

------------------------------------------------------------------------------------------------------------------


⏺ BasicAuthenticationSecurityConfiguration.java



package com.in28minutes.rest.webservices.restfulwebservices.basic;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.web.*;

@Configuration
public class BasicAuthenticationSecurityConfiguration {

	//Filter chain
	// authenticate all request
	//basic authentication
	//disabling csrf
	//stateless rest api
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

    //6: 그럼 http.authorizeHttpRequests()라고 할 수 있고 그 안에 람다 함수를 넣어줄 수 있다, 그리고 람다 함수는 
    		http.authorizeHttpRequests(
				    //6-1: 이렇게 auth라는 파라미터를 사용하고 auth -> auth.anyRequest().authenticated()라고 해준다
            //그럼 모든 HTTP 요청이 인증되어야 한다고 해주는 것이지, 이걸저장하고
            auth -> auth.anyRequest().authenticated()
				);

		return http.build();
	}
}

------------------------------------------------------------------------------------------------------------------

이제 돌아가서 
요청을 시도해보자, 그럼 새 창을 열고 요청을 해보겠다
                                    |
                                    V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users/in28minutes/todos/1 사이트화면 =>


📄
localhost에 대한 액세스가 거부됨이 페이지를 볼 수 있는 권한이 없습니다.
HTTP ERROR 403

------------------------------------------------------------------------------------------------------------------

로컬 호스트에 대한 액세스가 거부되었다고 나온다 
이 페이지를 보기 위한 권한이 없다고 나오지 

이제 우리는 기본 인증을 활성화하려고 한다 
🔵 2) 기본인증

------------------------------------------------------------------------------------------------------------------


⏺ BasicAuthenticationSecurityConfiguration.java



package com.in28minutes.rest.webservices.restfulwebservices.basic;

import org.springframework.context.annotation.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.web.*;

@Configuration
public class BasicAuthenticationSecurityConfiguration {

	//Filter chain
	// authenticate all request
	//basic authentication
	//disabling csrf
	//stateless rest api
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests(
				auth -> auth.anyRequest().authenticated()
				);

    //7: 그럼 http.httpBasic()이라고 하고 기본값을 취하려고 한다, 그럼 Customizer.withDefaults()라고 해준다
    http.httpBasic(Customizer.withDefaults());

		return http.build();
	}
}

------------------------------------------------------------------------------------------------------------------

이렇게 우리는 HTTP 기본 인증을 설정하고 있다 
그럼 HTTP 기본 인증이 뭘까?
지금 바로 확인해보자

그럼 새 브라우저 창을 열고 URL을 넣으면, 이제 팝업이 나오는 걸 볼 수 있다
이렇게 사용자 이름과 패스워드는 묻는 웹 페이지 대신에 이런 인증 팝업이 나오는걸 
기본 인증이라고 부른다 
여기에 사용자 ID와 패스워드를 입력할 수 있고, 그럼 in28minutes, dummy라고 입력하고 Sign in을 눌러보자
                                    |
                                    V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users/in28minutes/todos/1 사이트화면 =>
                            

                                      ________________________________________
                                     |                                        |
                                     |  로그인                                |
                                     |  http://localhost:8080                 |
                                     |              ________________________  |
                                     |  사용자 이름 |in28minutes             | |
                                     |              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  |
                                     |              ________________________  |
                                     |  비밀번호    |dummy                   | |
                                     |              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  | 
                                     |                    _______    _____    |
                                     |                   ( 로그인 ) ( 취소 )   |
                                     |                    ‾‾‾‾‾‾‾    ‾‾‾‾‾    |
                                      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾









------------------------------------------------------------------------------------------------------------------
                                                  |
                                                  V
------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users/in28minutes/todos/1 사이트화면 =>


{"id":1,"username":"in28minutes","description":"Get AWS Certified","targetDate":"2034-08-07","done":false}

------------------------------------------------------------------------------------------------------------------

이제 너는 REST API에 액세스할 수 있다 

이렇게 우린 기본 인증도 설정했다 
그럼 우린 인증을 다시 활성화했고
이제는 상태가 없는 REST API를 만들고 CSRF를 비활성화할 차례이다

🔵 3) CSRF 비활성화

------------------------------------------------------------------------------------------------------------------


⏺ BasicAuthenticationSecurityConfiguration.java




package com.in28minutes.rest.webservices.restfulwebservices.basic;

import org.springframework.context.annotation.*;
import org.springframework.security.config.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.web.*;

@Configuration
public class BasicAuthenticationSecurityConfiguration {

	//Filter chain
	// authenticate all request
	//basic authentication
	//disabling csrf
	//stateless rest api
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests(
				auth -> auth.anyRequest().authenticated()
				);
		
		http.httpBasic(Customizer.withDefaults());

    //8: 그럼 상태가 없는 http.sessionManagement()부터 시작해보자, 이렇게 세션 관리를 설정할 수 있고 
		http.sessionManagement(
					//8-1: 여기 들어가는 파라미터는 session이고 우린 session -> session.sessionCreationPolicy()라고 할 것이다
          //그리고 SessionCreationPolicy는 STATELESS여야 하지, 이렇게 상태가 없는 세션을 만든다
  				session -> session.sessionCreationPolicy
  				(SessionCreationPolicy.STATELESS)	
				  );

		return http.build();
	}
}

------------------------------------------------------------------------------------------------------------------

이렇게 우리는 상태가 없는 세션을 설정하고 있고 
❗ 너가 CSRF를 비활성화한다면 세션에 상태가 없어야 한다는 점을 기억하기 바란다 ❗

요약하자면, 모든 요청에 대해 인증을 활성화해서 (<= http.authorizeHttpRequests(auth -> auth.anyRequest().authenticated()); )
우리는 모든 상태로 되돌리고 (<= http.httpBasic(Customizer.withDefaults());)
기본 인증을 활성화하고 그 다음에 우린 상태가 없는 세션을 설정한다 (<= http.sessionManagement(session -> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS)); )

그리고 이제 우리는 가서 

------------------------------------------------------------------------------------------------------------------


⏺ BasicAuthenticationSecurityConfiguration.java




package com.in28minutes.rest.webservices.restfulwebservices.basic;

import org.springframework.context.annotation.*;
import org.springframework.security.config.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.config.http.*;
import org.springframework.security.web.*;

@Configuration
public class BasicAuthenticationSecurityConfiguration {

	//Filter chain
	// authenticate all request
	//basic authentication
	//disabling csrf
	//stateless rest api
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
		
		http.authorizeHttpRequests(
				auth -> auth.anyRequest().authenticated()
				);
		
		http.httpBasic(Customizer.withDefaults());
		
		http.sessionManagement(
				session -> session.sessionCreationPolicy
				(SessionCreationPolicy.STATELESS));

    //9: http.csrf().disable(); 이라고 해줄 수 있다, 그리고 
    http.csrf().disable();

    //9-1: 마지막으로 http.build()를 리턴할 수 있다 
		return http.build();
	}
}

------------------------------------------------------------------------------------------------------------------

HTTP는 체인화를 지원하고, 그래서 이런 별도의 호출을 생성할 필요가 없다 
너가 Spring Security 코드를 본다면 이런 코드가 있는 경구가 종종 있지 (<= http.httpBasic(Customizer.withDefaults());)

------------------------------------------------------------------------------------------------------------------


⏺ BasicAuthenticationSecurityConfiguration.java




package com.in28minutes.rest.webservices.restfulwebservices.basic;

import org.springframework.context.annotation.*;
import org.springframework.security.config.*;
import org.springframework.security.config.annotation.web.builders.*;
import org.springframework.security.config.http.*;
import org.springframework.security.web.*;

@Configuration
public class BasicAuthenticationSecurityConfiguration {

	//Filter chain
	// authenticate all request
	//basic authentication
	//disabling csrf
	//stateless rest api
	
	@Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {

    //10-2: return 적어주고 아래부분 return은 삭제..//10-3: 아래부분 return으로..
    return
		http.authorizeHttpRequests(
				auth -> auth.anyRequest().authenticated()
				)

    //10: 우린 이렇게 하나씩 차례로 연쇄되어 있는 체인이지 (앞의 http 지우고 .으로 이어주기..)
		.httpBasic(Customizer.withDefaults())

    //10 계속.. : (앞의 http 지우고 .으로 이어주기..)
		.sessionManagement(
				session -> session.sessionCreationPolicy
				(SessionCreationPolicy.STATELESS))
		//10 계속.. : 이런식으로 되어있을 것이다 http를 삭제하고, 모든 게 함께 연쇄되어 있게 되지 
    // 그리고 중간 중간에 있는 세미콜론도 삭제 할 수 있고, 그러면 이 코드도 컴파일이 되는 걸 보게 될 것이다 
		.csrf().disable()
    //10-1: 맨끝에 우리는 .build()라고 하고 이걸 리턴할 것이다 //10-2: 위로 가서 return 쓰기..
    .build();

    //10-3: 이부분은 삭제
		// return http.build(); (<= 여기서만 주석 처리 실제 코드는 삭제)
	}
}

------------------------------------------------------------------------------------------------------------------

흔이 이런 코드를 보면 좀 어려울 수 있는데 
그냥 단순히 호출들이 연쇄되어 있는 것이지 HTTP는 호출 연쇄화를 지원하고
이 메서드들이 모두 HttpSecurity를 리턴하고, 그럼 너는 메서드 호출을 하나씩 연쇄할 수 있지
저장하고 

Talend API Tester로 갈 수 있고
여기선 우린 POST 요청에 문제가 있었지
그럼 POST 요청을 전송해보자

--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________       ____________________________________________________________    ___________________
 | POST     | ▼  |    |    http://localhost:8080/users/in28minutes/todos           |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾       ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |   ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   _______________     __________________      |    
☑ | Accept        | : |application/json  | x   |     {                         
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |      "username": "in28minutes",
   _______________     __________________      |      "description": "Learn To Dance",
☑ | Content-Type  | : |application/json  | x   |      "targetDate": "2033-08-04",                         
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |      "done": false                                 
  ______________                               |     }                            
 ( + Add header )  🗝 Add authorization     🗑  |                                  
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                               |       
                                               |                
                                               |      
                                               |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body | ☑ Enable body evaluation

                                   

--------------------------------------------------------------------------------------------------------------------------------
                                  |
                                  V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  401                (빨간 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |      ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾         |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
X-Content-Type-Options:	nosniff                   |     
X-XSS-Protection:	1; mode=block             |       
Cache-Control: no-cache, no-store,                |      
               max-age=0, must-revalidate         |       
Pragma:	no-cache                                  |       
Expires:	0                                 |                       No Content
X-Frame-Options:	DENY                      |     
Vary:	Origin                                    | 
Vary:	Access-Control-Request-Method             | 
Vary:	Access-Control-Request-Headers            | 
Content-Type:	application/json                  |          
Transfer-Encoding:	chunked                   |                       
Date:	Wed, 07 Aug 2024 07:51:04 GMT             |
Keep-Alive:	timeout=60                        |
Connection:	keep-alive                        |
                                                  |
▶ COMPLETE REQUEST HEADERS                        |                                              
                                                  |
                                                     
--------------------------------------------------------------------------------------------------------------------------------

401이 되돌아오는데, 왜냐하면 헤더를 설정하지 않았기 때문이지 

그럼 Add authorization을 클릭하고 in28minutes, dummy를 입력한다 
                                        |
                                        V
 ________________________________________________________________
|  Authorization                                              x  |
| ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
|                    _______________                             |
|              Type | Authorization |                            |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                             |
|                    ______________________                      |
|          Username |in28minutes           |                     |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
|                    ______________________                      |
|          Password |●●●●●                 |                     |
|                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                      |
|                    ▢ show password                             |
|                                                                |
|‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|
|                                        __________    _______   |
|                                       | x Cancel |  | ✔ Set |  |
|                                        ‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾   |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

그리고 Set을 클릭한다 
                                      |
                                      V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________       ____________________________________________________________    ___________________
 | POST     | ▼  |    |    http://localhost:8080/users/in28minutes/todos           |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾       ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |   ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   _______________     __________________      |    
☑ | Accept        | : |application/json  | x   |     {                         
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |      "username": "in28minutes",
   _______________     __________________      |      "description": "Learn To Dance",
☑ | Content-Type  | : |application/json  | x   |      "targetDate": "2033-08-04",                       
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |      "done": false  
   _______________     __________________      |      }
☑ | Authorization | : |Basic aW4yOG1pbnV0| x 🗝|                             
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |                                     
  ______________                               |                                 
 ( + Add header )  🗝 Add authorization     🗑  |                                  
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                               |       
                                               |                
                                               |      
                                               |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body | ☑ Enable body evaluation

                                   

--------------------------------------------------------------------------------------------------------------------------------

그리고 Send를 클릭해보자

                                  |
                                  V
--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  200                (초록 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |      ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾         |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Vary:	Origin                                    |
Vary:	Access-Control-Request-Method             |     {  
Vary:	Access-Control-Request-Headers            |       id: 4,
X-Content-Type-Options:	nosniff                   |       username: "in28minutes",
X-XSS-Protection:	1; mode=block             |       description: "Learn To Dance",
Cache-Control: no-cache, no-store,                |       targetDate: "2033-08-04",
               max-age=0, must-revalidate         |       done": false
Pragma:	no-cache                                  |     }
Expires:	0                                 |
X-Frame-Options:	DENY                      |
Content-Type:	application/json                  |
Transfer-Encoding:	chunked                   |
Date:	Wed, 07 Aug 2024 11:18:32 GMT             |
Keep-Alive:	timeout=60                        |
Connection:	keep-alive                        |
                                                  |
▶ COMPLETE REQUEST HEADERS                        |                                              
                                                  |
                                                     
--------------------------------------------------------------------------------------------------------------------------------

이제 요청에 대해 200이라는 상태가 되돌아오는 걸 볼 수 있다 





이번 단계는 좀 길었는데,
우린 애플리케이션에 대해 Spring Security를 활성화하고 기본 인증도 활성화 했다 
그리고 REST API도 작동시켰지 
그럼 다음 단계에서 보겠다
