

Digging Deeper into Components - Counter
                                                                                ______     ______
● Parts of a Component                                                         (  +1  )   (  -1  )
  ■ View (JSX or JavaScript)                                                    ‾‾‾‾‾‾     ‾‾‾‾‾‾
  ■ Logic (JavaScript)                                                          ______     ______
  ■ Styling (CSS)                                                              (  +2  )   (  -2  )
  ■ State (Internal Data Store)                                                 ‾‾‾‾‾‾     ‾‾‾‾‾‾
  ■ Props (Pass Data)                                                           ______     ______
● Let's learn more about each of these building another simple example         (  +5  )   (  -5  )
  ■ A Counter App                                                               ‾‾‾‾‾‾     ‾‾‾‾‾‾
● Let's take a hands-on step by step approach                                           0
                                                                                   ____________   
                                                                                  (   Reset    ) 
                                                                                   ‾‾‾‾‾‾‾‾‾‾‾‾


새로운 리액트 섹션에 온 걸 환영한다  
이 섹션에선 컴포넌트에 대해 좀 더 자세히 알아볼 것이다 
그 과정에서 카운터 애플리케이션을 구현해볼 것이다
● Parts of a Component 
우리는 앞에서 컴포넌트가 여러 부분으로 구성되어 있다는 걸 배웠다
  ■ View (JSX or JavaScript)  
먼저 뷰(View)가 있다
실제 구현은 JSX 코드로 하지만 나중에 JavaScript로 변환된다
  ■ Logic (JavaScript)   
로직 부분은 JavaScript로 작성하고 버튼이 눌렸을 때 어떻게 동작해야 하는지 그런 걸 로직으로 작성한다
  ■ Styling (CSS)  
스타일링 부분도 있다 
요소의 생김새를 바꾸고 싶을 때는 CSS를 사용해 바꿀 수 있지 
  ■ State (Internal Data Store)      
  ■ Props (Pass Data)
그리고 매우 중요한 두 가지 개념을 배웠다 
상태(State)와 프로퍼티(Props)였지 
State는 특정 컴포넌트 내부에 저장되는 값이다, 컴포넌트 내부에 저장되는 데이터였지,
그리고 Props, 즉 프로퍼티가 있었지 
프로퍼티는 다른 컴포넌트로 데이터를 전달할 때 사용한다 

● Let's learn more about each of these building another simple example 
이제 간단한 예제를 만들어 보면서 관련 내용을 좀 더 자세히 살펴보자
  ■ A Counter App 
우리가 만들 건 카운터(Counter) 애플리케이션이다  
● Let's take a hands-on step by step approach
단계별로 하나씩 차례 차례 구현해 나갈 것이다



최종적으로는 이런 형태의 카운터 애플리케이션을 만들 것이다

 ______     ______
(  +1  )   (  -1  )
 ‾‾‾‾‾‾     ‾‾‾‾‾‾
 ______     ______
(  +2  )   (  -2  )
 ‾‾‾‾‾‾     ‾‾‾‾‾‾
 ______     ______
(  +5  )   (  -5  )
 ‾‾‾‾‾‾     ‾‾‾‾‾‾
         0
   ____________   
  (   Reset    ) 
   ‾‾‾‾‾‾‾‾‾‾‾‾
   
+1 또는 -1 버튼을 클릭하면 
아래 있는 카운터가 1만큼 증가 혹은 감소하도록 만들 것이다   
다른 버튼을 클릭했을 때도 마찬가지로 2만큼 늘거나 줄고
5만큼 늘거나 줄도록 만들고
초기화(Reset)버튼을 누르면 0으로 초기화된다,
아주 유연하고 변경하기 쉬운 형태로 구현할 것이다

그럼 이제 컴포넌트를 구성하는 여러 가지 요소들을 
자세히 살펴보면서 카운터 애플리케이션을 단계별로 하나씩 구현해 보자
다음 학습에서 보겠다
