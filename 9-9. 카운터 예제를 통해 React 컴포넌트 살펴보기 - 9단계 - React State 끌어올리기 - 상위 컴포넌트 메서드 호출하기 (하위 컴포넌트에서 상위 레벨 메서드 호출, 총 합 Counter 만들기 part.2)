

Moving State up and More...
                                                                                ______     ______
● How can we have one state for all counters?                                  (  +1  )   (  -1  )
  ■ 1: Rename Counter to CounterButton                                          ‾‾‾‾‾‾     ‾‾‾‾‾‾
  ■ 2: Calling a parent component method                                        ______     ______
    ○ <CounterButton incrementMethod={increment}>                              (  +2  )   (  -2  )
                                                                                ‾‾‾‾‾‾     ‾‾‾‾‾‾
                                                                                ______     ______
                                                                               (  +5  )   (  -5  )
                                                                                ‾‾‾‾‾‾     ‾‾‾‾‾‾
                                                                                        0
                                                                                   ____________   
                                                                                  (   Reset    ) 
                                                                                   ‾‾‾‾‾‾‾‾‾‾‾‾


지난 단계에서 끌어올리기 작업을 시작했다 
  ■ 2: Calling a parent component method
하위 컴포넌트뿐만 아니라 상위 컴포넌트인 Counter에도 상태(State)를 추가했다 
    ○ <CounterButton incrementMethod={increment}>
상위 컴포넌트에 카운트를 증가시키는 메서드도 추가했다, 이를 다른 CounterButton에서 호출하려고 한다
어떻게 하면 될까?


 이 메서드를 호출하는 방법을 살펴보기 전에 좀 더 단순한 메서드를 만들어 보겠다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx




import { useState } from 'react'
import {PropTypes} from 'prop-types'
import './Counter.css'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    //1: 새로운 메서드 함수로 'someMethodInParent()'를 만들고 
    function someMethodInParent() {
        //1-1: 여기서 로그를 출력하겠다 '상위 메서드 호출됨(parent method called)', 이렇게 만든 다음
        console.log('parent method called')        
    }

    return(
       <> 
        //1-2: 하위 컴포넌트에서 이 메서드를 호출해 보겠다, 카운터 버튼이 클릭 될 때마다 이 메서드가 호출되도록, 어떻게 해야 할까?
        <span className='totalCount'>{count}</span>
        <CounterButton by={1}/>
        <CounterButton by={2}/>           
        <CounterButton by={5}/>
       </>
    )
}

function CounterButton({by}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)

    }

    function decrementCounterFunction() {
        
        setCount(count - by)
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}

-----------------------------------------------------------------------------------------------

하위 컴포넌트에서는 상위 컴포넌트의 메서드에 접근할 수 없다

유일한 방법은 위에서 아래쪽으로 메서드를 넘겨주는 것이다
상위 레벨에서 

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import {PropTypes} from 'prop-types'
import './Counter.css'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    function someMethodInParent() {
        console.log('parent method called')
    }

    return(
       <> 
        <span className='totalCount'>{count}</span>

        //2: someMethodInParent라는 속성을 추가해 해당 메서드를 넘겨줘야 한다
        //someMethodInParent속성에 someMethodInParent메서드의 참조 값을 넣어 전달하는 것이다
        <CounterButton by={1} someMethodInParent={someMethodInParent}/>

        //2-1: 모든 컴포넌트에 이 코드를 추가하겠다 ( someMethodInParent={someMethodInParent} )
        // 'someMethodInParent={someMethodInParent}' 설정을 각각에 추가할 것이다
        <CounterButton by={2} someMethodInParent={someMethodInParent}/>

        //2-1 계속: 여기도 someMethodInParent={someMethodInParent} 추가..
        <CounterButton by={5} someMethodInParent={someMethodInParent}/>
       </>
    )
}

function CounterButton({by}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)

    }

    function decrementCounterFunction() {
        
        setCount(count - by)
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}
-----------------------------------------------------------------------------------------------

이제 이 값을 프로퍼티로 받으면 된다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx




import { useState } from 'react'
import {PropTypes} from 'prop-types'
import './Counter.css'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    function someMethodInParent() {
        console.log('parent method called')
    }

    return(
       <> 
        <span className='totalCount'>{count}</span>
        <CounterButton by={1} someMethodInParent={someMethodInParent}/>
        <CounterButton by={2} someMethodInParent={someMethodInParent}/>           
        <CounterButton by={5} someMethodInParent={someMethodInParent}/>
       </>
    )
}

//3:  CounterButton()의 매개변수에서,'by, someMethodInParent' 이렇게 말이다
// 이렇게 하면 CounterButton 안에서 메서드에 접근할 수 있다, 이걸 메서드 형태로 호출하면 된다
function CounterButton({by, someMethodInParent}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)
        //3-1: setCount() 밑에서 someMethodInParent()를 호출하겠다
        someMethodInParent()
    }

    function decrementCounterFunction() {
        
        setCount(count - by)
        //3-1 계속: 어떻게 되는지 보자, 이렇게 하면 함수를 호출할 수 있는지 확인해보자 
        someMethodInParent()
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}
-----------------------------------------------------------------------------------------------
브라우저로 가서                                  |
                                                V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                          0      
                                          0              
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1     |
                              ◟ _______ ◞    ◟ _______ ◞
                                          
                                          0               
                                                                           
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +2    |   |   -2     |
                              ◟ _______ ◞    ◟ _______ ◞
                                          
                                          0              
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +5    |   |    -5    |
                              ◟ _______ ◞    ◟ _______ ◞


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Download the React DevTools for a better development experience:         react refresh:6 
  https://reactjs.org/link/react-devtools
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
   parent method called                                                     Counter.jsx:14 
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
   parent method called                                                     Counter.jsx:14 
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
   parent method called                                                     Counter.jsx:14 
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
   parent method called                                                     Counter.jsx:14 
-------------------------------------------------------------------------------------------

+1을 클릭하면 '상위 메서드 호출됨(parent method called)'이 출력된다
-1을 클릭해도 같은 메시지가 나오고,
+2와 -2도 마찬가지다
좋다 

이제
우리는 하위 컴포넌트에서 상위 레벨 메서드를 호출할 수 있다
훌륭하다, 우리가 원하는 동작을 구현하는 데 필요했던 것이다

하지만 우리가 정말로 호출하고 싶은 건 
    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }
이 메서드이다
someMethodInParent()를 호출하고 싶은게 아니다

Counter에서 
-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import {PropTypes} from 'prop-types'
import './Counter.css'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

//4: 이 메서드를 삭제하고 //4-1: 아래 return으로 ..
/* (여기서만 주석 처리 실제 코드에선 삭제)
    function someMethodInParent() {
        console.log('parent method called')
    }
*/

    return(
       <> 
        <span className='totalCount'>{count}</span>

        //4-1: 속성 이름을 'incrementMethod'로 바꾼 다음 incrementCounterParentFunction를 넣겠다, 이게 우리가 호출해야 할 메서드이다
        <CounterButton by={1} incrementMethod={incrementCounterParentFunction}/>
        <CounterButton by={2} incrementMethod={incrementCounterParentFunction}/>           
        <CounterButton by={5} incrementMethod={incrementCounterParentFunction}/>
       </>
    )
}

//4-2: 메서드를 받는 쪽에서도 같은 방식을 쓰면 된다, 매개변수를 incrementMethod로 바꾸고
function CounterButton({by, incrementMethod}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)
        //4-3: 함수 안에서 incrementMethod() 메서드를 호출하겠다
        incrementMethod()
    }

    function decrementCounterFunction() {
        
        setCount(count - by)
        //4-3 계속: 이러면 될까?, 이것도 incrementMethod()로 바꾸겠다, 어떻게 동작하는지 보자
        incrementMethod()
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}

-----------------------------------------------------------------------------------------------
  +1을 누르면?                                   |
                                                V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                         NaN      
                                          0              
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1     |
                              ◟ _______ ◞    ◟ _______ ◞
                                          
                                          0               
                                                                           
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +2    |   |   -2     |
                              ◟ _______ ◞    ◟ _______ ◞
                                          
                                          0              
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +5    |   |    -5    |
                              ◟ _______ ◞    ◟ _______ ◞


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Download the React DevTools for a better development experience:         react refresh:6 
  https://reactjs.org/link/react-devtools
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ❌ ▶ Warning: Received NaN for the                           react-dom.development.js:86      
      `children` attribute. If this is expected, cast the value to a 
      string.
        at span
        at Counter (http://localhost:3000/static/js/bundle.js:136:76)
        at div
        at App
-------------------------------------------------------------------------------------------

이런
children 속성값이 NaN이라는 메시지가 나온다
의도적인 거라면 문자열로 형 변환하라고 나온다, 동작하지 않는다

왜 동작하지 않는 걸까?

우리는 incrementCounterParentFunction()의 참조 값을 전달했다
-----------------------------------
    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    return(
       <> 
        <span className='totalCount'>{count}</span>
        <CounterButton by={1} incrementMethod={incrementCounterParentFunction}/>
        <CounterButton by={2} incrementMethod={incrementCounterParentFunction}/>           
        <CounterButton by={5} incrementMethod={incrementCounterParentFunction}/>
       </>
    )
-----------------------------------
이것까진 좋다

하지만 방금 본 것처럼 호출이 되지 않았다
왜 호출할 수 없는 걸까?

왜냐하면 incrementMethod()에는 매개변수(Parameter)가 있기 때문이다 
'by'라는 매개변수가 있다
-----------------------------------
    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }
-----------------------------------
by를 받아 상태를 업데이트하고
by를 받아 업데이트하고 그렇게 동작하지


-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import {PropTypes} from 'prop-types'
import './Counter.css'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    return(
       <> 
        <span className='totalCount'>{count}</span>
        <CounterButton by={1} incrementMethod={incrementCounterParentFunction}/>
        <CounterButton by={2} incrementMethod={incrementCounterParentFunction}/>           
        <CounterButton by={5} incrementMethod={incrementCounterParentFunction}/>
       </>
    )
}

function CounterButton({by, incrementMethod}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)

        //5: 그래서 그냥 이렇게 incrementMethod()를 호출하는게 아니라 함수인자로 by를 넘겨줘야 한다
        incrementMethod(by)
    }

    function decrementCounterFunction() {
        
        setCount(count - by)
        //5 계속: 여기서도 by를 넘겨주고 저장하겠다
        incrementMethod(by)
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}
-----------------------------------------------------------------------------------------------
한번 실행해보자                                  |
새로고침하고                                     V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                         33      
                                          0              
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1     |
                              ◟ _______ ◞    ◟ _______ ◞
                                          
                                          0               
                                                                           
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +2    |   |   -2     |
                              ◟ _______ ◞    ◟ _______ ◞
                                          
                                          0              
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +5    |   |    -5    |
                              ◟ _______ ◞    ◟ _______ ◞


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Download the React DevTools for a better development experience:         react refresh:6 
  https://reactjs.org/link/react-devtools
-------------------------------------------------------------------------------------------

+1, +2 -1, -2를 클릭해보면
모든 게 정상적으로 업데이트 되는 걸 볼 수 있다 
정말 멋지지 않니?
+2, -2, +5, -5, +1, -1 이렇게 클릭하면 각 컴포넌트 레벨에 있는 개별 상태도 업데이트 되고,
상위 레벨의 상태도 업데이트된다

자세히 보면 지금 코드에 버그가 있다, 전체 카운트 값이 늘기만 하고 줄지는 않는다 


빼기 버튼을 눌러도 감소하지 않는 이유는 여기 있는 두 함수 모두에서
incrementMethod()를 호출하고 있기 때문이다, 지금 바로 고쳐보자

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import {PropTypes} from 'prop-types'
import './Counter.css'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    //6: 함수이름으로 'decrementCounterParentFunction'으로 하고 
    function decrementCounterParentFunction(by) {
        //6 계속: 이것도 (count - by)로 바꾸고 //6-1: return으로..
        setCount(count - by)
    }

    return(
       <> 
        <span className='totalCount'>{count}</span>

        //6-1: 버튼에 'decrementMethod'속성을 만들어 방금 만든 이 decrementCounterParentFunction 메서드를 넣겠다 // 6-2: CounterButton()함수로..
        <CounterButton by={1} 
                      incrementMethod={incrementCounterParentFunction} 
                      decrementMethod={decrementCounterParentFunction}/>
        <CounterButton by={2} 
                      incrementMethod={incrementCounterParentFunction} 
                      decrementMethod={decrementCounterParentFunction}/>           
        <CounterButton by={5} 
                      incrementMethod={incrementCounterParentFunction} 
                      decrementMethod={decrementCounterParentFunction}/>
       </>
    )
}

//6-2: 이제 decrementMethod로 받은 값을 사용하겠다, 매개변수를 추가하고 //6-3: decrementCounterFunction()으로..
function CounterButton({by, incrementMethod, decrementMethod}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

  //6:
    function incrementCounterFunction() {

        setCount(count + by)
        incrementMethod(by)
    }

    function decrementCounterFunction() {
        
        setCount(count - by)
        //6-3: 이쪽에 이렇게 decrementMethod()메서드를 호출하면 된다, 저장하고 브라우저로 가서
        decrementMethod(by)
    }

    return(
    <div className='Counter'>
        <span className='count'>{count}</span>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}
-----------------------------------------------------------------------------------------------
새로고침하고                                           |
+1, -1을 클릭해보자                                    V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                         -3     
                                          0              
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1     |
                              ◟ _______ ◞    ◟ _______ ◞
                                          
                                          0               
                                                                           
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +2    |   |   -2     |
                              ◟ _______ ◞    ◟ _______ ◞
                                          
                                          0              
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +5    |   |    -5    |
                              ◟ _______ ◞    ◟ _______ ◞


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Download the React DevTools for a better development experience:         react refresh:6 
  https://reactjs.org/link/react-devtools
-------------------------------------------------------------------------------------------

잘 된다
+2, -2, -2, +2 +2, -2 , +5
모두 잘 작동한다


이제 개별 상태 변수를 모두 지우겠다

더 이상 각 컴포넌트에서 상태를 추적할 필요가 없기때문이다 
이제는 상위 레벨에서만 상태를 관리하면 된다
지금은 그냥 간단하게 화면에 표시하는 부분만 지우겠다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import {PropTypes} from 'prop-types'
import './Counter.css'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    function decrementCounterParentFunction(by) {
        setCount(count - by)
    }

    return(
       <> 
        <span className='totalCount'>{count}</span>
        <CounterButton by={1} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>
        <CounterButton by={2} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>           
        <CounterButton by={5} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>
       </>
    )
}

function CounterButton({by, incrementMethod, decrementMethod}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)
        incrementMethod(by)
    }

    function decrementCounterFunction() {
        
        setCount(count - by)
        decrementMethod(by)
    }

    return(
    <div className='Counter'>

        //7: 이부분 삭제
//        <span className='count'>{count}</span>  (<= 여기서만 주석처리 실제 코드에선 삭제..)
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}

-----------------------------------------------------------------------------------------------

CounterButton에 있는 상태 코드는 그대로 두고, 상태를 표시하는 부분만 지우겠다

이렇게 하고 화면을 새로 고치면
                                              |
                                              V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                          0                
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1     |
                              ◟ _______ ◞    ◟ _______ ◞           
                                                                           
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +2    |   |   -2     |
                              ◟ _______ ◞    ◟ _______ ◞             
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +5    |   |    -5    |
                              ◟ _______ ◞    ◟ _______ ◞


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Download the React DevTools for a better development experience:         react refresh:6 
  https://reactjs.org/link/react-devtools
-------------------------------------------------------------------------------------------

버튼 위에 있던 카운트 값이 사라진다
+1, -1, +2, +2, -2, -2, +5 -5
이렇게 표시 된다

모든 게 잘 동작한다






Moving State up and More...
                                                                                ______     ______
● How can we have one state for all counters?                                  (  +1  )   (  -1  )
  ■ 1: Rename Counter to CounterButton                                          ‾‾‾‾‾‾     ‾‾‾‾‾‾
  ■ 2: Calling a parent component method                                        ______     ______
    ○ <CounterButton incrementMethod={increment}>                              (  +2  )   (  -2  )
  ■ 3: Exercise: Counter Button as separate module                              ‾‾‾‾‾‾     ‾‾‾‾‾‾
                                                                                ______     ______
                                                                               (  +5  )   (  -5  )
                                                                                ‾‾‾‾‾‾     ‾‾‾‾‾‾
                                                                                        0
                                                                                   ____________   
                                                                                  (   Reset    ) 
                                                                                   ‾‾‾‾‾‾‾‾‾‾‾‾


이렇게 하나의 카운터와 해당 카운터를 조작하는 여러 개의 버튼을 만들었다

여기서 과제를 하나 내주겠다
CounterButton 코드를 별도의 모듈로 분리해 보길 바란다 
그럼 다음 학습에서 보겠다
