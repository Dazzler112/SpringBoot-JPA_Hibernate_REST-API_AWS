

이번 학습에선 PostConstruct와 PreDestroy를 알아보자
Spring과 함께 사용할 수 있는 아주 중요한 어노테이션이다 이번 단계에서 어떻게 사용할 수 있는지 살펴보자


----------------------------------------------------------------------------------------------------


⏺ PrePostAnnotationsContextLauncherApplication 클래스파일



package com.example.demo.f1;

import java.util.*;

import org.springframework.context.annotation.*;
import org.springframework.stereotype.*;

import jakarta.annotation.*;


//1: 간단한 클래스를 만들어보자 SomeClass라 입력한다 그리고 @Component라 쓰고 임포트 하고 실행하면 어떻게 될까?
//출력결과 ==> ... someClass //someClass가 보인다
@Component
class SomeClass {
	//이 Bean,이 특정 클래스의 인스턴스에 모든 의존성을 연결하는 대로 초기화를 수행하려 한다 해 보자
	
	//1-2: private SomeDependency someDependency;라 입력하고 생성자도 있다
	private SomeDependency someDependency;

	public SomeClass(SomeDependency someDependency) {
		super();
		this.someDependency = someDependency;
		//1-3: System.out.println("All dependencies are ready!");라고 출력해 보자 그리고 실행
		System.out.println("All dependencies are ready!");
	}
	//의존성이 준비되었으니 논리를 넣고 싶은데 초기화를 수행할 것이다 일단 실행을 먼저 해보자 
	/*실행결과 ==>
	..
	someClass
	someDependency
	someClass와 someDependency가 출력된다 
	*/
	//1-3: 예를 들어 여기, 생성자가 실행된 후 의존성이 준비되었을 때 syso를 수행하고 All dependencies are ready!라고 출력해 보겠다
	
	/* 1-3 syso 생성후 출력결과 ==>
	All dependencies are ready!
	..
	...
	someClass
	someDependency
	이 메서드 호출이 발생한다 보면 맨위에 이 문구가 출력된다 그 이후에 Bean이 모두 나열된다
	*/
	
	
	//1-4: 이 특정 의존성에서 Bean이 준비되는 대로, 의존성을 연결하는 대로 초기화하려고 한다 public void initialize()라 쓰자
	//초기화 과정의 일부로 의존성에서 특정 메서드를 호출할 거라 해보자 someDependency.getReady를 수행할 거라 가정해 보자
	//ctrl키로 someDependency에 getReady를 생성할 수 있고, //1-4-1: 아래 getReady()메소드로..
	
	//1-5:@PostConstruct를 사용하자 그리고 자바를 실행하면
	/* PostConstruct 사용후 실행결과 ==>
	All dependencies are ready!
	Some logic using SomeDependency
	..
	...
	someClass
	someDependency
	가장 먼저 의존성이 준비되고, 의존성이 준비된 후에는 초기화된다
	Some logic using SomeDependency라고 출력된 게 보이지?
	이때 Spring은 자동으로 의존성을 연결하고, 의존성을 자동 연결하는 대로 Spring에서는 PostConstruct를 어노테이션한 메서드를 호출한다 ( public void initialize() )
	PostConstruct어노테이션에 마우스를 올려 봐라, PostConstruct 어노테이션은 초기화를 수행하기 위해 의존성 주입이 완료된 후 실행해야 하는 메서드에서 사용하며,
	이 메서드는 클래스를 사용하기 전에 호출되어야 한다고 한다, 다른 Bean이 이 Bean을 사용할 수 있게 되기 전에 이 메서드가 호출될 것이다 
	이때 애플리케이션이 실행되고 Bean이 로드된다
	*/
	@PostConstruct
	public void initialize() {
		someDependency.getReady();
	}
	
	//2: 애플리케이션이 종료되기 전에, 컨텍스트에서 Bean이 삭제되기 전에 뭔가 해야 할 수도 있겠지 PreDestroy로 할 수 있다
	//@PreDestroy라 쓰고 보통 PreDestroy에서는 무엇을해야 할까? 일단 public void cleanup 이라 적고 데이터베이스 등에 연결되어 있다면 cleanup으로 종료할 수 있다
	//syso를 입력하고 "Cleanup"이라 쓴다 
	/* PreDestroy 설명
	PreDestroy어노테이션은 컨테이너에서 인스턴스를 삭제하는 과정 중에 있음을 알려주는 콜백 알림으로 매서드에서 사용된다
	PreDestroy를 어노테이션한 메서드는 보유하고 있던 리소스를 해제하는 데 일반적으로 사용된다고 적혀있다
	*/
	//실행해보자
	@PreDestroy
	public void cleanup () {
		System.out.println("Cleanup");
	}
	/* cleanup 실행결과 ==>
	..
	...
	Cleanup
	컨텍스트에서 Bean이 삭제되기 바로 전에 Cleanup이 나타난다 
	*/
}
//1-1: 예를 들어, 이와 같은 의존성을 연결해야 한다고 가정해 보자
//@Component class SomeDependency {}라 쓴다 여기서 사용된다고 하자

@Component
class SomeDependency {

	//1-4-1:  여기에 논리를 입력한다 syso("Some logic using SomeDependency");
	//someDependency를 데이터베이스로 사용하고 싶다 데이터베이스에서 데이터를 가져와 초기화하려 한다
	//의존성을 연결하는 대로 초기화를 실행하려면 어떻게 해야 할까? //1-5: 이때 @PostConstruct를 사용한다 
	public void getReady() {
		System.out.println("Some logic using SomeDependency");
	}
	
}


@Configuration
@ComponentScan
public class PrePostAnnotationsContextLauncherApplication {
	
	public static void main(String[] args) {

		try(var context = 
				new AnnotationConfigApplicationContext
				(PrePostAnnotationsContextLauncherApplication.class)) {
			
			Arrays.stream(context.getBeanDefinitionNames())
			.forEach(System.out::println);

		}
	} 
}

----------------------------------------------------------------------------------------------------




이번 단계에선 PostConstruct와 PreDestroy를 살펴봤다 
의존성을 연결하는 대로 초기화 논리를 실행하려는 경우 
예를 들어 데이터베이스 등에서 데이터를 가져오려는 경우에 PostConstruct를 사용할 수 있고
컨테이너에서 Bean이 삭제되기 전에 애플리케이션 컨텍스트에서 삭제되기 전에 cleanup을 수행하려는 경우에는 PreDestroy 어노테이션을 사용할 수 있다
일반적으로 이 매서드에서 cleanup을 수행한다
이런 방법으로 활성화된 연결 등을 닫을 수 있다
