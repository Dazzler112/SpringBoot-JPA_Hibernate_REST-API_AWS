

Wrold Befor Spring Boot!

● Setting up Spring Projects before Spring Boot was NOT easy!
● We needed to configure a lot of things before we have a production-ready application




이 단계에선 Spring Boot이전 세계
에 관한 대략적인 개요를 알아볼 텐데 
여기서 모든 사항을 파악하는 것이 아니라 대략적으로 알아보는 것이 목표이다
Spring Boot 전에는 애플리케이션을 어떻게 빌드했을까?

● Setting up Spring Projects before Spring Boot was NOT easy!
Spring Boot 전에 Spring Project를 설정하는 작업은 쉽지 않았다
● We needed to configure a lot of things before we have a production-ready application
많은 것을 설정한 후에야 프로덕션 환경에 사용 가능한 애플리케이션을 얻을 수 있었다




Wrold Befor Spring Boot - 1 - Dependency Management

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|  <dependency>                                                                                                          | 
|        <groupId>org.springframework</groupId>                                                                          |
|        <artifactId>spring-webmvc</artifactId>                                                                          |
|        <version>6.2.2.RELEASE</version>                                                                                |
|  </dependency>                                                                                                         |
|  <dependency>                                                                                                          |
|        <groupId>com.fasterxml.jackson.core</groupId>                                                                   |           
|        <artifactId>jackson-databind</artifactId>                                                                       |
|        <version>2.13.3</version>                                                                                       |          
|  </dependency>                                                                                                         |       
|  <dependency>                                                                                                          |
|        <groupId>log4j</groupId>                                                                                        |    
|        <artifactId>log4j</artifactId>                                                                                  |  
|        <version>1.2.17</version>                                                                                       |         
|  </dependency>                                                                                                         |       
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● Manage frameworks and versions
 ■ REST API - Spring framework, Spring MVC framework, JSON binding framework, ..
 ■ Unit Tests - Spring Test, Mockito, JUnit, ...


몇 가지 예를 살펴 보겠다
● Manage frameworks and versions
 ■ REST API - Spring framework, Spring MVC framework, JSON binding framework, ..
먼저 의존성 관리를 보자 REST API를 만든다고 가정해 보겠다, 이 사니리오에선 Spring 프레임워크와 Spring MVC 프레임워크, JSON 바인딩 프레임워크, 로깅이 필요하다
따라서 모든 의존성과 거기 포함된 버전을 사용하여 pom.xml을 만들어야 했다 pom.xml에서 프레임워크와 그 버전을 관리해야 한다
 ■ Unit Tests - Spring Test, Mockito, JUnit, ...
단위 테스트를 작성하려면 Spring Test 프레임워크를 가져와야 하고 Mockito를 가져와야 하고 JUnit을 가져와야 하며 그러한 모든 버전을 관리해야 한다

이것이 첫번째 예인 의존성 관리였다






Wrold Befor Spring Boot - 2 - web.xml

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|  <servlet>                                                                                                             | 
|        <servlet-name>dispatcher</servlet-name>                                                                         |
|        <servlet-class>                                                                                                 |
|            org.springframework.web.servlet.DispatcherServlet                                                           |
|          </servlet-class>                                                                                              |
|        <init-param>                                                                                                    |
|            <param-name>contextConfigLocation</param-name>                                                              |
|            <param-value>/WEB-INF/todo-servlet.xml</param-value>                                                        |
|         </init-param>                                                                                                  |
|         <load-on-startup>1</load-on-startup>                                                                           |
|  </servlet>                                                                                                            |
|  <dependency>                                                                                                          |
|        <groupId>com.fasterxml.jackson.core</groupId>                                                                   |           
|        <artifactId>jackson-databind</artifactId>                                                                       |
|        <version>2.13.3</version>                                                                                       |          
|  </servlet>                                                                                                            |
|                                                                                                                        | 
|  <servlet-mapping>                                                                                                     |
|        <servlet-name>dispatcher</servlet-name>                                                                         |    
|        <url-pattern>/*</url-pattern>                                                                                   |         
|  </servlet-mapping>                                                                                                    |       
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● Example: Configure DispatcherServlet for Spring MVC



두 번째는 web.xml이다
웹 애플리케이션의 많은 것을 설정하는 데 필요하다
● Example: Configure DispatcherServlet for Spring MVC
예를 들어 Spring MVC를 활용하려는 경우 DispatcherServlet을 설정한느 데 필요하다








Wrold Befor Spring Boot - 3 - Spring Configuration

ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|  <context:component-scan base-package="com.example.demo" />                                                            |        
|                                                                                                                        |
| <bean                                                                                                                  |  
|        class="org.springframework.web.servlet.view.InternalResourceViewResolver">                                      |                                                              
|        <property name="prefix">                                                                                        |    
|            <value>/WEB-INF/views</value>                                                                               |       
|        </property>                                                                                                     |       
|        class="org.springframework.web.servlet.view.InternalResourceViewResolver">                                      |                      
|        <property name="suffix">                                                                                        |
|            <value>.jsp</value>                                                                                         |   
|        </property>                                                                                                     |       
|  </bean>                                                                                                               |       
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

● Define your Spring Configuration 
 ■ Component Scan
 ■ View Resolver
 ■ ...



● Define your Spring Configuration 
또한 Spring 설정도 많이 있다
 ■ Component Scan
 ■ View Resolver
 ■ ...
컴포넌트 스캔을 정의해야 하고 웹 애플리케이션을 빌드한다면 뷰 리졸버를 정의해야한다
데이터베이스 관련 애플리케이션을 빌드한다면 데이터 소스를 정의해야 한다
따라서 여러 설정을 적절히 지정해야 애플리케이션을 사용할 수 있다






Wrold Befor Spring Boot - 4 - NFRs

-------------------------------------------------------------------------------
<plugin>
    <groupId>org.apache.tomcat.maven</groupId>
    <artifactId>tomcat7-maven-plugin</artifactId>
    <version>2.2</version>
    <configuration>
          <path>/</path>
          <contextReloadable>true</contextReloadable>
    </configuration>
</plugin>

<dependency>
    <groupId>log4j</groupId>
    <artifactId>log4j</artifactId>
    <version>1.2.17</version>
</dependency>
-------------------------------------------------------------------------------

● Logging
● Error Handling
● Monitoring


또한 비기능 요구사항도 고려해야 한다 
● Logging
애플리케이션에는 로깅이 있어야 하고
● Error Handling
우수한 오류 처리 기능도 필요하다
● Monitoring
프로덕션 단계의 애플리케이션을 모니터링할 수 있어야 하고 프로덕션 단계 애플리케이션의 측정항목을 살펴볼 수 있어야 한다

Spring Boot 이전의 세계에선 이러한 작동하지 않는 기능을 수동으로 구현해야 했다 로깅 ,오류처리, 모니터링이 그것이다







Wrold Befor Spring Boot!

● Setting up Spring Projects before Spring Boot was NOT easy!
 ■ 1: Dependency Management (pom.xml)
 ■ 2: Define Web App Configuration (web.xml)
 ■ 3: Manage Spring Beans (context.xml)
 ■ 4: Implement Non Functional Requirements (NFRs)
● AND repeat this for every new project!
● Typically takes a few days to setup for each project (and countless hours to maintain)


따라서 Spring Boot 이전의 세계에서 프로젝트를 설정하기란 쉽지 않았다
 ■ 1: Dependency Management(pom.xml)
의존성을 관리해야 했고
 ■ 2: Define Web App Configuration (web.xml)
 ■ 3: Manage Spring Beans (context.xml)
Spring 컨텍스트에서 web.xml의 여러 설정을 제공해야 했다
 ■ 4: Implement Non Functional Requirements (NFRs)
또한 비기능 요구사항을 구현하기 위해 코드를 많이 작성해야 했다
● AND repeat this for every new project!
이 모든 작업은 새 프로젝트를 만들 때 마다 반복해야 한다 계속 이 작업을 반복해야 한다 
● Typically takes a few days to setup for each project (and countless hours to maintain)
이 작업에는 시간이 많이 든다, 설정하는데 며칠씩 걸리는게 일반적이다
또한 오랜동안 유지관리할 경우에는 작성한 코드를 유지관리하는 데 셀 수 없이 많은 시간을 들여야 한다






이 단계의 목표는 Spring Boot 이전 세계를 대략적으로 알아보는 것이다
의존성을 관리해야 했고 설정이 많이 필요했으며 비기능 요구사항을 수동으로 구현해야 했다
그렇다면 Spring Boot를 통해 얼마나 간편해졌을까? 




UnderStanding Power of Spring Boot

---------------------------------------------------------------
  // http://localhost:8080/courses
  [
    {
        "id" : 1,
        "name" : "Learn AWS",
        "author" : "in28minutes"
    }
  ]
---------------------------------------------------------------

● 1: Create a Spring Boot Project
● 2: Build a simple REST API using Spring Boot


그 내용을 다음 몇 단계에서 바로 알아보자
Spring Boot의 강력함을 이해하기 위해 
● 1: Create a Spring Boot Project
다음단계에선 Spring Boot Project를 만들고
● 2: Build a simple REST API using Spring Boot
그 다음 단계에선 Spring Boot를 사용하여 간단한 REST API를 빌드해 보자
