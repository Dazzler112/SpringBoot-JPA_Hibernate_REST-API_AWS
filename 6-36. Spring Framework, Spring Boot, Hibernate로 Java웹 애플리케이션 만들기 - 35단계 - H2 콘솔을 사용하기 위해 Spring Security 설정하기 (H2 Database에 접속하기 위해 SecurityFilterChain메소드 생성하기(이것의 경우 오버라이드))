

앞선 단계에서 우리는 H2 콘솔을 실행하면 오류가 났다

Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.

Thu May 09 17:56:43 KST 2024
There was an unexpected error (type=Forbidden, status=403).
Forbidden

타입이 Forbidden으로 나오고 상태는 403이다
이건 Spring Security에 의해 금지된 경우다
우리가 H2 콘솔에 액세스하기 위해 해야 할 설정이 약간 있다
그 설정에 대해 지금 바로 알아보자

지금까지 우리는 애플리케이션에 Spring Security를 사용해 왔다 

너가 localhost:8087/list-todos라고 입력하면 Todo가 표시되었다

----------------------------------------------------------------------------------------------------------------------


http://localhost:8087/list-todos 페이지화면 ==>

‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
in28Minutes   Home Todos                         (베이지? 바탕)                                           Logout                                            
_______________________________________________________________________________________________________________


      Your Todos

      Description	                      Taget Date	   Is Done?
      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                         _______________      _______________
      Get AWS Certified                 2025-05-08	   false            | Delete(노바탕) |   | Update (녹바탕) |
                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      ---------------------------------------------------------------------------------------------------------
                                                                         _______________      _______________
      Learn DevOps	                    2026-05-08	   false            | Delete(노바탕) |   | Update (녹바탕) |
                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      ---------------------------------------------------------------------------------------------------------
                                                                         _______________      _______________   
      Learn Full Stack Development	    2025-05-08     false            | DELETE(노바탕) |   | Update (녹바탕) |
                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      ---------------------------------------------------------------------------------------------------------
      _________________
     | Add Todo(녹바탕) |
      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

----------------------------------------------------------------------------------------------------------------------
하지만 Logout을 하고 list-todos를 입력하면 어떻게 될까?                                      |
                                                                                          V
--------------------------------------------------------------------------------------------------------------------

http://localhost:8087/login 페이지 화면 ==>


                                              Please sign in
                                               __________________________
                                              |                          |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
                                               __________________________
                                              |                          |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                               __________________________
                                              |         Sign in          |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
--------------------------------------------------------------------------------------------------------------------

보는 것처럼 양식으로 리디렉션이 된다 
우리가 여기 보고 있는 건 모두 양식이라고 부른다
너가 어떤 URL을 사용해도 결과는 같다
localhost:8080/등 어떤 다른 URL을 써도 이 페이지로 리디렉션될 것이다

기본값으로서, 만일 우리가 아무것도 설정하지 않으면 두 가지가 설정된다
	//All URLs are protected
	//A login form is shown for unauthorized requests
	//CSRF disable
	//Framework
첫째는 모든 URL이 보호된다는 점이고
둘째는 승인되지 않은 요청에 대해서는 로그인 양식이 표시된다는 점이다

즉 이런 기능들은 기본 기능이다, 그리고 우리가 H2 콘솔에 액세스 하려면 사이트 간 요청 위조, 즉 CSRF라는 걸 비활성화해야 한다, 
그리고 H2도 프레임이라는 걸 사용할 수 있다
HTML에서 너는 프레임을 사용할 수 있고, H2 웹사이트도 프레임을 사용한다
그리고 Spring Security는 기본값으로서 프레임을 허용하지 않으니, 우리는 프레임도 허용해줘야 한다 
이것들이 모두 우리가 지금 설정해야 할 것들이다

----------------------------------------------------------------------------------------------------------------------


⏺ SpringSecurityConfiguration 클래스파일



package com.firstapplication.springboot.myfirstwebapp.security;


//1-5: 그러면 import static이라고 org.springframework.security.config.Customizer.withDefaults라고 해준다 //1-6: 다시 filterChain()메소드로..
import static org.springframework.security.config.Customizer.withDefaults


import java.util.function.*;

import org.springframework.context.annotation.*;
import org.springframework.security.core.userdetails.*;
import org.springframework.security.crypto.bcrypt.*;
import org.springframework.security.crypto.password.*;
import org.springframework.security.provisioning.*;

@Configuration
public class SpringSecurityConfiguration {
	//LDAP or Database
	//In Memory
	
//	InMemoryUserDetailsManager
//	InMemoryUserDetailsManager(UserDetails...details users)
	
	@Bean
	public InMemoryUserDetailsManager createUserDetailsManager() {
		
		UserDetails userDetails1 = createNewUser("in28minutes", "dummy");
		UserDetails userDetails2 = createNewUser("ranga", "dummydummy");
		
		return new InMemoryUserDetailsManager(userDetails1, userDetails2);
	}

	private UserDetails createNewUser(String username, String password) {
		Function<String, String> passwordEncoder
		= input -> passwordEncoder().encode(input);
		
		UserDetails userDetails = User.builder()
								.passwordEncoder(passwordEncoder)
								.username(username)
								.password(password)
								.roles("USER", "ADMIN")
								.build();
		return userDetails;
	}
	
	@Bean
	public PasswordEncoder passwordEncoder() {
		
		return new BCryptPasswordEncoder();
	}
	
	//All URLs are protected
	//A login form is shown for unauthorized requests
	//CSRF disable
	//Framework

  //1: 여기서 우리가 설정하는 건 SecurityFilterChain이다, 그럼 public SecurityFilterChain이라고 해주자 열어보면 

  /*
   Defines a filter chain which is capable of being matched against an
   {@code HttpServletRequest}. in order to decide whether it applies to that request.

   HttpServletRequest에 매칭될 수 있는 필터 체인을 정의한다고 나오는 걸 볼 수 있다, 웹 요청이 들어오면 언제나 먼저 이 체인이 그걸 처리하게 된다

    public interface SecurityFilterChain {

	    boolean matches(HttpServletRequest request);

     	List<Filter> getFilters();

    }
   앞서 우리는 list-todos에 요청을 전송했을 때, 만일 사용자가 아직 인증되지 않았으면 로그인 페이지가 표시되는 걸 봤다
   그걸 이 SecurityFilterChain이 했다, 그리고 우린 지금 그걸 다시 설정하는 것이다

  */

  //SecurityFilterChain은 기본값으로서 이 두 기능만 제공한다 	//All URLs are protected, //A login form is shown for unauthorized requests
  //이제 우리는 거기에 두 가지 기능을 더 추가하려고 하고 	//CSRF disable, //Framework, 그리고 그걸 우리는 여기서 설정하고 있는 것이다
  //그럼 SecurityFilterChain으로 가보자 매서드 이름은 아무거나 쓸 수 있는데, 그냥 filterChain이라고 하고, 이 메서드에 대한 입력값은 HttpSecurity라는 객체이다
  /*
  A {@link HttpSecurity} is similar to Spring Security's XML &lt;http&gt; element in the
  namespace configuration. It allows configuring web based security for specific http
  requests. By default it will be applied to all requests, but can be restricted using
  {@link #requestMatcher(RequestMatcher)} or other similar methods.
  
  너가 HttpSecurity를 열고 상단에 있는 문서로 가보면 그게 웹 기반 보안을 설정하도록 해준다고 나와있다
  기본값으로서 이건 모든 요청에 적용될 것이다 아래로 스크롤을 해보면, 아주 많은 작업이 지원되는 걸 알 수 있다 그건 잠시 신경쓰지 않도록 하고
  닫고 우리 메서드에만 집중해보자
  */
  @Bean
	public SecurityFilterChain filterChain(HttpSecurity http) throws Exception {
      //1-1:그리고 이제 우리는 HttpSecurity를 설정하려고 한다, 우린 먼저 모든 요청을 승힌하려고 한다 그게 기본이고 우린 모든 URL을 보호하려고 한다, 그럼 http.authorizeHttpRequest()라고 해주자
      //여기서 우리는 승인을 어떻게 구현할지 정의해야 한다, 여기서 람다 함수를 정의해볼까?
      //그럼 우리는 모든 요청에 대해 그걸 하려고 하니 auth.anyRequest()라고 해주고 그걸 승인하려고 하니 .authenticated()라고 해준다, 이건 기본적인 거고
      //우리가 SecurityFilterChain을 설정하고 있으니 우린 이걸 설정해줘야 한다, 그럼 이렇게 http.authorizeHttpRequests()라고 해준다
      //1-3: 여기 미처리 타입 예외가 나오는 걸 볼 수 있는데 그러면 예외도 내보내겠다, 그럼 Add throws declaration을 선택하고 저장을 해보자
		  http.authorizeHttpRequests(
				auth -> auth.anyRequest().authenticated());

      //1-4: 다음으로 우린 로그인 양식을 표시하려고 한다, 그럼 우린 formLogin()이라는 걸 활성화해야 하고, formLogin()과 관련된 모든 기본값을 사용하려고 한다
      //그럼 그 기본값들은 어디에 정의되어 있을까? 그 기본값들은 Customizer의 정적 메서드에 정의되어 있다, 그럼 ctrl+shift+T를 누르고 customizer라고 입력한다음 spring-security-config 커스터마이저를 선택하면
      /*
      	static <T> Customizer<T> withDefaults() {
        		return (t) -> {
        		};
    	  }
      여기 정적 메서드가 있다 우리가 사용하려는 기본값이 있는 정적 메서드가 여기 있다
      그럼 public interface Customizer<T> { 이부분에 오른쪽을 누르고 Copy Qualified Name을 선택한다
      그리고 상단에서 정적 임포트를 해보자 //1-5:클래스 위의 상단으로...
      */
      //1-6: 그리고 우린 여기서 withDefaults()메서드를 사용할 수 있다 그럼 임포트를 정리하고 저장한다
      //이렇게 우리는 기본 기능을 설정했다, 하지만 우리는 SecurityFilterChain을 오버라이드하고 있기 때문에 우린 그걸 다시 정의해줘야 한다 
      //그리고 우린 여기서 원하는 건 뭐든지 할 수 있다
      http.formLogin(withDefaults());

      //1-7: 그럼 http.csrf().disable()이라고 해주자
      http.csrf().disable();
      //그리고 프레임 옵션을 비활성화하기 위해 http.headers().frameOptions().disable()이라고 해준다, 이렇게 하고 저장해보자
      http.headers().frameOptions().disable();

      //1-2: 지금 컴파일 오류가 나는데, 그럼 값을 리턴해서 그걸 해결하도록 하자
      //return http.build()를 하면 SecurityFilterChain이 리턴되는 걸 알 수 있다 그럼 그렇게해보자 //1-3:그럼에도 컴파일 오류가 나오는중 다시 위로..
      return http.build();
	}

}

----------------------------------------------------------------------------------------------------------------------

