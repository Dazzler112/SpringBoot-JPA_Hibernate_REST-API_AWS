


JDBC to Spring JDBC to JPA to Spring Data JPA
                                                                                         ______________________                                                                                                                            
● JDBC                                                                                  |   Spring Data JPA    |                                                                                                                       
 ■ Write a lot of SQL queries! (delete from todo where id=?)                             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                             
 ■ And write a lot of Java code                                                          ______________________                                                                                                                            
● Spring JDBC                                                                           |         JPA          |                                                                                                                   
 ■ Write a lot of SQL queries (delete from todo where id=?)                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
 ■ BUT lesser Java code                                                                  ______________________                                                                                                                             
● JPA                                                                                   |     Spring JDBC      |                                                                                                                      
 ■ Do NOT worry about queries                                                            ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
 ■ Just Map Entities to Tables!                                                          ______________________                                                                                                                            
                                                                                        |         JDBC         |                                                                                                             
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
                                                                                                                                 

지난 단계에서 Spring JDBC부터 JPA까지 마쳤는데, 
● JDBC
 ■ Write a lot of SQL queries! (delete from todo where id=?)
 ■ And write a lot of Java code    
JDBC에서 쿼리와 Java 코드를 많이 작성해야 했다
● Spring JDBC
 ■ Write a lot of SQL queries (delete from todo where id=?)
 ■ BUT lesser Java code
Spring JDBC로 하면 SQL 쿼리는 많이 작성했지만 Java 코드는 적었다, 
● JPA
 ■ Do NOT worry about queries 
 ■ Just Map Entities to Tables!
JPA는 다른 접근 방식을 제공했고 
쿼리는 전형 신경 쓰지 않아도 되고 엔티티만 테이블로 매핑한다 
-------------------------------------------------
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author,name,id) values (?,?,?)
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author,name,id) values (?,?,?)
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author,name,id) values (?,?,?)
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: delete from course where id=?
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Course [id=2, name=Learn Azure Jpa!, author=in28minutes]
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Course [id=3, name=Learn DevOps Jpa!, author=in28minutes]
코드에서 작업한 내용이 그렇다 
-------------------------------------------------

course 엔티티를 매핑했다 Course클래스파일로 가보겠다


-------------------------------------------------


package com.springstudy.springboot.learnjpaandhibernate.course;

import jakarta.persistence.*;

@Entity
public class Course {
	
	@Id
	private long id;
	
	private String name;
	
	private String author;
	
	public Course () {
		
	}
..
...
Course에 @Entity를 DB에 있는 COURSE테이블로 매핑했다 
JPA를 사용해서 데이터를 쉽게 삽일할 수 있었는데 이때 필요한 것이 EntityManager를 활용하는 것이였다 

package com.springstudy.springboot.learnjpaandhibernate.course.jpa;
import org.springframework.stereotype.*;
import com.springstudy.springboot.learnjpaandhibernate.course.*;
import jakarta.persistence.*;
import jakarta.transaction.*;

@Repository
@Transactional
public class CourseJpaRepository {

	@PersistenceContext 
	private EntityManager entityManager;
	
	public void insert (Course course) {	
		entityManager.merge(course);
	}
	public Course findById(long id) {
		return entityManager.find(Course.class, id);
	}
	
	public void deleteById(long id) {
		Course course = entityManager.find(Course.class, id);
		entityManager.remove(course);
	}

EntityManager는 엔티티 관리에 사용된다 
행을 삽입하거나 찾으려는 항목을 뭐든지 찾을 수 있고 원하면 엔티티를 삭제할 수도 있다
entityManager.merge, find, remove등 이런 메서드를 활용할 때 쿼리는 신경 쓸 필요가 없었다 
그냥 알맞은 entityManager 메서드를 호출하는 것에만 집중하면 되니까
	-------------------------------------------------
하지만 지난 단계 끝부분에서 백그라운드에서는 쿼리가 실행되고 있다는 걸 알 수 있었다
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author,name,id) values (?,?,?)
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author,name,id) values (?,?,?)
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author,name,id) values (?,?,?)
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: delete from course where id=?
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?

실행되고 있는 쿼리에 대해 복습해볼까? 

CourseCommandLineRunner로 가보겠다, 지금 JPA를 활용하고 있는데 

-----------------------------------------------------------------------------------------------------


⏺ CourseCommandLineRunner 클래스파일


package com.springstudy.springboot.learnjpaandhibernate.course;

import org.springframework.beans.factory.annotation.*;
import org.springframework.boot.*;
import org.springframework.stereotype.*;

import com.springstudy.springboot.learnjpaandhibernate.course.jpa.*;

@Component
public class CourseCommandLineRunner implements CommandLineRunner{

	@Autowired
	private CourseJpaRepository repository;

	@Override
	public void run(String... args) throws Exception {

		repository.insert(new Course(1, "Learn AWS Jpa!", "in28minutes"));
		repository.insert(new Course(2, "Learn Azure Jpa!", "in28minutes"));
		repository.insert(new Course(3, "Learn DevOps Jpa!", "in28minutes"));
		repository.deleteById(1);
		System.out.println(repository.findById(2));
		System.out.println(repository.findById(3));
	}
}
//처음 실행하는 3개 쿼리는 insert이고 그 다음 delete쿼리가 실행된다 그 뒤로는 findById가 있다
//Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
//Hibernate: insert into course (author,name,id) values (?,?,?)이게 실행되고 있는 쿼리이고 이게 insert 작업이 실행되는 과정이다
//EntityManager가 먼저 특정 ID를 가진 행이 없는지 확인하고 나서야 insert를 진행한다 이게 첫 번째 insert고 
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author,name,id) values (?,?,?)
//이건 두 번째 insert
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: insert into course (author,name,id) values (?,?,?)
//이건 세 번째 insert이다 

//다음으로 수행하는 작업은 delete인데 
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Hibernate: delete from course where id=?
//delete를 보면 delete에 있는 select쿼리도 실행하고 있다 
	public void deleteById(long id) {
		Course course = entityManager.find(Course.class, id);
		entityManager.remove(course);
	}
//deleteById를 보면 먼저 id로 course를 찾는 것을 알 수 있는데, 이게 select 쿼리를 실행한다, id를파라미터로 해서 Course id = id가 된다
//그런 행이 존재한다면 delete쿼리를 실행하게 된다 

//마지막 쿼리는 findById에 실행되는 select이다 
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Course [id=2, name=Learn Azure Jpa!, author=in28minutes]
Hibernate: select c1_0.id,c1_0.author,c1_0.name from course c1_0 where c1_0.id=?
Course [id=3, name=Learn DevOps Jpa!, author=in28minutes]
보다시피 위 쿼리는 ID=2에 실행되고 아래 쿼리는 ID=3에 실행되고 있다 

JPA를 활용할 때는 뒤에서 이런 일들이 일어나고 있다 최종적으로 여전히 실행되는 것은 SQL 쿼리이다 
하지만 코드에선 SQL을 작성하는 것은 신경 쓰지 않아도 된다 JAP를 선택하면 좋은 점이다 
-----------------------------------------------------------------------------------------------------


JPA Example
 _______________________________________________________________________________________________________________________                                                                                                                                       
|  @Repository                                                                                                          |                            
|  public class PersonJpaRepository {                                                                                   |                                                   
|                                                                                                                       |                 
|     @PersistenceContext                                                                                               |                                    
|     EntityManager entityManager;                                                                                      |                                             
|                                                                                                                       |                 
|     public Person findById (int id) {                                                                                 |                                                  
|        return entityManager.find(Person.class, id);                                                                   |                                                           
|     }                                                                                                                 |                  
|                                                                                                                       |                 
|     public Person update (Person person) {                                                                            |                                                       
|        retirn entityManager.merge(person);                                                                            |                                                    
|     }                                                                                                                 |                  
|                                                                                                                       |                 
|     public Person insert (Person person) {                                                                            |                                                       
|        return entityManager.merge(person);                                                                            |                                                    
|     }                                                                                                                 |                  
|                                                                                                                       |                 
|     public void deleteById (int id) { .......                                                                         |                                                          
|                                                                                                                       |                 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                                       
                                                                                                                                        
 _______________________________________________________________________________________________________________________                                                                                                                                      
|  public interface TodoRepository extends JpaRepository<Todo, Integer> {                                               |                                                                                       
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                                       
                                                                                                                                                                                                                                                                              
JPA를 활용할 때는 모든 작업을 EntityManager를 써서 할 수 있다                                                                                                                                         




JDBC to Spring JDBC to JPA to Spring Data JPA
                                                                                         ______________________                                                                                                                            
● JDBC                                                                                  |   Spring Data JPA    |                                                                                                                       
 ■ Write a lot of SQL queries! (delete from todo where id=?)                             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                             
 ■ And write a lot of Java code                                                          ______________________                                                                                                                            
● Spring JDBC                                                                           |         JPA          |                                                                                                                   
 ■ Write a lot of SQL queries (delete from todo where id=?)                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
 ■ BUT lesser Java code                                                                  ______________________                                                                                                                             
● JPA                                                                                   |     Spring JDBC      |                                                                                                                      
 ■ Do NOT worry about queries                                                            ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
 ■ Just Map Entities to Tables!                                                          ______________________                                                                                                                            
● Spring Data JPA                                                                       |         JDBC         |                                                                                                             
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                   
                                                                                                                                      
                                                                                                                                      

● Spring Data JPA 
이쯤에서 궁금해질 수도 있는 게, 이렇게 코드 작성이 쉬운데 Spring Data JPA는 왜 필요할까?
도대체 Spring Data JPA의 용도는 무엇일까? 다음 단계에서 파헤쳐보도록 하겠다
                                                                                                                        
