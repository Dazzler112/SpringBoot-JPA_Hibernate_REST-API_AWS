

지난 단계에서 REST API에 Spring Security 사용을 설정했고,
REST API가 성공적으로 인증되는 걸 확인할 수 있었다 
하지만 POST 요청을 하면, 예를 들어 localhost:8080/users로 POST 요청을 할 경우 인증헤더를 설정했지

-----------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | POST    | ▼  |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS

  HEADERS   ⬇                   | Form ▼ |        ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾           |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________   ___________________________     |   
☑ | Authorization|:|Basic dXNlcm5hbWU6cG..| 🧪 | 🗝 |    { 
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |      "name": "New User",
   ______________   ___________________________     |      "birthDate": "1997-08-11"
☑ |Content-Type  |:|application/json           |    |     }
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |
  ______________                                    |                                  
 ( + Add header )   🗝 Add authorization     🗑      |                                                       
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                    | 
                                                    |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                    |  
                                                    V
(🗝 를 클릭하면 따로 인증 화면이 나옴)


                  ___________________________________________________________________________
                 |  Authorization                                                            |
                 | _________________________________________________________________________ |
                 |                         _______________                                   |                      
                 |                   Type | Authorization |                                  |
                 |                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                   |
                 |                         ______________________________                    |                                          
                 |               Username | username                     |                   |             
                 |                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                    |                                 
                 |                         ______________________________                    |                                    
                 |               Password | ********                     |                   | 
                 |                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                    |                                           
                 |                         ▢ show password                                   |                                
                 |                                                                           |             
                 |‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾|                                                                                  
                 |                                                 ___________    ________   |                                
                 |                                                | X Cancel  |  | ✔ Set  |  |                              
                 |                                                 ‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾   |                                 
                  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

-----------------------------------------------------------------------------------------------------------------

편집을 누르면 사용자 이름과 비밀번호가 정확히 설정되어 있고, 
콘텐츠 타입으로 application/json을 보내고 본문도 제대로 되어있다
이름은 "New User"로, 생년월일은 이렇게 되어 있지
전송을 누르면   
                                                    |
                                                    V
-----------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  401                (빨간색 바탕)
___________________________________________________________________________________________________

  HEADERS                       | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                |
Vary:	Origin                                    |    {                                
Vary:	Access-Control-Request-Method             |     timestamp:"2024-06-13",                                    
Vary:	Access-Control-Request-Headers            |     status: 403,                                     
X-Content-Type-Options:	nosniff                 |     error: "Forbidden",                                
X-XSS-Protection:	0                             |     message: "Forbidden",                                    
Cache-Control:no-cache, no-store, max-age=0,    |     path: "/users"
              must-revalidate                   |    }
Pragma:	no-cache                                |                                            
Expires:	0                                     |                                   
X-Frame-Options:	DENY                          |                                          
WWW-Authenticate:	Basic realm="Realm"           |                                                       
Content-Length:	0 byte                          |                                              
Date:	Thu, 13 Jun 2024 08:25:31 GMT             |                                                     
Keep-Alive:	timeout=60                          |                                                        
Connection:	keep-alive                          |                                                                                
                                                |                                                    
▶ COMPLETE REQUEST HEADERS        
                                                     lines nums 📄 copy            length: 116 bytes


-----------------------------------------------------------------------------------------------------------------
403 응답이 돌아온다
금지되었다는 뜻인데 어떻게 바로 잡을까?
바로 이번 단계에서 살펴보게 될 내용이다


문제 해결 방법을 알아보기 전에  Spring Security의 원리를 고차원으로 살펴보겠다

🔵 Spring Security 원리

●Spring Security

● Filter Chains
  ■ 1) All requests should be authenticated
  ■ 2) If a request is not authenticated, a web page is shown
  ■ 3) CSRF -> POST , PUT


● Configuration

● Bean FilterChain

요청을 보낼 때마다 Spring Security가 해당 요청을 가로 챈다
예를 들어 니가 localhost:8080/users로 요청을 보내면 Spring Serurity가 이 요청을 가로채서 일련의 필터를 실행한다
Filter Chains
이런 일련의 필터를 필터 체인이라고 하는데
필터 체인에서 확인이 여러 차례 이루어진다
  ■ 1) All requests should be authenticated
1번은 모든 요청이 인증되어야 한다는 건데,
모든 요청에 자격 증명이 첨부되어야 겠지 그게 첫 번째 확인 절차고 
  ■ 2) If a request is not authenticated, a web page is shown
요청이 인증되지 않았다면, 자격 증명이 없거나 인증되지 않았다면 기본값으로 웹 페이지가 나타난다
실제 모습을 확인해보자, 브라우저를 모두 닫고 크롬을 다시 시작해 보겠다 
localhost users로 가보면 

-----------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/login 페이지 화면 ==>


                                              Please sign in
                                               __________________________
                                              |Username                  |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
                                               __________________________
                                              |Password                  |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                               __________________________
                                              |         Sign in          |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-----------------------------------------------------------------------------------------------------------------
이 웹 페이지가 나오지.

  ■ 3) CSRF -> POST , PUT
3번은 필터 체인에서 수행되는 것 중 하나가 CSRF라고 하는 걸 확인할 수 있게 설정하는 건데 
이렇게 하면 POST 와 PUT 요청에 영향을 주게 된다

그 외에도 필터 체인에서 수행되는 것들이 아주 많다 


이제 필터 체인을 커스터마이징해볼 텐데
기존 필터 체인에서 수정해야 할 게 두가지 있다

🔵 필터 체인 커스터마이징 수정 할 두 가지

1.
하나는
-----------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/login 페이지 화면 ==>


                                              Please sign in
                                               __________________________
                                              |Username                  |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 
                                               __________________________
                                              |Password                  |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                               __________________________
                                              |         Sign in          |
                                               ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
-----------------------------------------------------------------------------------------------------------------
여기에서 나타나는 웹 페이지가 있다는 사실인데 
로그인 페이지가 나오면 웹 애플리케이션에 정말 좋지 
하지만 REST API의 경우에는 HTTP 기본 인증이라는 걸 사용하려고 하니까 사용자 자격 증명을 묻는 팝업창이 떠야 한다

이게 필터 체인에서 변경하려는 한 가지 사항이고
HTTP 인증을 사용할 때는 localhost users를 입력하게 되면 

2.
두 번째는 
CSRF를 해체해서 POST 요청을 보낼 수 있게 하는 것이다, Spring Security에서 기존 필터 체인을 오버라이드 하려면
체인 전체를 다시 정의해야 한다

● Configuration
그럼 이제 Spring 설정 파일을 생성하고 
● Bean FilterChain
여기에 필터 체인을 정의할 Bean을 생성하고, 
  ■ 1) All requests should be authenticated
  ■ 2) If a request is not authenticated, a web page is shown
  ■ 3) CSRF -> POST , PUT
필터 체인을 구성하는 모든 단계를 정의할 것이다


