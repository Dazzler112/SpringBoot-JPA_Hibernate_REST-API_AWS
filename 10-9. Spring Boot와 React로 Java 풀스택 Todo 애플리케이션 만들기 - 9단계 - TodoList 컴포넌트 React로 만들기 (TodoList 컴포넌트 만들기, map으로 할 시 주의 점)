

이번 시간에는 TodoList 컴포넌트를 만들어보자

컴포넌트의 일부로 Todo를 목록으로 만들어 보여주고 싶다
컴포넌트 중 하나를 복사한다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import {BrowserRouter, Routes, Route, useNavigate, useParams} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <BrowserRouter>
                <Routes>
                    <Route path='/' element={<LoginComponent />}></Route>
                    <Route path='/login' element={<LoginComponent />}></Route>
                    <Route path='/welcome/:username' element={<WelcomeComponent />}></Route>
                    <Route path='*' element={<ErrorComponent />}></Route>
                </Routes>
            </BrowserRouter>
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)
    const navigate = useNavigate();

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
            navigate(`/welcome/${username}`)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            <h1>Time to Login!</h1>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {

    const {username} = useParams()

    console.log(username)

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Welcome Component
            </div>
        </div>
    )
}

function ErrorComponent() {
    return (
        <div className='ErrorComponent'>
            <h1>We are working really hard!</h1>
            <div>Apologies for the 404. Reach out to our team at ABC-DEF-GHIJ</div>
        </div>
    )
}

//1: 에러 컴포넌트를 복사하겠다 ,그리고 ListTodosComponent라 한다
function ErrorComponent() {
    return (
        //1-1: className은 ListTodosComponent
        <div className='ErrorComponent'>

            //1-2: 그리고 h1에는 Things You Want To Do!라 적고
            <h1>Things You Want To Do!</h1>

            //1-3: div안에는 모든 Todo를 넣어야겠지, Todo Details가 여기에 들어간다
            <div>Todo Details</div>
        </div>
    )
}
-----------------------------------------------------------------------------------------------

일단 최소한 ListTodosComponent가 작동하려면
일단 라우터를 정의해야겠지

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import {BrowserRouter, Routes, Route, useNavigate, useParams} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <BrowserRouter>
                <Routes>
                    <Route path='/' element={<LoginComponent />} />
                    <Route path='/login' element={<LoginComponent />} />
                    <Route path='/welcome/:username' element={<WelcomeComponent />} />

                    //2: 여기로 와서 위의 Route를 하나 복사하고 여기 붙이고, ListTodosComponent로 라우팅하고 싶다 
                    //path에 /todos라 적겠다, 경로 순서는 중요하지 않지만 주로 에러 컴포넌트는 마지막에 넣는다
                    <Route path='/todos' element={<ListTodosComponent />} />

                    //2-1: 에러 컴포넌트는 밑에 두겠다, 그리고 또 하나는 사실 여기 닫는 태그는 필요없다, Route에 별도의 닫는 태그가 필요없다
                    //Route 자체에는 내용이 없기 때문에 </Route> 이게 아닌 그냥 직접 /> 이렇게 닫아주면 된다 (</Route> 삭제하고 />로 닫아주는 걸로 수정), 그럼 더 간단해진다 모두 이렇게 하겠다
                    //닫는 태그를 지우고 /를 넣어서 닫는 거지 , 이제 저장하면 되겠지
                    <Route path='*' element={<ErrorComponent />} />
                </Routes>
            </BrowserRouter>
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)
    const navigate = useNavigate();

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
            navigate(`/welcome/${username}`)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            <h1>Time to Login!</h1>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {

    const {username} = useParams()

    console.log(username)

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Welcome Component
            </div>
        </div>
    )
}

function ErrorComponent() {
    return (
        <div className='ErrorComponent'>
            <h1>We are working really hard!</h1>
            <div>Apologies for the 404. Reach out to our team at ABC-DEF-GHIJ</div>
        </div>
    )
}

function ListTodosComponent() {
    return (
        <div className='ListTodosComponent'>
            <h1>Things You Want To Do!</h1>
            <div>Todo Details</div>
        </div>
    )
}
-----------------------------------------------------------------------------------------------

그럼 /todos를 탐색해보겠다
사이트에 /todos를 해보면

                                        |
                                        V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                 Things You Want To Do!
                                      
                                     Todo Details




-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

Things You Want To Do! , Todo Details 잘 뜬다


일단은 Todo를 하드 코딩으로 넣어서 여기 보여줄 것이다

하드 코딩을 해보자
몇 개의 todo를 넣어보자

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import {BrowserRouter, Routes, Route, useNavigate, useParams} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <BrowserRouter>
                <Routes>
                    <Route path='/' element={<LoginComponent />} />
                    <Route path='/login' element={<LoginComponent />} />
                    <Route path='/welcome/:username' element={<WelcomeComponent />} />
                    <Route path='/todos' element={<ListTodosComponent />} />
                    <Route path='*' element={<ErrorComponent />} />
                </Routes>
            </BrowserRouter>
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)
    const navigate = useNavigate();

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
            navigate(`/welcome/${username}`)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            <h1>Time to Login!</h1>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {

    const {username} = useParams()

    console.log(username)

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Welcome Component
            </div>
        </div>
    )
}

function ErrorComponent() {
    return (
        <div className='ErrorComponent'>
            <h1>We are working really hard!</h1>
            <div>Apologies for the 404. Reach out to our team at ABC-DEF-GHIJ</div>
        </div>
    )
}

function ListTodosComponent() {

    //3: 여기에 const로 정의하겠다 todos = 일단 하나로 해볼까 todos의 값으로 id가 1, 그리고 description을 이렇게 써보자 'Learn AWS'
    const todos = {id : 1, description : 'Learn AWS'}

    return (
        <div className='ListTodosComponent'>
            <h1>Things You Want To Do!</h1>
      
            //3-1: 그리고 여기에서 Todo Details를 보여주는 거지, 일단은 todos가 하나인데 나중에는 많아질 것이다, 그래서 여기에 테이블을 만들겠다
            <div>
                //3-2: Todos 목록을 보여주기 위한 테이블을 만들고 테이블 태그도 닫아준다
                <table>
                //3-3: 그리고 테이블에는 항상 thead라고 헤더가 들어가는 곳이 있다, 테이블 헤더는 여기 thead에 들어가야한다
                     <thead>
                       //3-5: thead안에 tr은 행을 말한다
                        <tr>
                           //3-6: 일단 우리는 id만 있으니까 <td>id 그리고 description이지 ,간단한 테이블을 만들어봤다, 여기 tr을 복사해서 tbody에도 넣어주겠다
                           <td>id</td>
                           <td>description</td>
                        </tr>
                    </thead>
                //3-4: 그리고 tbody는 실제 콘텐츠가 들어가는 거지, 
                    <tbody>
                      //3-7: (붙여넣기) 일단 저장하고 들여쓰기 한다
                        <tr>
                            //3-8: 그리고 여기는 id와 description 대신 todos의 값을 보여주고 싶다
                            //그러려면 todos.id와 todos.description이라고 적으면 되겠지, JavaScript에서 값을 가져와 JSX에서 보여주는 것이다, 중괄호 사이에 넣어주었다, 저장하고
                            <td>{todos.id}</td>
                            <td>{todos.description}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    )
}
-----------------------------------------------------------------------------------------------

브라우자로 가보자

                                        |
                                        V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                 Things You Want To Do!
                                      
id description
1  Learn AWS



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

좋다 id와 description이 있지
1 Learn AWS도 잘 보인다


이제 Todos를 많이 만들고 싶다
어떻게 하지?

배열을 만들어야 한다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import {BrowserRouter, Routes, Route, useNavigate, useParams} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <BrowserRouter>
                <Routes>
                    <Route path='/' element={<LoginComponent />} />
                    <Route path='/login' element={<LoginComponent />} />
                    <Route path='/welcome/:username' element={<WelcomeComponent />} />
                    <Route path='/todos' element={<ListTodosComponent />} />
                    <Route path='*' element={<ErrorComponent />} />
                </Routes>
            </BrowserRouter>
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)
    const navigate = useNavigate();

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
            navigate(`/welcome/${username}`)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            <h1>Time to Login!</h1>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {

    const {username} = useParams()

    console.log(username)

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Welcome Component
            </div>
        </div>
    )
}

function ErrorComponent() {
    return (
        <div className='ErrorComponent'>
            <h1>We are working really hard!</h1>
            <div>Apologies for the 404. Reach out to our team at ABC-DEF-GHIJ</div>
        </div>
    )
}

function ListTodosComponent() {

    //4: 여기에서 배열을 만들 것이다, {}이건 한 개 요소를 가진 배열이고 요소를 더 만들어 보겠다
    //여기에 요소를 담는 것이다 처음껀 1, Learn AWS지 두 번째는 지금 하고 있는 걸 적겠다, Learn Full Stack Dev, 세 번째는 Learn DevOps라고 하겠다 Kubernetes나 Docker도 배우고 싶다면 DevOps를 배워야겠지
    //그리고 여기에 다 보여주고 싶다, 여기 있는 세 개의 값을 각각의 행으로 여기 보여주고 싶은 거지, 그 전에 일단 여기로 가서 JavaScript 콘솔로 갈 것이다
    const todos = [
                    {id : 1, description : 'Learn AWS'},
                    {id : 1, description : 'Learn Full Stack Dev'},
                    {id : 1, description : 'Learn DevOps'}
                  ]

    return (
        <div className='ListTodosComponent'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table>
                    <thead>
                        <tr>
                            <td>id</td>
                            <td>description</td>
                        </tr>
                    </thead>
                    <tbody>
                         <tr>
                         <td>{todos.id}</td>
                         <td>{todos.description}</td>
                        </tr>
                    </tbody>
                </table>
            </div>
        </div>
    )
}
-----------------------------------------------------------------------------------------------

여기 작성한 todos를 복사해서 크롬으로 가서 콘솔로 간 다음
마우스 오른쪽 클릭해 검사를 누르면 콘솔이 보이지
                                        |
                                        V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                 Things You Want To Do!
                                      
id description
1  Learn AWS



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
    //여기 붙여 넣겠다 const로 todos 배열을 만들고 있는 것이다
  >     const todos = [
        {id : 1, description : 'Learn AWS'},
        {id : 1, description : 'Learn Full Stack Dev'},
        {id : 1, description : 'Learn DevOps'}
      ]
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  <• undefined
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //todos를 출력해보면
  > todos
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   //이렇게 3개의 요소를 포함한 배열을 출력한다
  <• ▼ (3) [{…}, {…}, {…}]
    ▶ 0: {id: 1, description: 'Learn AWS'}
    ▶ 1: {id: 1, description: 'Learn Full Stack Dev'}
    ▶ 2: {id: 1, description: 'Learn DevOps'}
      length: 3
    ▶ [[Prototype]]: Array(0)


 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //만약 todos[0]을 출력하면 뭐가 나오지?
  > todos[0]
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //첫 번째 요소의 id와 description이 나온다 Learn AWS지, JavaScript에는 각 배열에 forEach 메서드가 있다
  <• ▼ {id: 1, description: 'Learn AWS'}
          description: "Learn AWS"
          id: 1
        ▶ [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //forEach 메서드 안에서 배열의 각 요소로 무엇을 할지 정의할 수 있다
  //각 요소를 가져와서, 여기에선 화살표 함수를 사용하겠다, 이게 화살표 함수인데 => 이렇게 쓰는 거지
  //각 요소에 대해 console.log로 요소를 출력하겠다
  //todos.forEach에서 괄호를 열고 elt 이건 element를 줄인 거지 elt라 썼는데 정확하게 element라고 다시  쓰겠다 => 기호를 쓰고 console.log 하고 괄호열고(element)지 괄호닫고 forEach에 해당하는 괄호도 닫는다
  //이렇게 엔터를 누르면
  > todos.forEach( element => console.log(element) )
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //어떻게 되지? 배열의 각 요소가 개별적으로 출력되지, 각 요소에 대해 console.log를 수행하는 것이다
  <• ▼ {id: 1, description: 'Learn AWS'}                                         VM254:1          
          description: "Learn AWS"
          id: 1
        ▶ [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  <• ▼ {id: 1, description: 'Learn Full Stack Dev'}                              VM254:1
          description: "Learn Full Stack Dev"
          id: 1
        ▶ [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  <• ▼ {id: 1, description: 'Learn DevOps'}                                      VM254:1
          description: "Learn DevOps"
          id: 1
        ▶ [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  <• undefined
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //비슷하게 map이라는 메서드도 있다, 배열 안의 각 요소를 다른 데로 매핑하는 거지
  //예를 들어 배열의 각 요소를 id로 매핑하는 것이다, 모든 요소의 id 값만 여기 공간으로 가져오는 거지
  //todos.map 괄호 열고 element 그리고 화살표 함수 => 를 사용하고 element.id하고 엔터를 누른다
  > todos.map (element => element.id)
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //그럼 id만으로 배열이 생성된게 보이지
  <• ▼ (3) [1, 1, 1]
        0: 1
        1: 1
        2: 1
        length: 3
        ▶ [[Prototype]]: Array(0)
-------------------------------------------------------------------------------------------

근대 문제가 있다

------------------------------------------------
    const todos = [
                    {id : 1, description : 'Learn AWS'},
                    {id : 1, description : 'Learn Full Stack Dev'},
                    {id : 1, description : 'Learn DevOps'}
                  ]
------------------------------------------------
여기 id가 모두 1이다
좋지 않다 바꾸자
                        |        
                        V
------------------------------------------------
    const todos = [
        {id : 1, description : 'Learn AWS'},
        {id : 2, description : 'Learn Full Stack Dev'},
        {id : 3, description : 'Learn DevOps'}
      ]
------------------------------------------------
1,2,3으로 바꾸고 저장하겠다

다음으로 매핑하고 싶은 건 description이다

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                 Things You Want To Do!
                                      
id description
1  Learn AWS



-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  > todos.map (element => element.id)
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  <• ▼ (3) [1, 1, 1]
        0: 1
        1: 1
        2: 1
        length: 3
        ▶ [[Prototype]]: Array(0)
-------------------------------------------------------------------------------------------
  // description이지, 지금 element를 id나 description으로 매핑하고 있다
  > todos.map (element => element.description)
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  //그러면 description만 배열이 생성된 게 보이지 , id만으로도 배열이 생성되고
  <• ▼ (3) ['Learn AWS', 'Learn Full Stack Dev', 'Learn DevOps']
        0: "Learn AWS"
        1: "Learn Full Stack Dev"
        2: "Learn DevOps"
        length: 3
       ▶ [[Prototype]]: Array(0)
-------------------------------------------------------------------------------------------

이와 비슷하게 각 요소와 일치하는 JSX로 매핑하는 작업을 하고 싶다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx



import { useState } from 'react'
import {BrowserRouter, Routes, Route, useNavigate, useParams} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <BrowserRouter>
                <Routes>
                    <Route path='/' element={<LoginComponent />} />
                    <Route path='/login' element={<LoginComponent />} />
                    <Route path='/welcome/:username' element={<WelcomeComponent />} />
                    <Route path='/todos' element={<ListTodosComponent />} />
                    <Route path='*' element={<ErrorComponent />} />
                </Routes>
            </BrowserRouter>
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)
    const navigate = useNavigate();

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
            navigate(`/welcome/${username}`)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            <h1>Time to Login!</h1>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {

    const {username} = useParams()

    console.log(username)

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Welcome Component
            </div>
        </div>
    )
}

function ErrorComponent() {
    return (
        <div className='ErrorComponent'>
            <h1>We are working really hard!</h1>
            <div>Apologies for the 404. Reach out to our team at ABC-DEF-GHIJ</div>
        </div>
    )
}

function ListTodosComponent() {

    const todos = [
        {id : 1, description : 'Learn AWS'},
        {id : 2, description : 'Learn Full Stack Dev'},
        {id : 3, description : 'Learn DevOps'}
      ]

    return (
        <div className='ListTodosComponent'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table>
                    <thead>
                        <tr>
                            <td>id</td>
                            <td>description</td>
                        </tr>
                    </thead>
                    <tbody>

                     //5: 여기에서 요소 전체를 이 JSX로 매핑하고 싶은 거지 어떻게 할까? 지금 정의해 보겠다
                     //여기에 동적 값을 넣을 것이다 중괄호를 열고 닫아주겠다, 여기에서 todos의 값을 가져오는 것이다
                      {
                        //5-1: todos.map이라 하고 괄호를 열고 닫아준다, 각 todo 값을 가지고 할 것이다
                        todos.map(
                          //5-2: 다른 데 매핑할 것이다 어디로 매핑하지? 여기 보이는 이 행에다 매핑한다, JSX 표현식이 복잡하니까
                          // 괄호를 열고 닫은 다음 그 사이에 이걸 복사해서(tbody의 tr태그)
                           todo => (
                                  //5-3: 여기 넣겠다
                                    <tr>
                                      //5-4: 그리고 여긴 todos.id 가 아니라 todo.id가 들어가야 되겠고 todo.description이지
                                      //각 todo를 JSX 표현식으로 매핑해서 각 todo에 해당하는 tr을 만들었다, 저장하고
                                     <td>{todos.id}</td>
                                     <td>{todo.description}</td>
                                    </tr>
                           )
                        )
                      }
                        /* (이부분 잘라내서 위로 붙여넣기 여기서만 주석 처리 실제 코드는 잘라서 없음)
                         <tr>
                         <td>{todos.id}</td>
                         <td>{todos.description}</td>
                        </tr>
                        */
                    </tbody>
                </table>
            </div>
        </div>
    )
}
-----------------------------------------------------------------------------------------------

페이지로 가보면 보이겠지?
                                    |
                                    V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                 Things You Want To Do!
                                      
id description
1  Learn AWS
2	Learn Full Stack Dev
3	Learn DevOps


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

❗ ▶ Warning: Each child in a list should have a unique "key" prop.          TodoApp.jsx:117

  Check the render method of `ListTodosComponent`. See 
  https://reactjs.org/link/warning-keys for more information.
      at tr
      at ListTodosComponent
      at RenderedRoute (http://localhost:3000/static/js/bundle.js:39829:5)
      at Routes (http://localhost:3000/static/js/bundle.js:40520:5)
      at Router (http://localhost:3000/static/js/bundle.js:40454:15)
      at BrowserRouter (http://localhost:3000/static/js/bundle.js:38407:5)
      at div
      at TodoApp
      at div
      at App
-------------------------------------------------------------------------------------------

id가 있고 description이 있지
1 Learn AWS, 2	Learn Full Stack Dev, 3	Learn DevOps
출력된 값이 모두 보이지

경고가 하나 떴다, 한번 보자
리스트의 각 자식은 유일한 키 속성을 가져야 한다 (Each child in a list should have a unique "key" prop.)
리액트에선 리스트를 사용할 때 각 요소가 유일한 키를 갖는 것이 좋다


리액트는 ID로 DOM 요소를 업데이트한다, 리액트를 효율적으로 잘 사용하려면
키를 추가하는 게 좋겠지

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ TodoApp.jsx




import { useState } from 'react'
import {BrowserRouter, Routes, Route, useNavigate, useParams} from 'react-router-dom'
import './TodoApp.css'

export default function TodoApp() {
    return(
        <div className='TodoApp'>
            <BrowserRouter>
                <Routes>
                    <Route path='/' element={<LoginComponent />} />
                    <Route path='/login' element={<LoginComponent />} />
                    <Route path='/welcome/:username' element={<WelcomeComponent />} />
                    <Route path='/todos' element={<ListTodosComponent />} />
                    <Route path='*' element={<ErrorComponent />} />
                </Routes>
            </BrowserRouter>
        </div>
    )
}

function LoginComponent() {

    const [username, setUsername] = useState('in28minutes')
    const [password, setPassword] = useState('')
    const [showSuccessMessage, setShowSuccessMessage] = useState(false)  
    const [showErrorMessage, setShowErrorMessage] = useState(false)
    const navigate = useNavigate();

    function handleUsernameChange(event) {
        setUsername(event.target.value);
    }

    function handlePasswordChange(event) {
        setPassword(event.target.value);
    }

    function handleSubmit() {

        if(username === 'in28minutes' && password === 'dummy') {
            console.log('Success');
            setShowSuccessMessage(true)
            setShowErrorMessage(false)
            navigate(`/welcome/${username}`)
        }else {
            console.log('Failed');
            setShowSuccessMessage(false)
            setShowErrorMessage(true)
        }
    }
    
    return (
        <div className='Login'>
            <h1>Time to Login!</h1>
            {showSuccessMessage && <div className="errorMessage">Authentication Failed. Please check your credentials.</div>}
            {showErrorMessage && <div className="errorMessage">Authentication Failed. 
                                                        Please check your credentials.</div>}
            <div className='LoginForm'>
                <div>
                    <label>User Name:</label>
                    <input type="text" name="username" value={username} onChange={handleUsernameChange} />
                </div>
                <div>
                    <label>Password:</label>
                    <input type="password" name="password" value={password} onChange={handlePasswordChange}/>
                </div>
                <div>
                    <button type="button" name="login" onClick={handleSubmit}>login</button>
                </div>
            </div>
        </div>
    )
}


function WelcomeComponent() {

    const {username} = useParams()

    console.log(username)

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Welcome Component
            </div>
        </div>
    )
}

function ErrorComponent() {
    return (
        <div className='ErrorComponent'>
            <h1>We are working really hard!</h1>
            <div>Apologies for the 404. Reach out to our team at ABC-DEF-GHIJ</div>
        </div>
    )
}

function ListTodosComponent() {

    const todos = [
        {id : 1, description : 'Learn AWS'},
        {id : 2, description : 'Learn Full Stack Dev'},
        {id : 3, description : 'Learn DevOps'}
      ]

    return (
        <div className='ListTodosComponent'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table>
                    <thead>
                        <tr>
                            <td>id</td>
                            <td>description</td>
                        </tr>
                    </thead>
                    <tbody>
                        {

                            todos.map(
                                todo => (
                             //6: 여기에 키를 추가해 보겠다 여기 tr에다가 key속성을 주고 id 필드를 그냥 사용하겠다 key={todo.id} 잘 됐다
                                    <tr key={todo.id}>
                                        <td>{todo.id}</td>
                                        <td>{todo.description}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}
-----------------------------------------------------------------------------------------------

새로 고침하고
                                    |
                                    V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  


                                 Things You Want To Do!
                                      
id description
1  Learn AWS
2	Learn Full Stack Dev
3	Learn DevOps


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

페이지를 새로 고침 하면 이제 경고가 나오지 않는 게 보이지









이번 시간에는 ListTodoComponent를 만들어봤다
리스트 컴포넌트에서도 할 일이 조금 더 있는데
다음 시간에 해보겠다
