

                                ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       |     8: @Bean vs      | ㅡ  |    9: @Primary vs    |
 |     1: Coupling      |      |      @Component      | ㅡ  |      @Qualifier      |
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    ||                              ||                          ||
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |  2: Java Interfaces  |      |    7: Annotations    |     |    10: Hands-on     |                    
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    ||                              ||
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |      3: Spring       |      |    6: Dependency     |
 |       Container      |      |    Injection Types   |
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
    ||                              ||
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ   ㅡ    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |    4: Java Bean vs   |  ㅡ   |    5: Dependency     |
 |      Spring Bean     |       |      Injection       | 
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ         ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

이번 섹션이 너에게 좋은 학습 경험을 제공했다 생각한다
지난 2개 섹션을 통해 Spring 프레임워크를 소개했었는데 
(1,2)결합도가 무엇인지, 어떻게 자바 인터페이스를 써서 느슨한 결합을 도입할 수 있는지 이해할 수 있었다
(3)Spring 컨테이너를 시작하는 방법도 익혔다 
애플리케이션 컨텍스트를 사용해서 Spring 컨테이너를 시작했으며, 여러 Spring Bean을 만들었는데,
(4)자바 Bean과 Spring Bean의 차이점에 대해서도 다뤘다
(5)몇 가지 가장 중요한 Spring 개념도 학습할 수 있었다 의존성, 자동 와이어링, 의존성 주입에 대해 이해하는 시간을 가졌는데
(6)의존성 주입의 여러 유형을 짚어보고, 
(7)Spring 프레임워크 관련 가장 중요한 어노테이션 중 몇 가지를 살펴보기도 했다 
(8)@Bean, @Component, @Configuration, @Primary, @Qualifier를 짚어보고 
(9,10)각각을 언제 사용해야 하는지도 알게 되었다, 이 모든 개념을 익히기 위해 실습을 해보기도 했다


전에 말했듯이 Spring 프레임워크를 잘 이해한다면 훌륭한 개발자가 되기 위한 길을 잘 밟고 있는 것이다
여기서 학습한 개념은 Spring 기반의 훌륭한 애플리케이션을 구축하는 데 유용하기도 하지만 
문제를 디버깅하는 데도 유용하다 






이제 다음 섹션의 학습 내용을 간단히 살펴보려 한다
Spring 프레임워크의 몇 가지 중요한 기본 사항을 짚어봤으니, 이제 다음 섹션을 통해 한층 심화된 내용을 다뤄보자


  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 | 1: Lazy Innitialization  |      |  8: Spring Big Picture  | ㅡ  |    9: Spring Modules &   |
 |                          |      |                         | ㅡ  |         Projects         |
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
      ||                                 ||                               ||
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |     2: Bean Scopes      |       |    7: Alternatives -    |     |    10: Why is Spring    |                    
 |                         |       |       @Component        |     |        Popular?         |
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ       ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
      ||                                 ||
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |     3: PostConstruct    |      |   6: XML Configuration   |
 |        PreDestroy       |      |                          |
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ        ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
      ||                                 ||
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ   ㅡ    ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
 |      4: Jakarta EE      |  ㅡ   |    5: Contexts &         |
 |                         |       |  Dependency Injection    | 
  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ         ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

(1)지연 초기화에 대해 학습하려 한다
지금까지 우리가 만든 모든 Bean은 Spring 컨테이너의 시작에서 초기화되었는데 지연 초기화를 어떻게 적용할 수 있을까?
(2)이를 짚어본 후, Spring 프레임워크에 있는 다양한 Bean의 범위를 다룰 예정이다
프로토타입과 싱글톤이라는 2가지 중요한 개념에 집중할 것이다
(3)그다음 PostConstruct와 PreDestroy를 다룰 것이고
Bean의 의존성이 준비된 후 어떤 작업을 수행하거나, Spring 컨텍스트에서 Bean이 제거되기 전에 작업을 해야 한다면
바로 이 경우 PostConstruct와 PreDestroy 메소드를 무척 유용하게 사용할 수 있다
PostConstruct와 PreDestroy를 이해한 후 (4)J2EE, 자바 EE, 자카르타 EE의 역사에 대해 가볍게 다뤄보려고 하는데,
(5)그리고 CDI라고 하는 컨텍스트 및 의존성 주입에 대해서도 짚어보려 한다
자카르타 EE의 의존성 주입과 관련된 중요한 사양 중 하나이다
(6)이번 학습에선 지금까지 자바 설정을 사용하고 있는데 우리가 정의한 모든 설정은 자바 소스 파일에 정의되어 있다
20년 전에는 대다수 프로젝트에 XML 설정을 사용했었는데 이번 섹션에선 XML 설정에 대해 알아보고 자바와 XML 설정의 차이점을 비교해보고, 
또 언제 XML 설정을, 언제 자바 설정을 사용해야 하는지에 대해서도 짚어보려 한다
(7)그다음 @Component와 관련된 여러 대안에 대해서도 살펴볼 텐데 
이를 Spring 스테레오타입 어노테이션이라고 하는데, 관련하여 @Component, @Service, @Repository등에 대해 알아보려 한다
(8)섹션의 마지막에는 Spring 프레임워크에 대한 전반적인 모습을 그릴수 있을 것이다
(9)Spring 모듈과 Spring 프로젝트를 다루고, 
(10)오늘날 Spring 프레임워크가 자바 세계 최고의 프레임워크인 이유에 대한 견해를 들려주도록 하겠다
