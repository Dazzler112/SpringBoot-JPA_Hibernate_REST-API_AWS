

지난 시간에는 AuthContext를 생성하고 다른 컴포넌트와 공유하는 방법을 배웠다
정말 잘 되냐?
State가 동적으로 변하면 그 변화도 볼 수 있을까?

이번 시간에 한 번 살펴보겠다


몇 초마다 State를 계속 업데이트 하려 한다, 그래서

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ AuthContext.js




import { createContext, useState } from "react";

// Create a Context
export const AuthContext = createContext()


// Share the created context with other components
export default function AuthProvider({ children }) {

    //Put some state in the context
    const [number, setNumber] = useState(10)


    //1: setInterval이라는 함수를 사용할 것이다, setInterval을 사용하면 이 함수를 몇 초마다 실행하라고 지시할 수 있다
    setInterval(
        //1-1: 10초마다 이 함수를 호출하라고 할 수 있는 거지, 이 특정 함수는 number의 값을 업데이트해야 한다
        //화살표 함수를 사용해 여기 함수를 정의하겠다 setNumber에 number + 1을 준다
        () => setNumber(number + 1),10000
        
        //정리 => 우리가 할 일은 아주 간단하다, 10초마다 number의 값을 1씩 증가시키는 거지, JavaScript의 setInterval 함수로 한다
        //사실 여기 10은 밀리세컨드여서 10초마다 하고 싶으면 10,000으로 바꿔줘야 한다, 저장
    )

    return (
        <AuthContext.Provider value={ {number} }>
            {children}
        </AuthContext.Provider>
    )
}

-----------------------------------------------------------------------------------------------

그리고 페이지를 새로 고침 하면
                                            |
                                            V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

          in28minutes  Home Todos                                    Login   Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here

                                        




                                    Your Footer

-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  10                                                              HeaderComponent.jsx:10 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  10                                                              HeaderComponent.jsx:10 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  11                                                              HeaderComponent.jsx:10
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  11                                                              HeaderComponent.jsx:10
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  12                                                              HeaderComponent.jsx:10
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  12                                                              HeaderComponent.jsx:10
-------------------------------------------------------------------------------------------

10이 일단 보이고 10초를 기다리면 
11이 출력된다
또 10초를 기다리면 12가 출력되는 걸 볼 수 있다

사실 같은 메시지가 여러 번 출력될 수도 있다
12가 여러 번 출력될 수도 있고, 다른 숫자도 여러 번 출력될 수 있지, 그럴 수 있다
State와 관련해서 리액트 내부에서 많은 일이 일어난다, 걱정 마라

중요한 것은 모든 컴포넌트에 공유할 수 있는 State를 설정할 수 있다는 것이다
그리고 HeaderComponent의 로그를 삭제해주자
---------------------------------
function HeaderComponent() {

    const authContext = useContext(AuthContext)

//    console.log(authContext.number); (<=여기서만 주석 처리)
---------------------------------

다음으로 해볼 작업으로 넘어가겠다


지금은 AuthContext를 사용하려면 두 가지를 해야 하지
import AuthContext, useContext
AuthContext에 이렇게 참조도 해야 하고 <= const authContext = useContext(AuthContext)
일반적으로 공통 컨텍스트가 있으면 애플리케이션 전체에서 사용할 거고 쉭게 사용하고 싶다

그래서 hook을 만들겠다
컨텍스트를 쉽게 사용하기 위해서 const authContext = useContext(AuthContext) 이걸 복사하고 (헤더 컴포넌트에 있던 거지)

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ AuthContext.js



import { createContext, useState } from "react";

// Create a Context
export const AuthContext = createContext()

//2-1: 누군가 컴포넌트를 사용하고자 하면 사용할 수 있는 간단한 hook을 생성하는 것이다
//여기에서 이렇게 하자, const useAuth 어디에서든 useAuth라고 하면 useContext에 접근할 수 있도록 말이지
//여기 화살표 함수를 만들어 useContext를 쓰겠다, 그리고 이 const를 export 한다 
export const useAuth = () => useContext(AuthContext)


// Share the created context with other components
export default function AuthProvider({ children }) {

    //Put some state in the context
    const [number, setNumber] = useState(10)

    setInterval(() => setNumber(number + 1), 10000)

    return (
        <AuthContext.Provider value={ {number} }>
            {children}
        </AuthContext.Provider>
    )
}

-----------------------------------------------------------------------------------------------

어떤 클래스에서 인증 컨텍스트를 사용하고 싶다면 useAuth hook을 사용하면 되는거지
리액트 프로젝트에서 대부분으로 표준으로 사용하는 것이다


넘어가서 여기 useAuth를 쓰면

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ HeaderComponent.jsx



import {Link} from 'react-router-dom'

                   //3-1계속:↓ (useAuth가 임포트됨..) ./security/AuthContext에서 임포트가 됐다  그리고 사용하지 않는 import는 제거하겠다 ({}의 AuthContext 삭제..)
import { useAuth } from './security/AuthContext'
// import { useContext } from 'react' (<= 여기서만 주석처리 실제코드는 삭제)


function HeaderComponent() {

//3: 여기 useContext를 사용해서 AuthContext를 가져오는 대신 이렇게 쓸 수 있겠지
//    const authContext = useContext(AuthContext)(<=주석 처리)

//3-1: const로 선언하고 authContext = useAuth() 끝이다
//                         ↓이부분에 ctrl + 스페이스 하면 임포트 되지
const authContext = useAuth()

    // console.log(authContext.number);

    return (
        <header className="border-bottom border-light border-5 mb-5 p-2">
        <div className="container">
            <div className="row">
                <nav className="navbar navbar-expand-lg">
                    <a className="navbar-brand ms-2 fs-2 fw-bold text-black" href="https://www.in28minutes.com">in28minutes</a>
                    <div className="collapse navbar-collapse">
                        <ul className="navbar-nav">
                            <li className="nav-item fs-5"><Link className="nav-link" to="/welcome/in28minutes">Home</Link></li>
                            <li className="nav-item fs-5"><Link className="nav-link" to="/todos">Todos</Link></li>
                        </ul>
                    </div>
                    <ul className="navbar-nav">
                        <li className="nav-item fs-5"><Link className="nav-link" to="/login">Login</Link></li>
                        <li className="nav-item fs-5"><Link className="nav-link" to="/logout">Logout</Link></li>
                    </ul>
                </nav>
            </div>
        </div>
    </header>
    )
}

export default HeaderComponent
-----------------------------------------------------------------------------------------------

좋다

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>


Compiled with problems:

ERROR
[eslint] 
src\components\todo\security\AuthContext.js
  Line 6:30:  'useContext' is not defined  no-undef

Search for the keywords to learn more about each error.

-------------------------------------------------------------------------------------------

useContext가 AuthContext.js에서 정의되지 않았다고 나온다

