
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|              JVM                                                   |
|  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ    |
|  |  Spring                                                     |   |
|  |   ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ     ㅡㅡㅡㅡ     |   |
|  |  |  name  |  | age  |   |person |  |person2|   |address|    |   |
|  |  |        |  |      |   |       |  |       |   |       |    |   |
|  |   ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ     ㅡㅡㅡㅡ     |   |
|  |                                                             |   |
|   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ   | 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 
지난 단계에서 Spring 컨텍스트를 만들고 Spring이 사용자 지정 객체 1개를 관리하도록 했다
사용자 지정 객체를 더 만들고 Spring이 관리하도록 하고 싶을 것이다
이 단계에서 해 보곘다



HelloWorldConfiguration클래스로 돌아가 Bean을 더 만들겠다


------------------------------------------------------------------------------------------------------


⏺ HelloWorldConfiguration 클래스파일



package com.example.demo;

import org.springframework.context.annotation.*;


//Relesed in JDK 16.

//record Person을 입력하고 인물에는 이름과 나이가 있다고 해 보겠다
//여기선 어떤 기능을 활용해야 할까? 레코드는 무엇일까?
/*record?? ==>
레코드는 JDK16에서 추가된 새로운 기능이다
일반적으로 Java 클래스를 만들 때는 수많은 게터 세터 메서드 생성자를 만들게 된다 
등호, 해시 코드, 두 개의 스트링으로 구성된 메서드를 만들어야 한다
Java Bean을 만드는 번거로움을 없애기 위해 도입된 기능이 있다
레코드라고 하는 것이다 
레코드를 사용하면 세터 게터 생성자 등을 만들 필요가 없다 모두 자동으로 생성되기 때문이다
*/
//여기서 두 개의 멤버 변수인 스트링 이름과 정수 나이를 정의했다 //이 두개의 인수가 있는 인물 생성자가 자동으로 생성된다
//실제로 확인해 보자 //다시 아래로 @Bean 생성..
record Person (String name, int age) { };


//Address - firstLine & city

//주소는 두 개의 스트링 값으로 첫 행과 도시를 갖는다고 해 보겠다
//이를 통해 레코드를 만들 수 있으며 Spring 컨텍스트에 Bean으로 추가할 수 있다 어떻게 할까?
//record Address(String firstLine, String city) {}; 라 하고 아래에 @Bean 객체를 생성
record Address(String firstLine ,String city) { };


@Configuration    
public class HelloWorldConfiguration {

	//다른 Bean을 더 만들고 싶다고 해보자 Spring Bean을 만들었으며 정수를 만들려 한다고 가정하겠다
	
	@Bean
	public String name () {
		
		return "Ranga";
	}
	
	//public int age ()라 입력하고 여기에 나이를 넣겠다
	//나이 Bean을 Spring에서 관리하도록 하고 컨텍스트에서 값을 검색하도록 하겠다 어떻게 해야 할까?//App02HelloWorldSpring 클래스파일로...
	@Bean
	public int age () {
		
		return 20;
	}
	//Spring이 사용자 지정 클래스의 객체를 관리하도록 할 수 있을지 확인해 보겠다//레코드를 만들겠다// 클래스 파일명 맨위로 생성...
	
	
	//돌아 가서 인물은 만들어야 하니 Person이라 입력하고 이름도 person으로 지정하겠다(어떤 이름이든 상관 x)
	@Bean
	public Person person() {
		//지금 만들고자 하는 것은 person이니 var person = new Person();으로 입력하고 새 인물인 Ravi를 만들고 싶다고 가정해보겠다
		return new Person("Ravi", 25);
		
		//그리고 이제 return person을 입력하면 생성자가 자동으로 생성되었음을 확인할 수 있다
		//그리고 이 값도 가져올 수 있음을 확인 할 수 있다 person.name을 입력하거나 person.age를 사용할 수 있다 이 게터 메서드도 사용할 수 있다
		//하지만 지금은 레코드 기능에 대해 걱정하지 않도록 하겠다 Spring에 집중하자
		
//		return person;
		
		//여기에서 만들고 있는 것은 person이라는 Spring Bean이며 여기에 Bean 주석을 추가하여 Spring이 관리하도록 하겠다
		//현재 var person을 new Person을 설정하고 있다 지금은 신경 쓰지 말고 돌아와서 return new person을 입력하고 저장하겠다 //다시 App02HelloWorldSpring 클래스 파일로..
	}
	
	
	//위의 Person을 복사해 바꿔쓰면 편하겠다 => Address address로
	//이제 메인에 생성해주자 //App02HelloWorldSpring 클래스파일로..
	@Bean
	public Address address () {
		return new Address("Baker Street","London");
	}
}



---------------------------------------------------------


⏺ App02HelloWorldSpring 클래스파일



package com.example.demo;

import org.springframework.context.annotation.*;

public class App02HelloWorldSpring {


	public static void main(String[] args) { 
		
		//1: Launch a Spring Context - 

		var context = 
				new AnnotationConfigApplicationContext(HelloWorldConfiguration.class);

		
		//2: Configure the things that we want Spring to manage - 
		//HelloWorldConfiguration - @Configuration
		//name - @Bean
		
		
		//3: Retrieving Beans managed by Spring
		
		System.out.println(context.getBean("name"));

		System.out.println(context.getBean("age"));
		/*출력결과 ==>
		20
		20이 출력됐다, Spring이 두 개의 사용자 지정 객체를 관리하도록 했다 Bean을 더 만들어 보겠다///다시 HelloWorldConfiguration 클래스파일로..
		*/
		
		
		//person을 다시 여기로 가져와 syso(context.getBean("person"))을 입력하겠다 이렇게 하면 인물을 검색할 수 있다
		System.out.println(context.getBean("person"));
		/*출력결과 ==>
		Person[name=Ravi, age=25]
		두 개의 스트링 메서드가 레코드에 자동으로 구현되었으며 인물에 설정된 특성의 값을 유지하고 있음을 확인할 수 있다
		*/
		//주소 레코드도 만들어 보겠다 //다시 HelloWorldConfiguration 클래스파일로..
		
		
		System.out.println(context.getBean("address"));
		/*출력결과 ==>
		Address[firstLine=Baker Street, city=London]
		출력된 주소를 확인할 수 있다
		*/
	} 

}

------------------------------------------------------------------------------------------------------




ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|              JVM                                                   |
|  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ    |
|  |  Spring                                                     |   |
|  |   ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ     ㅡㅡㅡㅡ     |   |
|  |  |  name  |  | age  |   |person |  |person2|   |address|    |   |
|  |  |        |  |      |   |       |  |       |   |       |    |   |
|  |   ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ     ㅡㅡㅡㅡ     |   |
|  |                                                             |   |
|   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ   | 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 
이 학습에선 몇 가지 지루한 작업을 했다
Spring이 관리하는 Bean을 추가했으며
몇 개의 사용자 지정 클래스를 만들었으며 Spring이 관리하는 클래스의 객체가 생겼다
이제 지루할 수 있지만 Spring에 대해 이해해야 할 여러 흥미로운 것들의 기초이다

다음 학습에서 시작하겠다
