

우리는 리액트 애플리케이션을 준비했고, 이제는 여기서 Hello World REST API를 호출하려고 한다

--------------------------------------------------------------------------------------------





          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here


-------------------------------------------------------------------------------------------

여기 환영 페이지에 간단한 버튼을 추가할 거고
그 버튼을 클릭하면 Hello World REST API를 호출할 것이다

우린 먼저 /hello-world URL을 호출해보자
그럼 localhost:8080/hello-world를 호출한다

--------------------------------------------------------------------------------------------

🌎 http://localhost:8080/hello-world 사이트화면 ==>



Hello World


-------------------------------------------------------------------------------------------

먼저 이 URL을 먼저 호출할 것이고
이제 우리의 리액트 애플리케이션에 버튼을 추가해보자

그럼 WelcomeComponent로 가서

--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx



import {useParams, Link} from 'react-router-dom'

function WelcomeComponent() {

    const {username} = useParams()

    //1-1: function callHelloWorldRestApi()라고 해준다, 좋다
    function callHelloWorldRestApi() {
        //1-2: 그리고 여기서 그 메서드를 호출하는 JSX 구문을 써보자 
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>

        //1: 여기에 버튼을 추가해 보자, 그럼 <div>라고 하고 <button class="btn btn-success"라고 하고, 이걸 Call Hello World REST API라고 해주자
        //그럼 이 버튼을 클릭하면 뭘 하려고 하나? onClick = 이라고 하고 메서드를 결합해보지, 그럼 callHelloWorldRestApi 라고 한다
        //그리고 여기에 메서드를 만들어볼까?//1-1: const {username} 아래로..
            <div>
                <button class="btn btn-success" onclick={callHelloWorldRestApi}>Call Hello World REST API</button>
            </div>

        </div>
    )
}

export default WelcomeComponent

--------------------------------------------------------------------------------------------
                                        |
                                        V
--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {

    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                //2: onclick=callHelloWorldRestApi 이 부분을 {}로 감싸주고, 그리고 나머지 코드( Call Hello World REST API )는 다음 줄로 넘겨보자, 좋다 괜찮지?, 이걸 저장하고 돌아가보겠다
                <button class="btn btn-success" onclick={callHelloWorldRestApi}>
                  Call Hello World REST API</button>
            </div>
        </div>
    )
}

export default WelcomeComponent

--------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                 _________________________
                                |Call Hello World REST API|
                                 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------

여기 하단에 Call Hello World REST API라고 나와 있지?
근데 텍스트가 정말 길다
그럼 간단하게 

--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {

    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>

                //3-1: 그럼 m-5라고 ㅇㅋ
                <button class="btn btn-success m-5" onclick={callHelloWorldRestApi}>
                //3: Call Hello World REST API에서 Call Hello World라고 해주자, 그리고 버튼 주변에 여백도 추가해보지,
                  Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent

--------------------------------------------------------------------------------------------

이렇게

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

-------------------------------------------------------------------------------------------

Call Hello World라고 나왔고

그럼 모든 게 제대로 작동하는지 확인해 볼까?

--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
      //4: console.log()라고 하고 'called'라고 해준다
        console.log('')
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button class="btn btn-success m-5" onclick={callHelloWorldRestApi}>Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

그리고 콘솔로 가보자 새로고침 하고, 로그인을 하면

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ❌ ▶ Warning: Invalid DOM property `class`.                    console.js:288
        Did you mean `className`?
        at button
        at div
        at div
        at WelcomeComponent (http://localhost:3000/static/js/bundle.js:1024:66)
        at AuthencatedRoute (http://localhost:3000/static/js/bundle.js:828:3)
        at RenderedRoute (http://localhost:3000/static/js/bundle.js:40573:5)
        at Routes (http://localhost:3000/static/js/bundle.js:41264:5)
        at Router (http://localhost:3000/static/js/bundle.js:41198:15)
        at BrowserRouter (http://localhost:3000/static/js/bundle.js:39151:5)
        at AuthProvider (http://localhost:3000/static/js/bundle.js:1146:3)
        at div
        at TodoApp
        at div
        at App
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ❌ ▶ Warning: Invalid event handler                             console.js:288
      property `onclick`. Did you mean `onClick`?
      at button
      at div
      at div
      at WelcomeComponent (http://localhost:3000/static/js/bundle.js:1024:66)
      at AuthencatedRoute (http://localhost:3000/static/js/bundle.js:828:3)
      at RenderedRoute (http://localhost:3000/static/js/bundle.js:40573:5)
      at Routes (http://localhost:3000/static/js/bundle.js:41264:5)
      at Router (http://localhost:3000/static/js/bundle.js:41198:15)
      at BrowserRouter (http://localhost:3000/static/js/bundle.js:39151:5)
      at AuthProvider (http://localhost:3000/static/js/bundle.js:1146:3)
      at div
      at TodoApp
      at div
      at App
-------------------------------------------------------------------------------------------

오류가 나오는데
유효하지 않은 DOM 프로퍼티 'class'라고 나온다
className을 말하는 걸까?

실수가 있었다

--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log()
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>

                   //5: 이게 className이어야 하지 (class 에서 className으로..) 그럼 이걸 저장해보자
                <button className="btn btn-success m-5" onclick={callHelloWorldRestApi}>Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent

--------------------------------------------------------------------------------------------

새로고침을 하고 로그인을 한다
지금 우린 환영 페이지에 있고
이제 Call Hello World를 클릭해보자

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  (3) called                                                       WelcomeComponent.jsx:8
--------------------------------------------------------------------------------------------

그럼 Call Hello World라고 하면
여기 프린트되는 걸 볼 수 있지


WelcomeComponent.jsx 여기서 우리는 
------------------------------------------
    function callHelloWorldRestApi() {
        console.log('called')
    }
------------------------------------------
Hello World REST API를 호출하려고 한다

어떻게 REST API를 호출할까?

리액트를 사용할 때 REST API를 호출하기 위해 가장 널리 사용하는 프레임워크는 Axios이다
그럼 Axios를 이용해서 REST API를 호출해보자, 그리고 Axios를 사용하려면
Axios에 관한 의존성을 추가해야 한다, 그럼 우린 명령프롬프트에 

--------------------------------------------------------------------------------------------

⏺ cmd 창 >


Compiled successfully!

You can now view todo-app in the browser.

  Local:            http://localhost:3000
  On Your Network:  http://172.17.80.1:3000

Note that the development build is not optimized.
To create a production build, use npm run build.

webpack compiled successfully

//6: Ctrl+C를 눌러서 실행 중인 애플리케이션을 중지하고
일괄 작업을 끝내시겠습니까 (Y/N)?
^C
//6-1: npm install axios라고 해주겠다
C:\study\frontend\todo-app>npm install axios
/ (<= 인스톨 로딩중)

added 3 packages, and audited 1551 packages in 5s

264 packages are looking for funding
  run `npm fund` for details

9 vulnerabilities (2 moderate, 7 high)

To address issues that do not require attention, run:
  npm audit fix

To address all issues (including breaking changes), run:
  npm audit fix --force

Run `npm audit` for details.
--------------------------------------------------------------------------------------------

그러면 Axios가 설치되고 우리 프로젝트에 추가되지
그럼 npm start라고 해서 애플리케이션을 다시 시작하고
이제 VSC로 가서 package.json을 검색해보면 

--------------------------------------------------------------------------------------------

⏺ VSC


⏺ package.json



{
  "name": "todo-app",
  "version": "0.1.0",
  "private": true,
  "dependencies": {
    "@testing-library/jest-dom": "^5.17.0",
    "@testing-library/react": "^13.4.0",
    "@testing-library/user-event": "^13.5.0",

    //7: axios가 추가된 게 보일 것이다, 이제 axios 의존성은 우리 프로젝트의 일부가 되었고
    "axios": "^1.7.2",
    "bootstrap": "^5.3.3",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^6.24.1",
    "react-scripts": "5.0.1",
    "web-vitals": "^2.1.4"
  },
  "scripts": {
    "start": "react-scripts start",
    "build": "react-scripts build",
    "test": "react-scripts test",
    "eject": "react-scripts eject"
  },
  "eslintConfig": {
    "extends": [
      "react-app",
      "react-app/jest"
    ]
  },
  "browserslist": {
    "production": [
      ">0.2%",
      "not dead",
      "not op_mini all"
    ],
    "development": [
      "last 1 chrome version",
      "last 1 firefox version",
      "last 1 safari version"
    ]
  }
}
--------------------------------------------------------------------------------------------

그리고 우린 WelcomeComponent.jsx 여기서 Axios를 사용할 수 있다
시작하기 위해 여기에 직접 모든 코드를 작성할 것이다

계속 진행하면서 우리는 REST API 호출 코드를 별도의 컴포넌트로 리팩터링할 것이다
지금은 첫 번째 REST API 호출을 작동시키는 데 집중해보자

--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx



import {useParams, Link} from 'react-router-dom'
//8: 그럼 우린 import axios from 'axios' 라고 할 것이고 그리고 Axios를 사용하는 건 정말로 쉽다
import axios from 'axios'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log('called')
        //8-1: 그럼 axios라고 하고, 우린 어떤 요청을 전송하려고 하지? GET 요청을 전송하려고 한다, 그럼 get()이라고 쓰고 그안에 URL을 넣어줄 수 있지
        //우리가 호출하려는 URL은 뭘까?
        axios.get('')
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

너는 이걸 작동시키기 위해
브라우저에 http://localhost:8080/hello-world를 입력하길 권한다
http://localhost:8080/hello-world 이걸 복사하고 

--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log('called')

        //9: 여기에 붙여 넣어줘라
        axios.get('http://localhost:8080/hello-world')
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

그럼 백엔드에서 REST API가 실행되고 있고
그걸 실제로
------------------------------------
function callHelloWorldRestApi() {
  console.log('called')
  axios.get('http://localhost:8080/hello-world')
}
------------------------------------
여기서 호출하고 있지


너가 Axios를 사용해서 API 호출을 할 때는 세 가지를 할 수 있다
.then, finally, catch지, 이것들 모두에 우리는 콜백 메서드라는 걸 정의하지
그럼 콜백 메서드가 뭘까? 바로 알아보자

🔵콜백 메서드?

--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
        //10: 그럼 우린 .then이라고 해줄 거고, 우리가 뭘 원하는거지? 우리는 메서드를 호출하려고 한다//10-1: 아래에서 함수 새로 생성..
            .then
    }

    //10-1: 그럼 function이라고 하고 successfulResponse(response)라고 해줄 것이다, 이게 우리가 호출하려는 메서드고, 그리고 우린
    function successfulResponse(response) {
        //10-2: console.log(response)라고 해주자, response가 되돌아오면 우린 그걸 로깅하려고 한다
        console.log(response)
    }

    //10-3: 이것과 비슷하게, 우린 여기에 또 다른 메서드를 만들 건데, 이건 errorResponse()이다
    //그리고 errorResponse()에서 우리는 error를 받을 거고, 그리고
    function errorResponse(error) {
      //10-4: console.log(error)라고 해주겠다
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------
                                    |
                                    V
--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log('called')
        axios.get('http://localhost:8080/hello-world')

          //11: 그럼 너는 우리가 성공적인 응답을 받으려면 then() 안에 넣은 메서드가 호출되도록 하려고 한다
          //그럼 여기서 .then()안에서 화살표 함수를 사용하려고 한다
            .then(
              //11-1: 그럼 여기서 successfulResponse()라고 화살표 함수를 정의하고, 
              //우리는 어떤 파라미터는 넣어줄까? response이다, 이렇게 화살표 함수에 response를 파라미터로 넣어주고 우리는 successfulResponse()함수를 호출하고 있지
              //이걸 실제로 유심히 보면, 상당히 단순한 걸 알 것이다
                (response) => successfulResponse(response)
            )

           //정리 : 만일 response가 되돌아오면 우리는 이걸( (response) => successfulResponse() ) 호출하려는 것이지,
           //여기서 우리가 사용하고 있는 걸 Promise라고 부르지, 그럼 axios.get()은 Promise를 너한태 리턴하고 (<= axios.get('http://localhost:8080/hello-world'))
           //그리고 우린 여기서 만일 그게 성공이라면, 이걸 하라고 하고 있지 (<= .then( (response) => successfulResponse() ))
           //그래서 이걸 호출하기 위해 우리는 비동기적 접근법을 사용하고 있는 것이지, 우린 이 메서드를 호출하고 만일 REST API 호출에 성공하면 .then( (response) => successfulResponse() ) 이게 호출될 것이다
    }

    function successfulResponse(response) {
        console.log(response)
    }

    function errorResponse(response) {
        console.log(response)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

우린 뭔가 잘 되지 않았을 때 뭘 할지도 정의할 수 있지
그럼 예외가 있으면 우린 그걸 캐치하려고 한다, 
                                          |
                                          V
--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )

          //12: 여기서 우린 뭘 하려고 할까?, 우린 오류 응답을 호출하려고 한다
            .catch(
            //12-1: 그럼 파라미터는 error일 것이고 그리고 이렇게 errorResponse()를 호출하고 거기에 error를 넣어주려고 한다
              (error) => errorResponse(error)
             )
            //정리: 이렇게 성공적인 응답을 받으면 우리는 successfulResponse()를 호출할 거고
            //오류 응답을 받으면 우린 errorResponse()를 호출할 것이다
    }

    function successfulResponse(response) {
        console.log(response)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------
                                  |
                                  V
--------------------------------------------------------------------------------------------

⏺ VSC


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'

function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log('called')
        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )

            //13: 그리고 finally라는 것도 있지, finally는 응답이 성공했는지 또는 실패했는지와 무관하게 호출될 것이다
            //보통 finally에서 정리를 하지
            .finally (
                //13-1: 그럼 여기에 화살표 함수를 또 하나 정의하고 간단히 console.log('cleanup')이라고 해줄 것이다
                () => console.log('cleanup')
            )

            //정리 : 이건 좀 복잡해 보이지만, 사실은 상당히 단순한 작업이다
            //우린 axios.get()이라고 해서 이 URL을 호출하기 위한 메서드를 호출하고 있지, 그리고 성공적으로 응답을 받으면 즉 200이라는 응답을 받으면 .then()을 써서 successfulResponse()를 호출한다
            //그리고 오류 응답을 받으면, errorResponse()을 호출하지
            //그리고 .finally()를 써서 정리를 해준다 여기서 정리는 콘솔에 'cleanup'을 프린트하는 것이지, 그럼 이걸 저장하고, 너가 호출을 할 때 어떤 일이 일어나는지 확인해볼까?
    }

    function successfulResponse(response) {
        console.log(response)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

애플리케이션에서 로그인하고 Call Hello World를 클릭한다

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:9
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ❌ ▶ Access to XMLHttpRequest at '                                      in28minutes:1
      http://localhost:8080/hello-world' from origin '
      http://localhost:3000' has been blocked by CORS policy: No 
      'Access-Control-Allow-Origin' header is present on the 
      requested resource.
    
                                                                WelcomeComponent.jsx:21
      ▶ AxiosError {message: 'Network Error', name: 'AxiosError', 
        code: 'ERR_NETWORK', config: {…}, request: XMLHttpRequest, …}
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   cleanup                                                       WelcomeComponent.jsx:10
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ❌ ▶ GET                                                       WelcomeComponent.jsx:10
      http://localhost:8080/hello-world net::ERR_FAILED 401 
     (Unauthorized)
--------------------------------------------------------------------------------------------

아.. XMLHttpRequest에 대한 엑세스에 오류가 있다고 나온다
(
      Access to XMLHttpRequest at '                                    
      http://localhost:8080/hello-world' from origin '
      http://localhost:3000' has been blocked by CORS policy: No 
      'Access-Control-Allow-Origin' header is present on the 
      requested resource.
)
장소는 localhost:8080/hello-world고 그게 CORS 정책에 의해 차단되었다고 나온다
즉 너는 localhost:3000에서 localhost:8080을 호출하고 있는 것이지
그럼 이건 한 웹사이트에서 다른 웹사이트를 호출하는 것과 비슷한 것이고, 기본값으로서
다른 웹사이트로부터 호출은 차단되어 있다
그럼 이 요청을 허용하기 위해 어떻게 권한을 추가할까?

그건 다음 단계에서 알아보기로 하자




이번 단계에서 WelcomeComponent에 Call Hello World버튼을 추가했고, 그 버튼을 클릭하면
REST API 호출을 하게 된다
우리는 Axios라는 프레임워크를 사용하고 있고 Axios는 Promise를 사용하지
-------------------------------------------
    function callHelloWorldRestApi() {
        console.log('called')
        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }
-------------------------------------------
그럼 axios.get()을 호출하면 Promise를 돌려받고 (axios.get('http://localhost:8080/hello-world'))
성공적으로 호출을 하게 되면 이 메서드가 호출될 것이다 <= .then( (response) => successfulResponse(response) )
그리고 오류가 있으면 이게 호출되지 <= .catch( (error) => errorResponse(error) )
그리고 성공 여부와는 무관하게 이런 finally가 호출된다 <= .finally( () => console.log('cleanup') )

그럼 로그로 가서 보면
--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:9
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ❌ ▶ Access to XMLHttpRequest at '                                      in28minutes:1
      http://localhost:8080/hello-world' from origin '
      http://localhost:3000' has been blocked by CORS policy: No 
      'Access-Control-Allow-Origin' header is present on the 
      requested resource.
    
                                                                WelcomeComponent.jsx:21
      ▶ AxiosError {message: 'Network Error', name: 'AxiosError', 
        code: 'ERR_NETWORK', config: {…}, request: XMLHttpRequest, …}
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   cleanup                                                       WelcomeComponent.jsx:10
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ❌ ▶ GET                                                       WelcomeComponent.jsx:10
      http://localhost:8080/hello-world net::ERR_FAILED 401 
     (Unauthorized)
--------------------------------------------------------------------------------------------
cleanup이 프린트된 걸 볼 수 있지, 이렇게 오류가 프린트되었고 cleanup이 프린트되었다
왜냐면 오류 응답을 받고 있으니까다, 우리가 오류 응답을 받으면 
이 두 줄의 코드가 실행되지 ( .catch( (error) => errorResponse(error) ), .finally( () => console.log('cleanup') ) )
그럼 다음 단계에선 무엇이 잘 못되고 있는지 알아보고
이 successfulResponse를 작동시키는 방법을 알아보자
다음 단계에서 보겠다
