

src/main/java , src/main/resource등 파일들이 많은데 그 중 가장 중요한 파일은 pom.xml파일이다
여기 있는 모든 파일을 보면, 파일 3개가 아주 아주 중요한데 
첫 번째는 이 MyfirestwebappApplication.java이다 이 파일은 src/main/java 안에 있고, com.firstapplication.springboot.myfirstwebapp이라는 패키지 안에있다 
이 패키지 구조가 우리가 Spring initializr에 만들었던 Group+Artifact와 일치하는 걸 알 수 있다 com.firstapplication.springboot.myfirstwebapp이 있고 그게 패키지이고 MyfirestwebappApplication.java 파일이 있다 

MyfirestwebappApplication.java이 파일을 열면 main() 메서드가 있는 게 보일 것이다 

package com.firstapplication.springboot.myfirstwebapp;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class MyfirstwebappApplication {

	public static void main(String[] args) {
		SpringApplication.run(MyfirstwebappApplication.class, args);
	}

}

이게 Spring 애플리케이션 전체를 실행하게 된다 
너는 이 파일을 오른쪽 클릭할 수 있고 Run As, 그리고 1 Java Application을 선택하면 애플리케이션이 실행된다,
콘솔에서 로그가 나오는 게 보일것이고 애플리케이션이 포트 8080에서 실행된 걸 알 수 있다 o.s.b.w.embedded.tomcat.TomcatWebServer  : Tomcat started on port 8080 
이 애플리케이션이 실행되는 데 몇 초 걸리지 않은 걸 알 수 있다 아주 빠르다 

2. 여기서 또 중요한 파일은 application.properties인데 
여기에서 너는 애플리케이션의 많은 세부정보를 설정할 수 있다
예를 들어, 지금 여기 사용된 기본포트가 8080인 게 보일 것이고 가령 컴퓨터에서 8080포트가 이미 사용 중이라고 해보자, 그럼 이걸 변경하려고 한다

--------------------------------------------------------------------------------------

⏺ application.properties 파일

spring.application.name=myfirstwebapp

#server.port라고 하고 그게 8086이라고 해주자 그리고 저장, 이렇게 여기서 애플리케이션 설정을 구성할 수 있다
#이렇게 애플리케이션에 관해 뭔가를 변경하고 싶으면 여기서 그걸 설정할 수 있다 
server.port=8086

--------------------------------------------------------------------------------------
이렇게 너가 애플리케이션에 관해 설정하고 싶은게 있으면 여기서 그걸 설정할 수 있고 
이걸 # 코멘트로 빼면 보는 것처럼 포트를 기존에 사용하는걸 볼 수 있다 


3. 여기 있는 파일 중 다음으로 중요한 파일은 pom.xml이다 

<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.3.0-M3</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.firstapplication.springboot</groupId>
	<artifactId>myfirstwebapp</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>myfirstwebapp</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>
	<repositories>
		<repository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</repository>
	</repositories>
	<pluginRepositories>
		<pluginRepository>
			<id>spring-milestones</id>
			<name>Spring Milestones</name>
			<url>https://repo.spring.io/milestone</url>
			<snapshots>
				<enabled>false</enabled>
			</snapshots>
		</pluginRepository>
	</pluginRepositories>

</project>

pom.xml은 이 애플리케이션에 관련된 모든 의존성을 정의하는 곳이다
앞에서 우리가 Spring initializr에서 프로젝트를 만들 때 뭘 선택했었지? 
Spring Web과 Spring Boot DevTools를 선택헀다, 그러면 그 두 의존성이 여기에도 있는 걸 볼 수 있다
<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
spring-boot-starter-web, spring-boot-devtools도 있다 

뿐만 아니라 모든 Spring Boot 프로젝트는 starter-test에 대한 의존성을 갖게 된다 
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
starter-test는 너가 단위 테스트를 작성하게 도와준다, 단위 테스트를 JUnit 5나 Mockito로 하고 싶다면 이게 정말 도움이 될것이다


	<properties>
		<java.version>17</java.version>
	</properties>
그리고 우리가 사용하려는 Java 버전도 볼 수 있고, 그게 pom.xml에도 지정되어 있다

이 강의를 계속 진행하면서 우리는 이 파일들을 더 많이 다룰 건데 
지금은 이 파일들을 대략적으로 알아보는 걸로 충분하다 
MyfirestwebappApplication.java는 너가 어플리케이션을 실행하기 위한 파일이고 application.properties는 너가 애플리케이션에 설정을 제공하는 곳이다,
그리고 pom.xml은 의존성을 정의하는 곳이다 





그럼 더 진행하기 전에 하나 당부할게 있다
너가 이걸 하다가 문제에 봉착하면 ,너에게 권하는 가장 중요한 해법은 바로 너의 Java 버전을 확인하는 것이다 



Spring Initializr

● My favorite place on the internet
● Easiest way to create Spring Boot Projects
● Remember:
 ◼ 1: SpringBoot: Use latest released version
  ○ Avoid M1, M2, M3, SNAPSHOT!
 ◼ 2: Java: Use latest Version
  ○ Java uses 6 month release patterns
  ○ Spring Boot 3.0+ works on Java 17+
 ◼ 3: Use latest Eclipse Java EE IDE version

Spring Boot3를 사용하는지 확인하고, 적어도 Java 17이 설치되어 있는지 확인하기 바란다 
 ◼ 3: Use latest Eclipse Java EE IDE version'
그리고 또 중요한 건 Eclipse Java EE IDE 버전을 갖고 있는지 확인하는 것이다 






이번 단계에선 우린 임포트한 프로젝트에 있는 중요한 파일들 몇 개를 간단하게 살펴봤다 
다음 단계에선 코드를 좀 작성해 보겠다
