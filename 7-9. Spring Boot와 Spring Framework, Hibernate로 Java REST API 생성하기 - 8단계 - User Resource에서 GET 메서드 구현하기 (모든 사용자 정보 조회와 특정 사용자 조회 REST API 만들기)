

Social Media Application - Resources & Methods

● Users REST API                                                                                   [
  ■ Retrieve all Users                                                                                -  {
    ○ GET/users                                                                                             id: 1,
                                                                                                            name: "Adam",
                                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                         },                                                                                                                                                                           
                                                                                                      -  {
                                                                                                            id: 2,
                                                                                                            name: "Eve",
                                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                         },                                    
                                                                                                     -  {
                                                                                                            id: 3,
                                                                                                            name: "Jack",
                                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                        }                                       
                                                                                                    ]  

이번 시간엔 사용자 관련 REST API를 만들어 보겠다 
조회 대상은 모든 사용자이고 요청은 /users로 보내려고 한다

시작해보자
먼저 패키지로 가서 com.in28minutes.rest.webservices.restfulwebservices.user패키지에서 우클릭해 새 클릭스를 생성한다
사용자를 위한 리소스니까 UserResource라 하고 완료한다

------------------------------------------------------------------------------------------------------------------------


⏺ UserResource 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import org.springframework.web.bind.annotation.*;

//1: REST API를 구현하는 거니까 @RestController를 넣어 주고 임포트문을 업데이트하면 들어왔다, org.springframework.web.bind.annotation의 RestController가 들어왔다
//여기서 이제 모든 사용자를 조회하는 첫 번째 REST API를 정의할 것이다
@RestController
public class UserResource {

  //1-3: UserDaoService는 Spring이 관리한다 @Component가 붙어 있다, 이걸 UserResource에 AutoWire해준다, 그래서 UserResource 클래스에 추가하겠다
  //private UserDaoService service라고 하고 
	private UserDaoService service;
  
  //생성자 주입을 쓸 거라서 여기에 생성자를 넣어준다
  //public UserResource까지 넣어주고 UserDaoService service 이 부분을 복사해서 ()에넣어 주겠다 this의 service값으로 인자로 받은 서비스를 할당한다
  //아래 retrieveAllUsers()메소드에 컴파일 에러가 났다//1-4: retrieveAllUsers()메소드로..
  public UserResource(UserDaoService service) {
		this.service = service;
	}

  //1-1: 이 작업을 여기서 구현할 것이다, 모든 사용자의 정보를 조회할 것이다 
  //메소드는 public으로 그리고 반환값은 사용자 정보 목록이니 List<User>라고 쓰고 메소드 이름은 retrieveAllUsers로 한다
  //GET /users
  //1-4: 값을 반환하지 않아서 컴파일 에러가 나왔다, 여기서 값을 반환해 줄것이다
  //1-5: 여기에서 @GetMapping을 넣어줘야 한다 그리고 매핑은 이 안에 들어가는 URL이랑 해준다 @GetMapping의 괄호안에 "/users"라고 넣어주면 되는 거다 파일을 저장하고....... 
	@GetMapping("/users")
  public List<User> retrieveAllUsers() {
	  //1-2: 그리고 이 안에서 메소드를 구현한다 정보는 UserDaoService에서 얻어 올 것이다, 

    //1-4 계속: return service. 그리고 findAll()을 호출해준다 이제 컴파일이 잘 됐다 이게 끝이 아니다 매핑을 해줘야 한다 //1-5:retrieveAllUsers()메소드 위로 가서 @GetMapping 사용
    return service.findAll();
	}
}

------------------------------------------------------------------------------------------------------------------------
브라우저에서 localhost:8080/users를 호출한다                                      | 
                                                                                V
------------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users 사이트 화면 ==>


[
  {
    "id": 1,
    "name": "Adam",
    "birthDate": "1994-05-19"
  },
  {
    "id": 2,
    "name": "Eve",
    "birthDate": "1999-05-19"
  },
  {
    "id": 1,
    "name": "Jim",
    "birthDate": "2004-05-19"
  }
]

------------------------------------------------------------------------------------------------------------------------
좋다 사용자들의 정보가 조회됐다

무슨 일이 일어나는 거냐면, localhost로 /users를 호출하면
해당 요청은 return service.findAll(); 이 부분으로 들어와서 UserDaoService로 간다음
	static {
		users.add(new User(1, "Adam", LocalDate.now().minusYears(30)));
		users.add(new User(2, "Eve", LocalDate.now().minusYears(25)));
		users.add(new User(1, "Jim", LocalDate.now().minusYears(20)));
	}
여기에서 모든 사용자 정보를 반환하고
그걸 여기 UserResource에서 받아 JSON으로 변환해서 결과가 여기에 보인다
REST API 구현이 완료됐다

다음으로 해 볼 건 특정 사용자의 정보를 조회해 보는 것이다

------------------------------------------------------------------------------------------------------------------------


⏺ UserResource 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.util.*;

import org.springframework.web.bind.annotation.*;

@RestController
public class UserResource {

	private UserDaoService service;
	
	public UserResource(UserDaoService service) {
		this.service = service;
	}
	
	//GET /users
	@GetMapping("/users")
	public List<User> retrieveAllUsers() {
		
		return service.findAll();
	}

//2:그래서 이번엔 /users 다음에 /1을 추가해 준다
//명시된 사용자의 정보만 조회하는 API로 만들고 싶다, 먼저 메소드 이름을 바꿔야겠지?, retrieveAllUser 대신 retrieveUser로 바꾼다
//여기에선 1이 아니라 패스 변수를 넣어줘야 한다 /1이 되거나 /3이 되거나 아이디 값이 바뀌어야 하니까 이건 패스 변수로 처리해야 한다 패스 변수 이름은 id로 하겠다
	//GET /users
	@GetMapping("/users/{id}")
//인자로는 @PathVariable 그리고 int id를 넣은 다음 임포트를 하면 org.springframework.web.bind.annotation.PathVariable이 들어왔다 다음으로 해야 할 건
//서비스에 가서 명시된 아이디에 해당하는 정보를 조회하는 것이다//2-1: UserDaoService로... 
	public User retrieveUser(@PathVariable int id) {
		
  //2-4:UserResource 클래스에서 service.findOne()을 호출하면서 인자로 id를 전달한다 그리고 결과를 반환해 준다, 반환값 타입도 바꿔야겠다 ctrl+1을 누르고 반환값 타입을 User로 바꾼다
  //retrieveUser()메소드는 단 한 명의 User 정보를 반환하는 거다 파일을 저장하고.......
		return service.findOne(id);

	}
}

--------------------------------------------------------------------


⏺ UserDaoService 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.time.*;
import java.util.*;

import org.springframework.stereotype.*;

@Component
public class UserDaoService {
    // JPA/Hibernate > Database
    // UserDaoService > Static List
	
	private static List<User> users = new ArrayList<>();
	
	static {
		users.add(new User(1, "Adam", LocalDate.now().minusYears(30)));
		users.add(new User(2, "Eve", LocalDate.now().minusYears(25)));
		users.add(new User(1, "Jim", LocalDate.now().minusYears(20)));
	}
	public List<User> findAll() {
		return users;
	}

	//public User save(User user) {

	//2-1: UserDaoService로 간 다음 id 값을 가지고 User를 반환하는 findOne()이라는 퍼블릭 메소드를 만든다
  //즉 아이디 값을 가지고 해당되는 사용자를 찾고 해당 사용자 정보를 반환해 줘야 한다 for 반복문으로 해당되는 사용자를 찾아 정보를 반환하는 방법이 있고 함수형 프로그래밍을 쓰는 방법도 있다
	public User findOne(int id) {
  //2-2: 함수형 프로그래밍으로 목록에서 해당되는 사용자를 조회하려면 users.stream List를 Stream 형태로 변환하고 거기에 필터를 적용해 id 값으로 정보를 조회하기 위해 .filter(predicate)라고 한다
  //다음으로 ctrl+1을 눌러 predicate라는 지역 변수를 만들겠다 , 해당 사용자를 어떻게 찾느냐 어떻게 해당되는 사용자를 찾을 수 있을까? predicate는 이렇게 정의된다 사용자의 뭔가를 확인하는 작업을 거치는데 이 구문은 람다식을 생성한다
  // -(하이픈)에 > 부등호 이 구문이다 사용자의 아이디가 인수랑 같은지 확인해야 하니 getId를 호출한 다음 equals로 비교한다 인자인 id값이랑 말이다, 두 아이디 값이 같은지를 확인하는 작업이다
  //사용자의 아이디 값과 인자가 같다면 해당 사용자의 정보를 반환해야 한다 여기선 User 목록에서 이 아이디 값을 가진 사용자를 걸러내는 것이다 
		Predicate<? super User> predicate = user -> user.getId().equals(id);

  //2-3: 그 다음에 해야 하는 건 해당 아이디 값에 걸러진 첫 번째 항목을 찾는 것이다, 얘가 반환하는 건 Optional이고, 거기에 get을 호출해서 User를 받는다, 앞에 return을 추가해야겠지
		return users.stream().filter(predicate).findFirst().get();
  
  /*🔵 해석 =>
  여기선 List를 받아 Stream으로 변환한 뒤 predicate를 기준으로 필터를 하는 것뿐이다 
  Predicate가 하는 건 사용자의 아이디 값이 전달된 인수와 같은지를 확인하는 것 뿐이고
  이 User 목록에서 아이디 값이 같은 사용자 하나만 찾는 것이다, 예를 들어 User(1, "Adam", LocalDate.now().minusYears(30) 이 사용자라든지 
  filter()에서 목록은 반환하면 findFirst()로 첫 번째 항목을 찾아 반환하는 코드이다
  */
//  이제 구현한 이 함수를 REST API에서 사용할 차례이다//2-4:UserResource클래스 파일로..
  }
}
------------------------------------------------------------------------------------------------------------------------
브라우저에서 /users/1을 넣어 본다                                                |
                                                                               V
------------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users/1 사이트 화면 ==>


{
  "id": 1,
  "name": "Adam",
  "birthDate": "1994-05-19"
}

------------------------------------------------------------------------------------------------------------------------
좋다 
Adam이라는 사용자의 정보를 users/1로 조회해서 아이디가 1인 Adam의 정보가 나왔다

/user/2로 조회하면?
------------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users/1 사이트 화면 ==>

{
  "id": 2,
  "name": "Eve",
  "birthDate": "1999-05-19"
}
------------------------------------------------------------------------------------------------------------------------
Eve의 정보가 조회된다




이번 시간엔 GET 메소드로 모든 사용자의 정보와 한 사용자의 정보를 조회했다
