

지난 시간에 존재하지 않는 사용자를 조회할 때 에러를 반환했다
존재하지 않는 사용자의 정보를 조회하는 요청을 보내면 

--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  404                (빨간색 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Content-Type: application/json                |    {
Transfer-Encoding:  chunked                   |       "timestamp": "2024-05-22T10:42:06.141+00:00",                                  
Date:	Wed, 22 May 2024 10:42:06 GMT         |       "status": 404, 
                                              |       "error": "Not Found",   
                                              |       "trace": "com.in28minutes.rest.webservices.restfulwebservices.user.UserNotFound                    
Keep-Alive: timeout=60                        |       "message": "id:412",                           
Connection: keep-alive                        |       "path": "/users/412"                            
 ▶ COMPLETE REQUEST HEADERS                   |    }
                                              |     
                                                lines nums  📄 copy              length: 47 bytes

--------------------------------------------------------------------------------------------------------------------------------
404가 나왔었다, 좋다
또 Spring Boot가 정의해 둔 구조로 반환된 값도 확인했다
에러 응답 구조를 체계적으로 만드는 것은 기업에선 매우 중요하다

너의 기업(또는 단체등)에선 이런 구조를 활용하지 않을 수도 있다 
직접 정의한 구조가 있을 수 있다 

이번 시간엔 예외 발생 시 반환하는 응답의 구조를 바꿔 보려고 한다

먼저 커스텀 예외의 구조를 위한 빈을 정의해 보자
패키지를 클릭하고 ctrl + n을 누른 다음 클래스를 생성한다 패키지는com.in28minutes.rest.webservices.restfulwebservices.exception 이름은 ErrorDetails로 한다

--------------------------------------------------------------------------------------------------------------------------------


⏺ ErrorDetails 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.exception;

import java.time.LocalDate;

public class ErrorDetails {
  //1: 이 클래스 안에 넣는 정보로 에러가 발생했을 시간(timestamp) 정보랑 에러 메시지(message)랑 에러의 상세 정보(details)를 저장하고 싶다
  //이 구조를 우리 기업에서 활용할 기본 구조로 정의하고 싶다고 가정해 보자
  
  //timestamp 정보는 private 변수로 타입은 LocalDate로 이름은 timestamp로 정의한다
  private LocalDate timestamp;
  //message는 private 변수로 문자열 타입이고, 
  private String message;
  //똑같이 상세 정보 details도 private 문자열로 지정한다 임포트문을 업데이트 한다 java.time의 LocalDate가 임포트됐다
  private String details;

  //1-1:생성자를 넣어야 하는데 마우스 우클릭 > Source > Generate Constructor using Fields를 선택한다, 모든 필드를 다 사용할 것이다 생성버튼 클릭
	public ErrorDetails(LocalDate timestamp, String message, String details) {
		super();
		this.timestamp = timestamp;
		this.message = message;
		this.details = details;
	}	
  
  //1-2: 게터와 세터도 생성하겠다 우클릭> Source > Generate Getters and Setters 클릭 > 세터는 필요 없어서 게터만 생성하게 하겠다 Select Getters 버튼 클릭 마지막 멤버로 삽입하겠다
	public LocalDate getTimestamp() {
		return timestamp;
	}

	public String getMessage() {
		return message;
	}

	public String getDetails() {
		return details;
	}

  //1-3: 이제 ErrorDetails 객체가 준비됐다 다음으론 뭘 해야 할까? 예외가 발생하면 우리가 만든 이 구조를 반환하게 하고 싶다 어떻게 하면 될까?
}

--------------------------------------------------------------------------------------------------------------------------------

그 전에 먼저 Spring에선 예외 처리를 어떻게 구현했나 확인해볼까?

{
  "timestamp": "2024-05-22T10:42:06.141+00:00",                                  
  "status": 404, 
  "error": "Not Found",   
  "trace": "com.in28minutes.rest.webservices.restfulwebservices.user.UserNotFound                    
  "message": "id:412",                           
  "path": "/users/412"                            
}
여기 Spring이 정의하는 공통 구조가 있다
어떻게 구현돼 있을까?
ResponseEntityExceptionHandler를 검색해 본다
/
 * A class with an {@code @ExceptionHandler} method that handles all Spring MVC
 * raised exceptions by returning a {@link ResponseEntity} with RFC 7807
 * formatted error details in the body.
...
/
여기 설명을보면 이 클래스는 Spring MVC가 발생시키는 모든 예외를 처리한다고 한다 
정의된 에러 정보를 반환한다고 한다
이 안에 있는 여러 메소드를 보면 정말 다양한 종류의 메소드가 있는데 각각 다른 종류의 예외를 처리한다
제일 기본이 되는 예외 처리 메소드는 hadleException()메소드이다 Exception과 WebRequest를 인자로 받는다

handleException을 클릭해서 자세히 보자
@Nullable
	public final ResponseEntity<Object> handleException(Exception ex, WebRequest request) throws Exception {
		if (ex instanceof HttpRequestMethodNotSupportedException subEx) {
			return handleHttpRequestMethodNotSupported(subEx, subEx.getHeaders(), subEx.getStatusCode(), request);
		}
	  .....
여기에서 그 표준 구조가 반환된다 
우리가 해야 하는 건 이걸 오버라이드해서 우리가 정의한 구조가 반환되게 해야 한다 어떻게 하면 될까?
이 클래스를 상속해서 확장하면 된다, 바로 이 ResponseEntityExceptionHandler 클래스를 확장해서 우리의 예외 처리 코드를 구현하면 된다 
바로 시작하자


이 패키지 안에서 먼저 새 클래스를 생성하겠다 
클래스 이름은 CustomizedResponseEntityExceptionHandler 라고 하겠다

--------------------------------------------------------------------------------------------------------------------------------



⏺ CustomizedResponseEntityExceptionHandler 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.exception;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

//2: 그 다음으로 확장을 위해 키워드를 넣어 준다, extends 그리고 ResponseEntityExceptionHandler라고 Ctrl + 1을 눌러 org.springframework.web.servlet.mvc.method.annotation의 ResponseEntityExceptionHandler가 들어왔다, 이젠 예외 처리 메소드를 우리 상황에 맞게 바꿔주고 싶다
public class CustomizedResponseEntityExceptionHandler extends ResponseEntityExceptionHandler{


  //2-1: handlerException 메소드로 가서 시그니처를 복사하자 메소드 시그니처 그대로 가지고 와야 한다, 이제 메소드가 들어왔고, 여기에선 어떤 종류의 예외를 처리할 것인지를 정의한다 
  //@ExceptionHandler에는 어떤 예외를 여기서 처리할 건지를 정의한다, 발생한 모든 예외를 대상으로 할 거기때문에 Exception.class로 넣고 임포트문을 업데이트한다 ExceptionHandler가 들어왔다 좋다
  @ExceptionHandler(Exception.class)
 	public final ResponseEntity<Object> handleAllException(Exception ex, WebRequest request) throws Exception { 
    //2-2: 이제는 커스텀 예외 객체를 만들 차례인데 ErrorDetails 그리고 이름도 errorDetails = new ErrorDetails를 생성해 할당해 준다 그리고 에러의 첫 번째 정보로는 timestamp 첫 인자는 타임스탬프니까 LocalDate.now()로 값을 넣고 두번째 인자는 에러 정보였지 ex.getMeesage()로 넣고 세 번째 인자가 상세 정보지 request.getDescription()을 호출해 주면서 인자는 false로 넣어 준다, 파일을 저장하겠다
		ErrorDetails errorDetails = new ErrorDetails(LocalDate.now(), 
				ex.getMessage(), request.getDescription(false));  
    //2-3: 이번엔 ResponseEntity를 반환해줘야 하는데 새 ResponseEntity 객체를 생성하고 errorDetails도 함께 전달되도록 한다 상태는 어떤 걸 반환해야 할까 Internal Server Error를 반환해야 한다 HttpStatus.INTERNAL_SERVER_ERROR를 전달하고 return 키워드를 추가하고 저장한다
		return new ResponseEntity(errorDetails, HttpStatus.INTERNAL_SERVER_ERROR);

    //2-4: 메소드 이름도 바꿔야 한다, handleAllException 으로 하겠다 ( 위의 메소드 명을 handleException 에서 handleAllException으로 수정... ) 
    
    //지금 커스텀 예외 구조를 만들었고 그 예외를 반환하는 기능을 구현했다, 파일을 저장하고 잘 작동하는지 확인해 보자 
  }
}

--------------------------------------------------------------------------------------------------------------------------------

존재하지 않는 사용자에게 요청을 보내 보자, 보내기 버튼을 클릭한다

--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | GET     | ▼  |    |    http://localhost:8080/users/412                         |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |  ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________     __________________      |    
☑ | Content-Type | : | application/json | x   |    XHR does not allow payload for GET request.                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |                                   
  ______________                              |                                
 ( + Add header )                             |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                              |                                    
  🗝 Add authorization         🗑              |                                    
                                              |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation

  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  404                (빨간색 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Content-Type: application/json                |    {
Transfer-Encoding:  chunked                   |       "timestamp": "2024-05-22T10:42:06.141+00:00",                                  
Date:		Thu, 23 May 2024 09:52:37 GMT         |       "status": 404, 
                                              |       "error": "Not Found",   
                                              |       "trace": "com.in28minutes.rest.webservices.restfulwebservices.user.UserNotFoundException:                   
Keep-Alive: timeout=60                        |       "message": "id:412",                           
Connection: keep-alive                        |       "path": "/users/412"                            
 ▶ COMPLETE REQUEST HEADERS                   |    }
                                              |     
                                                lines nums  📄 copy              length: 47 bytes
--------------------------------------------------------------------------------------------------------------------------------

404가 반환됐다
그리고 반환된 정보의 구조는 그대로이다
왜일까?

