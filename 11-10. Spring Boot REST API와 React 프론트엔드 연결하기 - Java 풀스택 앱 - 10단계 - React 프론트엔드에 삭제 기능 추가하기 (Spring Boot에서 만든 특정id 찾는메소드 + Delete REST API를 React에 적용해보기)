

이번 단계에선 애플리케이션에 삭제 기능을 추가해보겠다

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                      Login   Logout
     _____________________________________________________________________________________

                                 Things You Want To Do!
                                      
                 ID	   Description	                   is Done?     	 Target Date
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  1	    Get AWS Certified	             false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  2	    Learn DevOps		               false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  3	    Learn Full Stack Development	 false         Sat Jul 05 2036
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
▶ (3) [{…}, {…}, {…}]                                              ListTodosComponent.jsx:25 
  0  : {id: 1, username: 'in28minutes', description: 'Get AWS Certified', targetDate: '2034-07-28', done: false}
  1: {id: 2, username: 'in28minutes', description: 'Learn DevOps', targetDate: '2035-07-28', done: false}
  2: {id: 3, username: 'in28minutes', description: 'Learn Full Stack Development', targetDate: '2036-07-28', done: false}
  length: 3
  [[Prototype]]: Array(0)
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
▶ (3) [{…}, {…}, {…}]                                              ListTodosComponent.jsx:25 
  0  : {id: 1, username: 'in28minutes', description: 'Get AWS Certified', targetDate: '2034-07-28', done: false}
  1: {id: 2, username: 'in28minutes', description: 'Learn DevOps', targetDate: '2035-07-28', done: false}
  2: {id: 3, username: 'in28minutes', description: 'Learn Full Stack Development', targetDate: '2036-07-28', done: false}
  length: 3
  [[Prototype]]: Array(0)
-------------------------------------------------------------------------------------------

지금 여기 ID, Description, is Done?, Target Date가 있는데 
우린 특정한 Todo를 삭제하기를 원한다
그럼 시작해 보겠다

그럼 VSC로 가보자
ListTodosComponent로 가서

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>

                          //1: Todo의 ID는 별로 중요하지 않지, 사용자들은 그걸 유심히 보지 않는다 그럼 이걸 삭제하고, ID를 삭제할 거고 아래의 <td>도 //1-1: 아래 <td>부분으로...
                       //     <td>ID</td> (<= 여기서만 주석 처리 실제 코드는 삭제..)

                        //1-2: 여기서 <td>를 사용했는데 <th>를 사용하는 게 좋을 것이다, 그럼 <th> 를 서보자 (<td>에서 <th>로..)
                        //헤더에서 이렇게 <th>를 쓰는 게 좋고, 이걸 저장하면 이제
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>

                                      //1-1: 이 하단의 <td>도 삭제 되었다 //1-2: 다시 위로..
                                   //     <td>{todo.id}</td> (<= 여기서만 주석 처리 실제 코드는 삭제..)
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------
                                          |
                                          V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                      Login   Logout
     _____________________________________________________________________________________

                                      Things You Want To Do!
                                      
                         Description	                is Done?     	  Target Date      (<= 이 부분이 굵은 글씨로 바뀜)
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                      Get AWS Certified	               false        Sat Jul 05 2036    
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                         Learn DevOps		               false        Sat Jul 05 2036     
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                  Learn Full Stack Development	       false        Sat Jul 05 2036     
                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

헤더가 굵은 글씨로 표시된 게 보일 것이다
좋고 


이제 우리는 삭제 버튼을 추가하려고 한다 

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>

                            //2: 그럼 <th>라고 하고 Delete라고 적어주자 //2-1: 아래로..
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>

                                        //2-1: 그리고 여기에 버튼을 추가하려고 한다, <td> 라고 하고 우리는 
                                        //<button 이라고 하고 className="btn btn-warning">이라고 닫는 태그를 넣고 Delete라고 넣어주자, 실제로 어떻게 되는지 볼까?
                                        <td> <button className="btn btn-warning">Delete</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------
                                         |
                                         V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                               Login   Logout
     _____________________________________________________________________________________________

                                        Things You Want To Do!
                                      
                     Description	               is Done?     	 Target Date       Delete
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                   Get AWS Certified	            false        Sat Jul 05 2036   | Delete |  (<= 노란색 버튼으로 생김)
                                                                                  ‾‾‾‾‾‾‾‾                                                                           
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                     Learn DevOps		              false        Sat Jul 05 2036   | Delete |  (<= 노란색 버튼으로 생김) 
                                                                                  ‾‾‾‾‾‾‾‾  
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
               Learn Full Stack Development	      false        Sat Jul 05 2036   | Delete |  (<= 노란색 버튼으로 생김)
                                                                                  ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------

그럼 모든 행에 Delete 버튼이 생긴 걸 볼 수 있다
이걸 클릭하면 우린 Delete API를 호출하려고 하지, 그럼 먼저 

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    //3-1: 그리고 이제 Todo를 삭제해보자, 그럼 여기서 function deleteTodo()라고 하고 
    function deleteTodo() {
      //3-2: console.log('clicked')라고 해서 deleteTodo를 호출한다 이걸 저장해보자
      console.log('clicked');
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>

                                        //3: 우리는 onClick이라고 하고 ={deleteTodo}라고 해서 메서드를 호출할 것이다, 그리고 이제 Todo를 삭제해보자//3-1: return 위로 가서 작성..
                                        <td> <button className="btn btn-warning" onClick={deleteTodo}>Delete</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

Delete를 클릭해보자
                                        |
                                        V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                               Login   Logout
     _____________________________________________________________________________________________

                                        Things You Want To Do!
                                      
                     Description	               is Done?     	 Target Date       Delete
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                   Get AWS Certified	            false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾                                                                           
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                     Learn DevOps		              false        Sat Jul 05 2036   | Delete | 
                                                                                  ‾‾‾‾‾‾‾‾  
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
               Learn Full Stack Development	      false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  (3) clicked                                                   ListTodosComponent.jsx:24 
-------------------------------------------------------------------------------------------

셋 다 클릭했다
좋다 
하지만 여기서 어떤 Delete를 클릭했는지가 중요하지, 니가 ID 1을 클릭했는지 ID 2 혹은 ID 3를 클릭했는지 말이다
그걸 어떻게 알까?


----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    //4: 여기 들어간 id가 필요하지 (deleteTodo()에 id를 넣어줌..) 이렇게 id가 들어갔으면 너는 아마 'click' + id 라고 해줄 수 있겠지
    //이 특정한 id가 클릭되었다고 말이지//4-1: return 부분의 <td>부분으로.. 
    function deleteTodo(id) {
        console.log('clicked ' + id);
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>

                                        //4-1: 여기에 어떻게 id를 넣어줄 수 있을까? 그럼 여기 삭제 메서드에서 우리는 id를 넣으려고 한다, 어떻게 하면 id를 넣을 수 있을까?
                                        //우리는 화살표 함수를 사용해야 한다, 그럼 인수가 없는 메서드라면 너는 그걸 여기서 직접 매핑할 수 있지, 하지만 니가 인수를 넣으려 한다면 어떨까? 
                                        <td> <button className="btn btn-warning" 
                                                      onClick={deleteTodo}>Delete</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

만일 너가 예를 들어 todo.id같은 걸 넣으려고 한다면
이게 우리가 원하는 것이지
우리는 deleteTodo()를 호출하고 {todo.id}를 넣으려고 한다
<td> <button className="btn btn-warning" onClick={deleteTodo({todo.id})}>Delete</button> </td>
deleteTodo({todo.id}) 이런걸 하려고 한다면 화살표 함수를 사용해야 하지
그럼 먼저 실제로 이걸 화살표 함수로 만들어 보자

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsername('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    function deleteTodo(id) {
        console.log('clicked ' + id);
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>

                                        <td> <button className="btn btn-warning" 
                                        //5: 그럼 너는 이렇게 화살표 함수를 넣고 deleteTodo()를 호출해야 하고, deleteTodo()안에 어떤 인수를 넣어줘야 할까? todo.id를 넣어줘야 한다
                                        //그럼 정리해보면, onClick이 되면 특정한 Todo의 id를 이용해서 deleteTodo()를 호출하게 되지 실제로 어떻게 되는지 볼까?
                                                     onClick={() => deleteTodo(todo.id)}>Delete</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

Delete를 누르면
                                        |
                                        V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                               Login   Logout
     _____________________________________________________________________________________________

                                        Things You Want To Do!
                                      
                     Description	               is Done?     	 Target Date       Delete
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                   Get AWS Certified	            false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾                                                                           
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                     Learn DevOps		              false        Sat Jul 05 2036   | Delete | 
                                                                                  ‾‾‾‾‾‾‾‾  
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
               Learn Full Stack Development	      false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  clicked 1                                                     ListTodosComponent.jsx:24
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  clicked 2                                                     ListTodosComponent.jsx:24
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  clicked 3                                                     ListTodosComponent.jsx:24
-------------------------------------------------------------------------------------------

clicked 1이 나오고 두 번째 걸 누르면 clicked 2가 나오지
또 Delete를 누르면 clicked 3 이나오고 
축하한다

그럼 이제 이걸 사용해 보겠다
여기서 
-----------------------
    function deleteTodo(id) {
        console.log('clicked ' + id);
    }
-----------------------
우린 뭘 하려고 하지? 우린 deleteTodo API를 호출하려고 한다 그럼 TodoApiService로 가서
새로 메서드를 만들어 보자

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoApiService.js



import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

export const retrieveAllTodosForUsername
        = (username) => apiClient.get(`/users/${username}/todos`)
        // http://localhost:8080/users/in28minutes/todos

//6: 그럼 export const deleteTodo라고 해준다, 우린 Todo를 삭제하려고 하고, deleteTodo에는 
export const deleteTodo
 //6-1: username 과 id라는 두 개의 인수가 있지 그리고 apiCLient.delete  ↓그리고 여기는 /${id}가 되어야 한다 ,ㅇㅋ 잘 된 것 같고
        = (username, id) => apiClient.get(`/users/${username}/todos/${id}`)
        // http://localhost:8080/users/in28minutes/todos

        //정리) 그럼 우린 deleteTodo를 호출하고 username과 id를 넣고 apiClient.delete(`/users/${username}/todos/${id}`)라고 한다, 저장하고
----------------------------------------------------------------------------------------------------------------------

이제 ListTodosComponent에서
deleteTodo를 사용할 수 있다
이제 여기 있는 deleteTodo()관련 
--------------------------------
⏺ ListTodosComponent.jsx

    function deleteTodo(id) {
        console.log('clicked ' + id);
    }
--------------------------------
코드를 보면 
여기 있는 
--------------------------------
⏺ TodoApiService.js

export const deleteTodo
        = (username, id) => apiClient.delete(`/users/${username}/todos/${id}`)
--------------------------------
deleteTodo와 이름이 아주 비슷한 걸 알 수 있다

그건 좋지 않고 
그럼 우리는 간단한 Api라는 접미어를 추가할 것이다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ TodoApiService.js




import axios from 'axios'


// export function retrieveHelloWorldBean() {
//     return axios.get('http://localhost:8080/hello-world-bean')
// }

const apiClient = axios.create(
    {
        baseURL: 'http://localhost:8080'
    }
)

//7-1: 여기도 retrieveAllTodosForUsername에 Api를 붙일 것이다
export const retrieveAllTodosForUsernameApi
        = (username) => apiClient.get(`/users/${username}/todos`)
        // http://localhost:8080/users/in28minutes/todos

//7: ListTodosComponent.jsx의 deleteTodo()와 차별성을 두기 위해 deleteTodoApi라는 이름으로 변경.., 그럼 deleteTodoApi이고//7-1:위로 가서 작성..
export const deleteTodoApi
        = (username, id) => apiClient.delete(`/users/${username}/todos/${id}`)
        // http://localhost:8080/users/in28minutes/todos      
----------------------------------------------------------------------------------------------------------------------


그리고 ListTodosComponent에서
그걸 사용하는 부분을 업데이트해서
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



import { useEffect, useState } from "react"
import { retrieveAllTodosForUsername } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {

    //8: TodoApiService.js에서 이름이 변경됐으니 여기도 변경.. retrieveAllTodosForUsername=> retrieveAllTodosForUsernameApi로.. //8-1: deleteTodo()로..
    retrieveAllTodosForUsernameApi('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    //8-1: 여기서도 다른 걸 사용할 것이다, 그럼 우리는 deleteTodoApi()도 사용할 거고,
    function deleteTodo(id) {
        console.log('clicked ' + id);
      //8-2: 이 deleteTodoApi()에 첫 번째 인수로서 username을 넣으려고 한다, 인수를 조심해야 한다 username은 in28minutes고, 잠시 우리는 in28minutes를 하드코딩하고 있었는데 하드코딩을 다음 단계에서 제거해야 한다
      //지금은 우선 삭제를 작동시키는 데 집중해보자, 그럼 deleteTodoApi('in28minutes', id)라 하고, 
        deleteTodoApi('in28minutes', id)
        //8-3: 성공적인 응답이 되돌아오면 우린 뭘 하려고 했지
        .then(
          //8-4: 여기서 그걸 할것이다
        )
          //8-5: 그리고 .catch()도 같을 것이다
        .catch(
          
        )
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
                                        <td> <button className="btn btn-warning" 
                                                     onClick={() => deleteTodo(todo.id)}>Delete</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그럼 만일 오류 호출이라면 여기에 오류 로그를 남길 건데, 하지만 성공적인 응답이라면 뭘 하려고 하지?
우린 두 가지를 하려고 한다 
우린 메시지를 사용자에 표시하려고 하고 
.then(
  즉 삭제에 성공했다는 메시지를 표시하길 원하지
  //1: Display message
  그리고 그 다음에도 우리는 Todo 리스트를 업데이트 해야 한다 그럼 업데이트 Todo list라고 적어보자
  //2: Update Todos list 
  )                      
우리가 여기 작성하는 메서드에서 그 둘을 모두 해야 하지
그럼 그걸 여기서 할 거고
그럼 메서드를 작성해보자
                                            |
                                            V
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



import { useEffect, useState } from "react"
import { deleteTodoApi, retrieveAllTodosForUsername, retrieveAllTodosForUsernameApi } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsernameApi('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    function deleteTodo(id) {
        console.log('clicked ' + id);
        deleteTodoApi('in28minutes', id)
        .then(

            //9:우린 그 둘을 모두 하는 화살표 함수를 작성해야 한다, 첫 번째는 메시지를 표시하는 것이고, 두 번째는 Todo 리스트를 업데이트하는 것이지
            //Todo 리스트 업데이트는 쉽다 
            () => {
              //9-1: 너는 refreshTodos만 호출하면 그게 Todo 리스트를 업데이트 할 것이다, 
              //그리고 메시지 표시는 약간 더 복잡하지, 왜냐면 상태에 뭔가를 설정해줘야 하기 때문이다 
              refreshTodos()
            }
            //1: Display message
            //2: Update Todos list
        ) 
        .catch(
            
        )
    }

...

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------
                                    |
                                    V
----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { deleteTodoApi, retrieveAllTodosForUsername, retrieveAllTodosForUsernameApi } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])
   
    //10: 그럼 여기서 Todos와 비슷하게 상태를 하나 더 만들 것이다
    //그럼 여기에 useState(null)이라고 하고 todos를 message로 변경한다, 그리고 setTodos를 setMessage로 변경해주자, 그리고 상단에서 메시지를 표시할 것이다 //10-1: return 안으로..
    const [message, setMessage] = useState(null)

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsernameApi('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    function deleteTodo(id) {
        console.log('clicked ' + id);
        deleteTodoApi('in28minutes', id)
        .then(

            () => {
              //10-2: 이제 우리는 상태에 메시지를 전송해야 한다 그걸 어떻게 할까? setMessage라고 하고 백틱(`)을 써서 '${id}로 된 Todo를 성공적으로 삭제했다 (Delete of todo with ${id} successful)' 라고 할 수 있지
              //여기 id가 있니? ㅇㅋ 우린 id가 있지 (function deleteTodo(id) {..), 그럼 이게 성공적으로 메시지를 표시할 것이다, 어떻게 되는지 볼까?
                setMessage(`Delete of todo with ${id} successful`)

                refreshTodos()
            }
            //1: Display message
            //2: Update Todos list
        ) 
        .catch(
            
        )
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>

            //10-1: 그럼 Things You Want To Do! 바로 아래에서 우린 <div>를 추가할 거고, 여기 안에서 메시지를 표시할 것이다
            //그럼 이건 여기에 넣은 상태에서 message를 잡을 거고, "alert alert-warning"이라는 className을 부여할 것이다, 이걸 저장하고 //10-2: 다시 deleteTodo()로..
            <div className="alert alert-warning">{message}</div>
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
                                        <td> <button className="btn btn-warning" 
                                                     onClick={() => deleteTodo(todo.id)}>Delete</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------
                                        |
                                        V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                               Login   Logout
     _____________________________________________________________________________________________

                                        Things You Want To Do!
              _______________________________________________________________________________
            |                                                                                |  (<= 이 공간에 뭔가 생김)
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                         
                     Description	               is Done?     	 Target Date       Delete
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                   Get AWS Certified	            false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾                                                                           
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                     Learn DevOps		              false        Sat Jul 05 2036   | Delete | 
                                                                                  ‾‾‾‾‾‾‾‾  
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
               Learn Full Stack Development	      false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  clicked 1                                                     ListTodosComponent.jsx:24
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  clicked 2                                                     ListTodosComponent.jsx:24
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  clicked 3                                                     ListTodosComponent.jsx:24
-------------------------------------------------------------------------------------------

모든 게 좋아 보이고
여기서 너는 비어 있는 경고 바가 표시되고 있는 걸 알 수 있다
그리고 이건 보기 좋지 않다
우린 이걸 삭제할 수 있고, 우린 메시지가 null이 아닐 때만 그걸 표시하려고 한다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx




import { useEffect, useState } from "react"
import { deleteTodoApi, retrieveAllTodosForUsernameApi } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    const [message, setMessage] = useState(null)

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsernameApi('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    function deleteTodo(id) {
        console.log('clicked ' + id);
        deleteTodoApi('in28minutes', id)
        .then(

            () => {
                setMessage(`Delete of todo with ${id} successful`)
                refreshTodos()
            }
            //1: Display message
            //2: Update Todos list
        ) 
        .catch(
            
        )
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>

            //11: 그럼 우린 여기로 와서 이 <div>는 메시지가 있는 경우에만 표시하길 원한다
            //그럼 너는 {message &&}라고 할 수 있지 그럼 메시지가 null이 아닌 경우에만 이 <div>가 표시될 것이다, 그렇게 하고
            {message && <div className="alert alert-warning">{message}</div>}

            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
                                        <td> <button className="btn btn-warning" 
                                                     onClick={() => deleteTodo(todo.id)}>Delete</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

이제 보기가 좋아졌고
그럼 이제 Delete를 눌러보자
                                        |
                                        V
------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                               Login   Logout
     _____________________________________________________________________________________________

                                        Things You Want To Do!

                        
                     Description	               is Done?     	 Target Date       Delete
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                   Get AWS Certified	            false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾                                                                           
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                     Learn DevOps		              false        Sat Jul 05 2036   | Delete | 
                                                                                  ‾‾‾‾‾‾‾‾  
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
               Learn Full Stack Development	      false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  clicked 1                                                     ListTodosComponent.jsx:24
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  clicked 2                                                     ListTodosComponent.jsx:24
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  clicked 3                                                     ListTodosComponent.jsx:24
------------------------------------------------------------------------------------------------------
                                        |
                                        V
------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                               Login   Logout
     _____________________________________________________________________________________________

                                        Things You Want To Do!
              _______________________________________________________________________________
            |                      Delete of todo with 1 successful                          |  (<= Delete를 누르면 이 공간에 뭔가 생김)
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     
                        
                     Description	               is Done?     	 Target Date       Delete
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                     Learn DevOps		              false        Sat Jul 05 2036   | Delete | 
                                                                                  ‾‾‾‾‾‾‾‾  
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
               Learn Full Stack Development	      false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------
  clicked 1                                                     ListTodosComponent.jsx:26
------------------------------------------------------------------------------------------------------

멋지다, 이렇게 1인 todo를 성공적으로 삭제했다고 나오고


사실 메시지를 업데이트해야 된다

----------------------------------------------------------------------------------------------------------------------

⏺ vsc


⏺ ListTodosComponent.jsx



import { useEffect, useState } from "react"
import { deleteTodoApi, retrieveAllTodosForUsernameApi } from "./api/TodoApiService"

function ListTodosComponent() {

    const today = new Date()

    const targetDate = new Date(today.getFullYear() + 12, today.getMonth(), today.getDay())

    const [todos, setTodos] = useState([])

    const [message, setMessage] = useState(null)

    useEffect( () => refreshTodos() , [] )

    function refreshTodos() {
    retrieveAllTodosForUsernameApi('in28minutes')
        .then(response => {
            setTodos(response.data)
            }
        )
        .catch(error => console.log(error))
    }    

    function deleteTodo(id) {
        console.log('clicked ' + id);
        deleteTodoApi('in28minutes', id)
        .then(

            () => {

                //12: 그럼 "id가 ${id}인 todo를 성공적으로 삭제했다 (Delete of todo with id = ${id} successful)" 라고 해주자
                setMessage(`Delete of todo with id = ${id} successful`)
                refreshTodos()
            }
            //1: Display message
            //2: Update Todos list
        ) 
        .catch(
            
        )
    }

    return (
        <div className='container'>
            <h1>Things You Want To Do!</h1>
            
            {message && <div className="alert alert-warning">{message}</div>}
            
            <div>
                <table className='table'>
                    <thead>
                        <tr>
                            <th>Description</th>
                            <th>is Done?</th>
                            <th>Target Date</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                    <tbody>
                        {
                            todos.map(
                                todo => (
                                    <tr key={todo.id}>
                                        <td>{todo.description}</td>
                                        <td>{todo.done.toString()}</td>
                                        {/* <td>{todo.targetDate.toDateString()}</td> */}
                                        <td>{todo.targetDate.toString()}</td>
                                        <td> <button className="btn btn-warning" 
                                                     onClick={() => deleteTodo(todo.id)}>Delete</button> </td>
                                   </tr>
                                )
                            )
                        }
                    </tbody>
                </table>
            </div>
        </div>
    )
}

export default ListTodosComponent
----------------------------------------------------------------------------------------------------------------------

그리고 두 번째 것을 삭제해보자
                                        |
                                        V
------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                               Login   Logout
     _____________________________________________________________________________________________

                                        Things You Want To Do!
              _______________________________________________________________________________
            |                      Delete of todo with id = 2 successful                     |  (<= id=이 적용이됨)
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     
                        
                     Description	               is Done?     	 Target Date       Delete
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
               Learn Full Stack Development	      false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
------------------------------------------------------------------------------------------------------
  clicked 2                                                     ListTodosComponent.jsx:26
------------------------------------------------------------------------------------------------------

두 번째도 이제 사라지고 있다
그럼 너는 Todo를 되돌리기 위해 실제로 백엔드로 가보겠다,
그리고 코드를 약간 변경해보자

----------------------------------------------------------------------------------------------------------------------

⏺ sts


⏺ TodoService.java



package com.in28minutes.rest.webservices.restfulwebservices.todo;
import java.time.*;
import java.util.*;
import java.util.function.*;

import org.springframework.stereotype.*;

@Service
public class TodoService {
	
	private static List<Todo> todos = new ArrayList<>();
	
	private static int todosCount = 0;
	
	static {   (<= 빈공란 삭제 후 저장)
		todos.add(new Todo(++todosCount, "in28minutes","Get AWS Certified", 
							LocalDate.now().plusYears(10), false ));
		todos.add(new Todo(++todosCount, "in28minutes","Learn DevOps", 
				LocalDate.now().plusYears(11), false ));
		todos.add(new Todo(++todosCount, "in28minutes","Learn Full Stack Development", 
				LocalDate.now().plusYears(12), false ));
	}
...
----------------------------------------------------------------------------------------------------------------------

그리고 잠시 후, 몇 초 뒤에 Home으로 가서 돌아와보자
                                        |
                                        V
------------------------------------------------------------------------------------------------------

🌎 http://localhost:3000/todos 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾ 

          in28minutes  Home Todos                                               Login   Logout
     _____________________________________________________________________________________________

                                        Things You Want To Do!

                        
                     Description	               is Done?     	 Target Date       Delete
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                   Get AWS Certified	            false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾                                                                           
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
                     Learn DevOps		              false        Sat Jul 05 2036   | Delete | 
                                                                                  ‾‾‾‾‾‾‾‾  
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                  ________
               Learn Full Stack Development	      false        Sat Jul 05 2036   | Delete |  
                                                                                  ‾‾‾‾‾‾‾‾
             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

------------------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

------------------------------------------------------------------------------------------------------

그럼 모든 Todo가 되돌아온 걸 보게 될 것이다




이번 단계에서 
우리는 Todo 삭제 기능을 구현했다
다음 단계에서 보겠다
