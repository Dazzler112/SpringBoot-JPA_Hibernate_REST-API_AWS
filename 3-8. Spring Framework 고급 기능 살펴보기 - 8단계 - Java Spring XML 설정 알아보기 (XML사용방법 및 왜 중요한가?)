

이 과정을 시작할 때 HelloWorldConfiguration을 만들었다 


package com.example.demo.helloworld;

import org.springframework.beans.factory.annotation.*;
import org.springframework.context.annotation.*;

record Person (String name, int age, Address address) { };
record Address(String firstLine ,String city) { };


@Configuration
public class HelloWorldConfiguration {
	
	@Bean
	public String name () {
		return "Ranga";
	}
	@Bean
	public int age () {
		return 20;
	}
	@Bean
	public Person person() {
		return new Person("Ravi", 25, new Address("Main Street","Utrecht"));
	}
	@Bean
	public Person person2MethodCall() {
		return new Person(name(), age(), address()); //name, age
	}
	@Bean
	public Person person3Parameters(String name, int age, Address address3) {
		return new Person(name, age, address3); //name, age
	}
	@Bean
	@Primary
	public Person person4Parameters(String name, int age, Address address) {
		//name, age, address2
		return new Person(name, age, address); //name, age
	}
	@Bean
	public Person person5Qulifier(String name, int age, @Qualifier("address3qulifier") Address address) {
		return new Person(name, age, address); //name, age
	}
	@Bean(name = "address2")
	@Primary
	public Address address () {
		return new Address("Baker Street","London");
	}

	@Bean(name = "address3")
	@Qualifier("address3qulifier")
	public Address address3 () {
		return new Address("Motinagar","Hyderabad");
	}
}

여기에 Bean의 개수를 정의했었다 Java설정의 한 예시이다 
하지만 처음 Spring Framework를 사용하기 시작했을 때는 Java 설정이 없었다 XML 설정이 전부였다
지금부터 역사를 들여다보고 XML 설정을 살펴보겠다


---------------------------------------------------------------------------------------------------


⏺ XmlConfigurationContextLauncherApplication 클래스파일




package com.example.demo.h1;

import java.util.*;

import org.springframework.context.support.*;

import com.example.demo.game.*;


//현재는 이 클래스에 Java 설정을 사용하고 있다 이 @Configuration은 Java 설정을 사용함을 나타낸다 

//2: 주석 or 삭제처리 클래스가 아주 간단해진다.. //java로 정의할 수 있는 거라면 XML로도 정의할 수 있다 방법은 나중에 살펴보도록 하자 지금은 java실행.. //Spring컨텍스트가 실행되는게 보일것이다 하지만,보다시피 정의된 Bean이 없다 XML컨텍스트에서는 Bean을 어떻게 정의할까? //3: contextConfiguration.xml 파일로...
//@Configuration
//@ComponentScan

//이제 XML 설정 파일을 사용하려고 한다 시작 하려면 설정 파일을 만들어야겠지? src/main/resources로 가서 XML파일을 새로 만들 것이다 //1: src/main/resources 경로로 가서 마우스 오른쪽 ->new -> File > contextConfiguration.xml로 만들 것이다
public class XmlConfigurationContextLauncherApplication {
	
	public static void main(String[] args) {

		//1-1: 지금은 AnnotationConfigApplicationContext를 사용하고 있는데, Java 설정을 실행하는 데 사용된다 
		//그렇지만 xml과 관련된 걸 실행하려고 하지? 그렇게 하려면 CLassPathXml이라는 클래스를 사용하고 컨트롤과 스페이스 키를 사용하면 classPathXmlApplicationContext가 보일 것이다
		//이걸로 설정 파일 위치를 전달할 수 있다 클래스 경로에 src/main/resources가 바로 있으니 이름만 설정하더라도 충분하다 ("contextConfiguration.xml")
		//이제 contextConfiguration.xml을 사용하여 컨텍스트를 실행하고 정의된 모든 Bean을 출력할 것이다 //2: 이제 @Configuration은 더이상 필요하지 않지 마찬가지로 ComponentScan도 정의할 필요가 없다 (위로가서 주석 or 삭제처리...)
		try(var context = 
				new ClassPathXmlApplicationContext("contextConfiguration.xml")) {
			
			Arrays.stream(context.getBeanDefinitionNames()).forEach(System.out::println);
			//4: 프로그램 실행..
			/* 출력결과 ==>
			name
			name 이라는 Bean이 출력되는게 보인다 
			*/
			
			//name 이라는 Bean의 값을 얻으려면, syso라고 입력하고 context.getBean()에 "name"이라는 이름을 넣는다 //다시 실행..
			System.out.println(context.getBean("name"));
			/*출력결과 ==>
			name
			Ranga
			name이 Ranga로 출력된다 
			*/
			//XML 설정에 원하는 만큼 Bean을 많이 정의할 수 있다 //5: 다시 contextConfiguration.xml파일로..
		
			//5-1: age로 getBean을 입력 그리고 실행..
			System.out.println(context.getBean("age"));
			/*실행결과 ==>
			name
			age
			Ranga
			35
			여기에 age가 보이고 35가 표시되지
			*/
			//여기서 정의할 수 있는 흥미로운 부분 하나는 컴포넌트 스캔이다 //6: 다시 contextConfiguration.xml파일로..
			
			//6-1: 실행해보기
			/*
			name
			age
			gameRunner
			marioGame
			pacmanGame
			superContraGame
			org.springframework.context.annotation.internalConfigurationAnnotationProcessor
			org.springframework.context.annotation.internalAutowiredAnnotationProcessor
			org.springframework.context.annotation.internalCommonAnnotationProcessor
			org.springframework.context.event.internalEventListenerProcessor
			org.springframework.context.event.internalEventListenerFactory
			Ranga
			35
			훨씬 많은 컴포넌트가 실행된 게 보인다 gameRunner,marioGame,pacmanGame,superContraGame 이 보인다 
			모두 Bean으로 실행되고 있다 왜 그럴까?
			contextConfiguration.xml에서 <context:component-scan base-package="com.example.demo.game"/> 이부분이 특정한 패키지의 컴포넌트를 스캔하기 때문이다
			컴포넌트를 스캔하면 이 패키지에(com.example.demo.game) 정의된 모든 것을 직접 가져온다 가져온 것들이 여기서 보인다 <context:component-scan/>
			*/
			
			//컴포넌트 스캔 시, 특정 패키지에 있는 모든 걸 가져온다 컴포넌트 스캔을 대체할 방법은 Bean을 각각 따로 정의하는 것이다 그렇게 하고 싶다면 //7: contextConfiguration.xml파일로..
			
			//7-1 : 자바실행..
			/*
			name
			age
			game
			Ranga
			35
			마찬가지로 game이라는 Bean이 실행되었다
			*/
			
			//그러면 contextConfiguration으로 가서 Bean을 하나 더 정의하자 //8:contextConfiguration.xml파일로..
		
			//8-1: Java 애플리케이션 실행
			/*출력결과 ==>
			실행하면 어떻게 보일까?
			
			오류가 발생했다 xml에서 사소한 실수를 했기 떄문이다 
			<bean id="gameRunner" class="com.example.demo.game.GameRunner">
				<constructor-arg value="game"/>
			</bean>
			contextConfiguration의 이 위치애서 생성자 인수는 value가 아니라 ref(참조)이다
			그러니 ref라 입력해야 하고, 우클릭하여 다시 java애플리케이션으로 실행한다 //8-2:xml파일 수정후 다시 실행..
			*/
			
			//8-2: xml 수정후 다시 실행
			/* 출력결과 ==>
			name
			age
			game
			gameRunner
			Ranga
			35
			컨텍스트가 잘 로드되었다 
			*/
			
			//원한다면 game도 실행할 수 있다
			//context.getBean(GameRunner.class)라 입력하고 .run()이라 써준다 어떻게될까?
			context.getBean(GameRunner.class).run();
			
			/* 출력결과==>
			name
			age
			game
			gameRunner
			Ranga
			35
			Running game: com.example.demo.game.PacmanGame@7ef82753
			up
			down
			left
			right
			PacmanGame이 실행되고 있다 up, down, left, right가 보인다
			*/
		}
	} 
}

---------------------------------------------------------------------------------------------------

----------------------------------------------------------
🟢 XML 예제 및 사용 방식

여기에 Spring 설정을 전부 둘 수 있다
Bean도 전부 정의할 수 있고 구글에 Spring XML 설정 예시를(spring xml configuration example) 검색하면 여러 페이지가 나타난다
Spring페이지의 40. XML Schema-based configuration 페이지가 보일것이다 들어가 확인해보면
여기서 context schema를 검색하면 간단한 XML 예시가 보인다 
/* 예시
40.2.8 the context schema
The context tags deal with ApplicationContext configuration that relates to plumbing - 
that is, not usually beans that are important to an end-user 
but rather beans that do a lot of grunt work in Spring, such as BeanfactoryPostProcessors. 
The following snippet references the correct schema so that the tags in the context namespace are available to you.

<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"> <!-- bean definitions here -->

</beans>
*/
이걸 고르고 붙여넣겠다
//* 위의 코드 복사 *//
그러면 Bean요소도 만들었고, Bean 요소를 닫아준다

<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"> <!-- bean definitions here -->

<== 이 사이에 XML형식으로 모든 Spring Bean을 정의할 수 있다
</beans>

더 진행하기 전에 XML 컨텍스트를 실제로 실행해보자
contextConfiguration.xml 파일이다 // 1-1:다시
----------------------------------------------------------

---------------------------------------------------------------------------------------------------


⏺ contextConfiguration.xml 파일




<beans xmlns="http://www.springframework.org/schema/beans"
    xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
    xmlns:context="http://www.springframework.org/schema/context" xsi:schemaLocation="
        http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd"> <!-- bean definitions here -->

<== 여기서 Bean을 정의할 수 있다
	//3: Bean이라고 입력하고, name이란 id의 Bean을 만든다고 해보자 //클래스를 지정할 수도 있다 어떤 클래스로 할까? java.lang.String으로 만들어 보겠다
	//여기서 생성자 주입을 사용하고 싶은데 그러면 생성자 인수를 설정해야 한다 Bean정의는 0개 이상의 생성자 인수를 지정할 수 있다 생성자 인수를 지정해보자 닫는 태그가 별도로 필요하지 않으니 <constructor-arg /> 이렇게만 해도 된다
	//그리고 <constructor-arg /> 여기서 value를 지정할 것이다 value는 "Ranga"라고 쓰자 
	<bean id="name" class="java.lang.String">
		<constructor-arg value="Ranga"/>
	</bean>
	//설정에 이 Bean을 만들었다 이제 프로그램을 실행해보자 //4: XmlConfigurationContextLauncherApplication클래스파일로..

	//5: 전에 age를 다뤄 봤었지? age는 정수형이니까 java.lang.Integer겠지? value를 35입력하고 여기서도 값을 가져올 수 있다 //5-1: XmlConfigurationContextLauncherApplication 클래스파일 메인메소드로..
	<bean id="age" class="java.lang.Integer">
		<constructor-arg value="35"/>
	</bean>

	//6: context라 쓰고 : component-scan이라 쓰면 컴포넌트를 스캔할 패키지를 설정할 수 있다 (<context:component-scan base-package=""></context:component-scan> )
	//game 패키지에서 컴포넌트를 스캔하려 한다고 해 보자 .game 패키지> 우클릭 >copy Qualified name 다음 contextConfiguration에 넣는다 
	//이 베이스 패키지에서 컴포넌트를 스캔하려고 한다 그리고 실행하면 어떻게 보일까? //6-1: XmlConfigurationContextLauncherApplication 클래스파일로..
	<!-- <context:component-scan base-package="com.example.demo.game"/> -->

	//7: <context:component-scan base-package="com.example.demo.game"/>이부분을 주석 처리하고 각각의 Bean을 따로 정의할 수도 있다
	//Bean이라 쓰고, id와 만드려는 Bean이 같도록 설정한다 예를 들어 전에 game패키지 안에있던 PacmanGame클래스 파일을 쓴다고 해보자 먼저 패키지 경로를 복사해야한다 contextConfiguration에서 먼저 패키지를 복사한다 (com.example.demo.game) 그 다음에는 PacmanGame을 복사할 것이다
	//"com.example.demo.game.PacmanGame"이고 인스턴스를 만들것이다 id="game"으로 //7-1: 다시 애플리케이션을 실행한다 XmlConfigurationContextLauncherApplication 클래스파일로...
	<bean id="game" class="com.example.demo.game.PacmanGame"/>
	
	//8: 지금 정의하려는 건 GameRunner이다 여기에 GameRunner라는 Bean을 정의하려 하고 GameRunner Bean을 사용할 거라고 쓴다 그리고 gameRunner라는 이름으로 Bean을 만든다
	//그리고 생성자 인수를 전달하려고 한다 어떤 생성자 인수를 넣지? 
	//XML에서 생성자를 주입하는 방식은 이렇다 GameRunner로 가서 game에 주입하려 한다고 작성하는 것이다 //8-1: 실행하러 ㄱ XmlConfigurationContextLauncherApplication 클래스 파일로..
	<bean id="gameRunner" class="com.example.demo.game.GameRunner">
		<!-- 8-2: <constructor-arg value="game"/> value(X) -->
		<constructor-arg ref="game"/>	
	</bean>
</beans>

---------------------------------------------------------------------------------------------------






/*
정리 및 결론 :
Java 설정에서 수행한 작업은 XML 설정에서도 모두 가능하다 
하지만 이제 XML 설정은 자주 사용되지 않는다 
교육자가 Spring Framework를 사용했던 20년 전에는 모든 걸 XML 파일에 구성해야 했다고 한다 
Spring Configuration이 있는 XML파일을 사용해야 했는데, 줄이 수천 개가 됐다 
다행히 Java 어노테이션이 도입됐다
최근 Spring 버전을 사용하면 XML 설정은 거의 필요하지 않다
하지만 XML 설정을 이해하고 인지하는 건 아주 중요하다
이미 오래된 프로젝트에서 아직도 XML 설정을 사용하기 때문이다 
*/
