

Moving State up and More...
                                                                                ______     ______
● How can we have one state for all counters?                                  (  +1  )   (  -1  )
  ■ 1: Rename Counter to CounterButton                                          ‾‾‾‾‾‾     ‾‾‾‾‾‾
  ■ 2: Calling a parent component method                                        ______     ______
    ○ <CounterButton incrementMethod={increment}>                              (  +2  )   (  -2  )
  ■ 3: Exercise: CounterButton as separate module                               ‾‾‾‾‾‾     ‾‾‾‾‾‾
  ■ 4: Adding Reset Button                                                      ______     ______
  ■ 5: Remove State From Child                                                 (  +5  )   (  -5  )
  ■ 6: Directly Call Parent Methods                                             ‾‾‾‾‾‾     ‾‾‾‾‾‾
                                                                                        0
                                                                                   ____________   
                                                                                  (   Reset    ) 
                                                                                   ‾‾‾‾‾‾‾‾‾‾‾‾




  ■ 3: Exercise: CounterButton as separate module
지난 시간에 과제를 하나 냈었다,
CounterButton을 별도 모듈로 분리하는 거였지








React Developer Tools - Chrome Extension

● Chrome Developer Tools extension for React
● Goal: Inspect React Component Hierarchies
● Components tab shows:
  ■ Root React components
  ■ Sub components that were rendered
● For each component, you can see and edit
  ■ props
  ■ state
● Useful for:
  ■ Understanding and Learning React
  ■ Debugging problems


그 내용을 보기 전에 먼저 리액트에서 아주 중요한 툴을 하나 살펴보자, 
'React Developer Tools' 라는 Chrome 확장 프로그램이다
● Chrome Developer Tools extension for React
React Developer Tools는 리액트를 위한 Chrome 확장 프로그램이다 
● Goal: Inspect React Component Hierarchies
리액트 컴포넌트의 계층 구조를 검사하는 데 사용한다
● Components tab shows:
이 Chrome 확장 프로그램을 사용하면, 컴포넌트 탭에서 다양한 정보를 확인할 수 있다
  ■ Root React components
루트(Root) 컴포넌트를 확인할 수도 있고
  ■ Sub components that were rendered
루트(Root) 컴포넌트를 확인할 수도 있고 
랜더링된 하위 컴포넌트를 확인할 수도 있다
● For each component, you can see and edit
  ■ props
  ■ state
각 컴포넌트의 Props와 State를 보고 편집할 수도 있다
● Useful for:
  ■ Understanding and Learning React
  ■ Debugging problems
이 프로그램은 리액트를 이해하는 데 도움이 될 뿐만 아니라 디버깅 할 때도 매우 유용하다



--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                          0                
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1     |
                              ◟ _______ ◞    ◟ _______ ◞           
                                                                           
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +2    |   |   -2     |
                              ◟ _______ ◞    ◟ _______ ◞             
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +5    |   |    -5    |
                              ◟ _______ ◞    ◟ _______ ◞


-------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  Download the React DevTools for a better development experience:         react refresh:6 
  https://reactjs.org/link/react-devtools
-------------------------------------------------------------------------------------------
여기 React Developer Tools 다운로드 메시지가 있다
콘솔 창으로 가보면 이 메시지가 보일 것이다
이 링크를 클릭해라 (https://reactjs.org/link/react-devtools)

개발 도구는 Chrome 웹 스토어에서 다운로드할 수 있다고 나온다

Browser extension 
The easiest way to debug websites built with React is to install the React Developer Tools browser extension. 
It is available for several popular browsers:

● Install for Chrome
● Install for Firefox
● Install for Edge

Chrome 웹 스토어로 이동하겠다
바로 이동하고 싶으면 구글에서 'React Developer Tools'를 검색
그러면 동일한 페이지로 올 수 있다
여기서 'Chrome에 추가' 버튼을 클릭하면 확장 프로그램이 설치된다
이게 다이다

설치가 끝나면 새로운 탭을 열어주자
기존 열려있던 탭은 모두 닫아주고 
새 탭에서 애플리케이션 URL인 localhost:3000으로 이동하는 게 좋다

우클릭하고 검사(Inspect)창을 열면, 여기에 컴포넌트(Component)메뉴가 있을 것이다
컴포넌트 탭으로 가보면

--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                          0                
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1     |
                              ◟ _______ ◞    ◟ _______ ◞           
                                                                           
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +2    |   |   -2     |
                              ◟ _______ ◞    ◟ _______ ◞             
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +5    |   |    -5    |
                              ◟ _______ ◞    ◟ _______ ◞


-------------------------------------------------------------------------------------------
  Elements  ⚛ Component  >>                                                       🔅  ⁞  x
            ‾‾‾‾‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  ↖  |  🔍  Search (text or /regex/)                                               |  🔅
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▼ App
    ▼ Counter
        CounterButton
        CounterButton
        CounterButton

-------------------------------------------------------------------------------------------

여기서 리액트 애플리케이션을 구성하고 있는 여러 컴포넌트를 볼 수 있다
보다시피 최상위에 App 컴포넌트가 있고, 그 밑에 Counter컴포넌트, 
그밑에 여러 개의 CounterButton 컴포넌트가 있다
그리고 각각의 프로퍼티(props)를 볼 수 있다 

App 이 컴포넌트에는 프로퍼티가 없는데
-------------------------------------

App                               ⏱  👁  🐞  <>
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
props
new entry : ""
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
rendered by
  createRoot()
  react-dom@18.3.1

-------------------------------------
필요하다면 여기서 프로퍼티를 추가할 수도 있다 

이 컴포넌트가 createRoot()에 의해 렌더링됐다는 것과 해당하는 소스도 볼 수 있다


스크롤을 내려 Counter를 선택해보면,
Counter의 프로퍼티를 볼 수 있고
-------------------------------------

Counter                            ⏱  👁  🐞  <>
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
props
new entry : ""
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
hooks                                      🧪  ㅁ
  1️⃣state: 0
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
rendered by
  App
  createRoot()
  react-dom@18.3.1
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
source                                         ㅁ
  bundle.js:136
-------------------------------------

hooks <= 여기에 State훅이 있다는 것과 
App에서 랜더링되었다는 것을 확인할 수 있다


CounterButton으로 가보면 다양한 프로퍼티가 있는 걸 볼 수 있다
-------------------------------------

CounterButton                             ⏱  👁  🐞  <>
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
props                                                  ㅁ
by : 1 
decrementMethod: ƒ decrementCounterParentFunction() {}
incrementMethod: ƒ incrementCounterParentFunction() {}
new entry : ""
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
hooks                                             🧪  ㅁ
  1️⃣state: 0
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
rendered by
  Counter
  App
  createRoot()
  react-dom@18.3.1
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
source                                         ㅁ
  bundle.js:181
-------------------------------------

by라는 프로퍼티가 있고 값은 1이다
decrementMethod라는 프로퍼티는 함수를 가리키고 있고,
incrementMethod라는 프로퍼티 역시 또 다른 함수를 가리키고 있다
여기에도 State 훅이 있고 
내려가 보면 이 컴포넌트가 Couter에서 랜더링됐다는 걸 알 수 있다

여기서 전체 계층 구조를 볼 수 있다
react-dom이 createRoot()를 로딩하고, createRoot()가 App을 실행하면 App이 Counter를 로딩하고
Counter가 CounterButton을 로딩하지
마찬가지로 컴포넌트 소스가 어디 있는지도 볼 수 있고
이 확장 프로그램을 여러 가지 방식으로 활용해 보기 바란다
리액트에서 문제를 디버깅할 때 아주 큰 도움이 될 것이다 





그럼 이제 CounterButton을 별도 모듈로 분리하는 작업을 해보자




Moving State up and More...
                                                                                ______     ______
● How can we have one state for all counters?                                  (  +1  )   (  -1  )
  ■ 1: Rename Counter to CounterButton                                          ‾‾‾‾‾‾     ‾‾‾‾‾‾
  ■ 2: Calling a parent component method                                        ______     ______
    ○ <CounterButton incrementMethod={increment}>                              (  +2  )   (  -2  )
  ■ 3: Exercise: CounterButton as separate module                               ‾‾‾‾‾‾     ‾‾‾‾‾‾
                                                                                ______     ______
                                                                               (  +5  )   (  -5  )
                                                                                ‾‾‾‾‾‾     ‾‾‾‾‾‾
                                                                                        0
                                                                                   ____________   
                                                                                  (   Reset    ) 
                                                                                   ‾‾‾‾‾‾‾‾‾‾‾‾





Counter로 가보겠다 
여기 있는 CounterButton을 별도 모듈로 분리할 것이다
여기서 관련된 코드를 모두 선택하고

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ Counter.jsx



import { useState } from 'react'
import {PropTypes} from 'prop-types'
import './Counter.css'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    function decrementCounterParentFunction(by) {
        setCount(count - by)
    }

    return(
       <> 
        <span className='totalCount'>{count}</span>
        <CounterButton by={1} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>
        <CounterButton by={2} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>           
        <CounterButton by={5} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>
       </>
    )
}

//1: 여기서 부터 맨 아래까지 잘라내겠다
function CounterButton({by, incrementMethod, decrementMethod}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)
        incrementMethod(by)
    }

    function decrementCounterFunction() {
        
        setCount(count - by)
        decrementMethod(by)
    }

    return(
    <div className='Counter'>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}

//1계속 : 여기까지 잘라내기
-----------------------------------------------------------------------------------------------

그런 다음 이번에도 counter폴더에서 새파일을 선택하고 'CounterButton.jsx'를 만들겠다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ CounterButton.jsx


//2-4: 여기로 옮기겠다, 이렇게 저장 하겠다
import {PropTypes} from 'prop-types'

//2: 여기에 코드를 붙여넣겠다 저장한 다음, Counter.jsx로 가서//2-1: Counter.jsx파일로..
//2-2: 함수 앞에 export defualt를 붙여 내보내 주고 //2-3:다시 Counter.jsx로..
export default function CounterButton({by, incrementMethod, decrementMethod}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)
        incrementMethod(by)
    }

    function decrementCounterFunction() {
        
        setCount(count - by)
        decrementMethod(by)
    }

    return(
    <div className='Counter'>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}

---------------------------------------------


⏺ Counter.jsx


import { useState } from 'react'

//2-3: CounterButton에는 PropTypes가 필요하니 이 코드도 잘라서 //2-4: CounterButton.jsx로..
// import {PropTypes} from 'prop-types' (잘라내기)

import './Counter.css'

//2-1: 임포트를 추가해 CounterButton을 가져오겠다, 가져올 곳은 './CounterButton'이지, CounterButton.jsx에서//2-2: CounterButton.jsx로..
import CounterButton from './CounterButton'

export default function Counter() {

    const [count, setCount] = useState(0);

    function incrementCounterParentFunction(by) {
        setCount(count + by)
    }

    function decrementCounterParentFunction(by) {
        setCount(count - by)
    }

    return(
       <> 
        <span className='totalCount'>{count}</span>
        <CounterButton by={1} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>
        <CounterButton by={2} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>           
        <CounterButton by={5} 
            incrementMethod={incrementCounterParentFunction} decrementMethod={decrementCounterParentFunction}/>
       </>
    )
}


-----------------------------------------------------------------------------------------------

useState가 정의되지 않았다고 나온다 
이 오류가 발생하는 이유는 CounterButton.jsx에서 useState를 임포트하지 않았기 때문이다

-----------------------------------------------------------------------------------------------
⏺ VSC


⏺ CounterButton.jsx



//3: 이렇게 넣고 다시 해보곘다
import {PropTypes} from 'prop-types'

export default function CounterButton({by, incrementMethod, decrementMethod}) {

    // [0, ƒ] 
    // const [firstElt, secondElt] = array
    const [count, setCount] = useState(0);

    function incrementCounterFunction() {

        setCount(count + by)
        incrementMethod(by)
    }

    function decrementCounterFunction() {
        
        setCount(count - by)
        decrementMethod(by)
    }

    return(
    <div className='Counter'>
        <div>
         <button className="counterButton" 
                 onClick={incrementCounterFunction}
         >+{by}</button>
        <button className="counterButton" 
                 onClick={decrementCounterFunction}
         >-{by}</button>
        </div>
    </div>
    )
}

CounterButton.propTypes = {
    by: PropTypes.number
}

CounterButton.defaultProps = {
    by: 5
}
-----------------------------------------------------------------------------------------------
                                                  |
                                                  V
--------------------------------------------------------------------------------------------

🌎 http://localhost:3000 사이트화면 ==>

(자세한것 확인 하려면 3000으로 접속...)
(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



                                          0                
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +1    |   |   -1     |
                              ◟ _______ ◞    ◟ _______ ◞           
                                                                           
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +2    |   |   -2     |
                              ◟ _______ ◞    ◟ _______ ◞             
                                        
                              ◜ ‾‾‾‾‾‾‾ ◝    ◜ ‾‾‾‾‾‾‾ ◝ 
                              |   +5    |   |    -5    |
                              ◟ _______ ◞    ◟ _______ ◞


-------------------------------------------------------------------------------------------

이제 컴포넌트도 표시되고 버튼도 정상적으로 동작한다 
이제 Counter 모듈에는 상태와 상태 값을 변경하는 메서드, 그리고 CounterButton 렌더링 코드만 있다
카운터 버튼과 관련된 로직은 별도의 CounterButton 모듈에서 담당하고있고, 훌륭하다





이번 시간에는 Chrome 확장 프로그램인 React Developer Tools를 살펴보고
CounterButton을 별도 모듈로 분리했다
다음 학습에서 보겠다
