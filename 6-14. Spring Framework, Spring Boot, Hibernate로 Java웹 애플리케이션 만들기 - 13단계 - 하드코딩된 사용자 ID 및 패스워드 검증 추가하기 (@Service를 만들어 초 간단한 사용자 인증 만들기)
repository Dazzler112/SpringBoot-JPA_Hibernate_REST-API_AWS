

이전 단계에선 우리는 로그인 양식을 구현했고, 사용자가 자격증명을 입력하면 사용자를 환영 페이지로 리디렉션했다
여기에 Spring Security 같은 프레임워크를 이용해 인증을 구현하면 좋을 것이고 
우리는 이 강의의 말미에 그걸 사용할 것이다

하지만 지금은 우선 간단히 만들어보고 인증 로직을 좀 더 추가해보자

LoginController에서 우리는 지금 환영 페이지를 리턴하고 있다 
우린 여기에 약간의 인증 로직을 추가하려 한다 
그럼 특정한 사용자 이름과 패스워드가 입력되면, 그 다음에 사용자를 환영 페이지로 리디렉션하려 한다 
그렇지 않으면 다시 로그인 페이지로 되돌려 보낸다

그럼 유효한 사용자 이름과 패스워드가 있다고 가정해보자

------------------------------------------------------------------------------------------------------------------


⏺ LoginController 클래스파일



package com.firstapplication.springboot.myfirstwebapp.login;

import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class LoginController {

  //3:그럼 우리는 멤버 변수를 만드려고 한다 그럼 private라고 해주고 AuthenticationService라고 해준다 그리고 이걸 역시 auhtenticationService라고 해줄 것이다
  //그럼 우리는 authenticationService.이라고 해주려고 하는데..//4:gotoWelcomePage 메소드로... 
  private AuthenticationService auhtenticationService;

	@RequestMapping(value="login",method = RequestMethod.GET)
	public String gotLoginPage() {
		
		return "login";
	}
	
	@RequestMapping(value="login",method = RequestMethod.POST)
	//login?name=Ranga RequestParam
	public String gotoWelcomePage(@RequestParam String name, 
								  @RequestParam String password, 
								  ModelMap model) {

    //4: 그럼 여기서 if()라고 하고 그안에 로직을 넣는다, authenticationService.authenticate()라고 하고 name을 입력으로 받고 password를 입력으로 받는다  
    //만일 그게 유효하면 우린 그걸 환영 페이지로 전송하려 한다, 그럼 유효한 사용자라면 넌 그걸 환영 페이지로 전송하려 한다 
    //여기 메소드에 컴파일 오류가 나는데, 왜냐면 유효하지 않는 경우엔 무얼 해야하는지 알려줘야 하기 때문이다 유효하지 않으면 사용자를 로그인 페이지로 되돌려 보낸다
	if (auhtenticationService.authenticate(name, password)) {

      model.put("name", name);
  		model.put("password", password);
  
      //1: 가령 유효한 사용자 이름이 in28minutes고, 유효한 패스워드는 dummy라고 해보겠다
      //그럼 너가 in28minutes와 dummy를 입력하면 환영 페이지로 리디렉션될 것이다 
      //그렇지 않으면 다시 로그인 페이지로 리디렉션 된다 그게 우리가 구현하려고 하는 로직이다
  
      //여기에 직접 로직을 구현할 수 있고 만일 이름이 이것이고 패스워드가 이것이면 가서 그걸 하라고 할 수 있다 하지만 우리가 애플리케이션을 만들 때는 단일 책임 원칙을 지키려고 한다
      //그럼 인증을 책임지는 별도의 클래스를 만들어보겠다, 그걸 인증 서비스라고 부르겠다 그럼 login과 동일한 패키지로 가고 새 클래스를 만들겠다, //2:AuthenticationService클래스파일로..
  
  		//Authentiacation
  		//name - in28minutes
  		//password - dummy
  
  		return "welcome";
      }
    //4 계속 : 그럼 return "login"이라 해주자.. 이게 잘 될까? 한번 애플을 실행해서 웹사이트열어 확인해보자..
    return "login";
  }
}

-------------------------------------------------------------------


⏺ AuthenticationService 클래스파일


package com.firstapplication.springboot.myfirstwebapp.login;

public class AuthenticationService {

	//2:우린 이 AuthenticationService로 뭘하려고 하지? 사용자 인증을 하려고 한다 인증의 결과는 무엇이 되나?
	//Boolean이 될 것이다 그럼 public 메서드를 만들자 public boolean authenticate()라고 하고 입력은 사용자 ID와 패스워드가 될 것이다 그럼(String username, String password)라고 해주자
	//그리고 먼저 return false 라고 해 주겠다
	public boolean authenticate(String username, String password) {
	
		//우리가 구현하려는 로직은 뭐지? 우린 username을 체크하려 하고 username.equalsIgnoreCase("in28minutes")라고 해준다
		//그럼 username에서 ctrl+1을 누르고 구문을 새로운 로컬 변수(Assign statement to new local variable)에 지정을 선택한다 이걸 isValidUserName 이라 하겠다
		//그럼 그게 유요한 사용자 이름인 경우에 이런 불리언 변수가 있을 것이고,
		boolean isValidUserName = username.equalsIgnoreCase("in28minutes");
		
		// 다른 하나는  password.equalsIgnoreCase("dummy")일 것이다 그럼 이것들이 유일하게 유효한 패스워드 조합이고 ctrl+1눌러서 구문을 새로운 로컬 변수(Assign statement to new local variable)에 지정하겠다
		//그리고 이걸 isValidPassword라고 해주겠다
		boolean isValidPassword = password.equalsIgnoreCase("dummy");
		
		//그리고 이제 return isValidUserName && isValidPassword라고 해줄 수 있다 
		return isValidUserName && isValidPassword;
		
	}
	//코드리뷰
	//그럼 만일 username이 유효하지 않으면 이건 거짓이 되고, 연산은 거짓을 리턴할 것이다
	//password가 유효하지 않다면 연산은 역시 거짓을 리턴할 것이다 하지만 만일 둘 다 유효하다면, 즉 username이 in28minutes고 password가 dummy라면 이게 참을 리턴하겠지
	//이렇게 우리의 인증 서비스가 준비되었다 우리는 이 인증서비스를 우리의 LoginController의 여기 gotoWelcomePage메서드 에서 사용하려고 한다 //3:LoginController로..
}


------------------------------------------------------------------------------------------------------------------
                                                  |
                                                  V
-----------------------------------------------------------------------------

http://localhost:8087/login URL사이트 화면 ==>


Welcome to the login page!
       _______________________            _______________________   _______
Name: |name                   | Password:|⚫⚫⚫⚫⚫⚫⚫⚫   | | 제 출 |
       ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾            ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾   ‾‾‾‾‾‾‾

-----------------------------------------------------------------------------
in28minutes라고 하고 dummy라고 한 다음 제출을 클릭해보자


Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.

Thu Apr 18 18:44:54 KST 2024
There was an unexpected error (type=Internal Server Error, status=500).
Cannot invoke "com.firstapplication.springboot.myfirstwebapp.login.AuthenticationService.authenticate(String, String)" because "this.auhtenticationService" is null
java.lang.NullPointerException: Cannot invoke "com.firstapplication.springboot.myfirstwebapp.login.AuthenticationService.authenticate(String, String)" because "this.auhtenticationService" is null

오류이다 NullPointerException이라고 나오고 이 authenticationService가 null이기 때문에 호출할 수 없다고 나온다 

------------------------------------------------------------------------------------------------------------------


⏺ LoginController 클래스파일


package com.firstapplication.springboot.myfirstwebapp.login;

import org.springframework.stereotype.*;
import org.springframework.ui.*;
import org.springframework.web.bind.annotation.*;

@Controller
public class LoginController {

  //5: 그럼 여기서 어떻게 된 걸까? 여기 AuthenticationService에 대한 private 멤버 변수가 있는데, 우린 그걸 초기화하지 않았다 
  //Spring 전에는 직접 이걸 AuthenticationService 구현물에 결합해서 초기화를 하곤 했다, 그럼 넌 	private AuthenticationService auhtenticationService = new AuthenticationService(); 라고 해줬지
	//하지만 우린 Spring을 쓰고 있다, 그리고 Spring을 쓸 때는 그걸 직접 인스턴스와 결합하지 않는다, 대신 Spring이 이걸 결합하도록 한다 
  //그리고 Spring을 이용해서 이것들을 결합하는 가장 좋은 방법은 소위 생성자 주입을 이용하는 방법이다 
  private AuthenticationService auhtenticationService;

  //5 계속: 그럼 여기서 생성자를 만들 것이다 오른쪽클릭> Source > Generate Constructor Using field > authenticationsService를 선택한 다음 Generate를 클릭
  //그럼 여기서 어떻게 됐지? 여기서 지금 생성자를 만들어 넣고 있다 저장하고 다시 실행해서 어떻게 되는지 봐보자
  	public LoginController(AuthenticationService auhtenticationService) {
		super();
		this.auhtenticationService = auhtenticationService;
	}
	

  @RequestMapping(value = "login", method = RequestMethod.GET)
	public String gotLoginPage() {

		return "login";
	}

	@RequestMapping(value = "login", method = RequestMethod.POST)
	// login?name=Ranga RequestParam
	public String gotoWelcomePage(@RequestParam String name, @RequestParam String password, ModelMap model) {
		if (auhtenticationService.authenticate(name, password)) {

			model.put("name", name);
			model.put("password", password);

			// Authentiacation
			// name - in28minutes
			// password - dummy

			return "welcome";
		}
		return "login";
	}
}

------------------------------------------------------------------------------------------------------------------
                                                    |
                                                    V
***************************
APPLICATION FAILED TO START
***************************

Description:

Parameter 0 of constructor in com.firstapplication.springboot.myfirstwebapp.login.LoginController required a bean of type 'com.firstapplication.springboot.myfirstwebapp.login.AuthenticationService' that could not be found.


Action:

Consider defining a bean of type 'com.firstapplication.springboot.myfirstwebapp.login.AuthenticationService' in your configuration.

오류가 나온다 애플리케이션을 시작할 수 없다고 나온다 
왜 시작할 수 없을까? 이컨트롤러의 파라미터 0 
즉 이건 Spring이 관리하는 컴포넌트이다, 왜냐면 우린 그게 컨트롤러라고 했고 생성자를 만들었다 
우리가 생성자를 만들면 Spring은 생성자 주입을 이용하고, 주입하기 위해 Spring은 AuthenticationService를 검색한다 
여기서 Spring은 AuthenticationService를 찾을 수 없다고 불만을 표시하고 있는 것이다 
이런 타입의 Bean을 정의하는 게 어떻느냐고 말 하고 있다 
우린 이걸 수정하기 위해 뭘 할 수 있을까?

