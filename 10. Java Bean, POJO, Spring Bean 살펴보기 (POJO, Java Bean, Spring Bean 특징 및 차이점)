

Exploring Java Bean vs POJO vs Spring Bean

● Java Bean: classes adhering to 3 constraints:                                             ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
  ■ 1: Have public default (no argument) constructors                                      |       POJO       |
  ■ 2: Allow access to their properties using getter and setter methods                    |                  |
  ■ 3: Implements java.io.Serializable                                                      ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

                                                                                            ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
● POJO: Plain Old Java Object                                                              |     Java Bean    |
  ■ No constraints                                                                         |                  |
  ■ Any Java Object is POJO!                                                                ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

                                                                                            ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
● Spring Bean: Any Java Object that is managed by Spring                                   |   Spring Bean    |
  ■ Spring uses IOC Container (Bean Factory or Application Context)                        |                  |
    to manage these objects                                                                 ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ

----------------------------------------------
 Question 2: Java Bean Vs Spring Bean          >
----------------------------------------------                                               

교육자에게 자주 받는 질문 중 하나는 Java Bean, POJO, Spring Bean의 차이이다 
이번 학습에서 살펴보겠다


---------------------------------------------------------------------------------------


⏺ SpringBeanVsJavaBean 클래스파일



package com.example.demo;

import java.io.*;

//간단한 Java 클래스를 만들었다 어느 클래스와 같이 몇개의 멤버 변수와 매서드 toString이 있고

🟢 POJO
class Pojo {
	
	private String text;
	
	private int number;
	
	public String toString() {
		return text + ":" + number;
	}
}

🟢 Java Bean
//조금 복잡할 수 있다 이는 EJB,엔터프라이즈 Java Bean이라는 것 때문이다
//15년 전 EJB는 가장 인기 있는 접근 방식 내지는 Java 애플리케이션을 구현하는 가장 인기 있는 아키텍처 중 하나였다 오늘날 쓰는 사람은 많지 않다
//EJB는 한 때 인기 있었고 EJB는 Java Bean이라는 개념을 도입했다
//❗ 그리고 무언가를 JavaBean이라고 부를 때는 세 가지 매우 중요한 제한이 따른다
// 1. 한가지는 인수 생성자가 없어야 한다는 점이다
// 여기에는 이미 기본적으로 인수 생성자가 없지만, 니가 부여하지 않았다 해도 Java에서 부여했을 것이다
// 2. 다음 제약은 게터와 세터가 있어야 한다는 점이다
// Java Bean이기 때문에 오른쪽 클릭, 소스, 게터/세터 생성을 선택하고 모두 선택 후 생성하면 된다
// 3. 마지막은 Serializable 이라고 하는 것이다
// Serializable은 인터페이스로 클래스가 Serializable이 되도록 하려면 인터페이스를 구현할 수 있다
/*
Serializable인터페이스를 들어가서 확인해보면

public interface Serializable {
}
여기서 볼수 있듯이 Serializable을 열면 여기에는 메서드가 없다 따라서 Serializable을 선언하기만 하면 된다
*/
class JavaBean implements Serializable{ //EJB
	
	//1: public no-arg constructor
	public JavaBean() {
		//기본적으로는 인수 생성자가 없으며 제거해도 괜찮다 그래서 아주 명시적으로 추가하려 한다
		//첫번째 제약은 public no-arg constructor
		//이 항목은 기본 no-arg 생성자일 수도 있고 명시적으로 만들 수도 있다
	}
	
	private String text;
	
	private int number;

	//2: getters and setters
	public String getText() {
		return text;
	}

	public void setText(String text) {
		this.text = text;
	}

	public int getNumber() {
		return number;
	}

	public void setNumber(int number) {
		this.number = number;
	}

	//여기 무엇이 보이든 여기 있는 것은 Java Bean이다
	//클래스에 public no-arg 생성자가 포함되고, 게터와 세터가 있고, Serializable 인터페이스를 구현하면 클래스의 인스턴스는 JavaBen이 된다
	//JavaBean의 개념은 더 이상 중요하지 않다, 엔터프라이즈 Java Bean을 사용하는 사람이 많지 않기 때문이다
}


public class SpringBeanVsJavaBean {
//여기선 클래스의 인스턴스를 만들고 있으며 이런 작업을 할 것이다
//syso에 pojo를 넣어준다 어플리케이션을 실행하면 이 POJO의 값을 출력할 것이다	
	public static void main(String[] args) {
		
		Pojo pojo = new Pojo();
		
		System.out.println(pojo);
		/*출력==>
		null:0
		null과 0으로 초기화되었음
		*/
		//이것이 POJO이다 
		//POJO는 일반적인 오래된 Java 객체라는 뜻이다 (Plain Old Java Object)
		//모든 Java 객체는 POJO이다 
		//지금까지 강의에서 만든 모든 Bean은 POJO, 일반적인 오래된 Java 객체이다
		//Java Bean을 만들면 더 많은 제한이 따른다
		//Pojo 몇부분을 복사하고 Java Bean이라는 것을 만들려 한다고 가정해 보겠다 //다시 위로..
	}
}


//엄두에 두어야 할 두 가지 개념은 POJO 다시 말해 만들고 있는 거의 모든 클래스와 Spring Bean이다

---------------------------------------------------------------------------------------



ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ
|    JVM                                                             |
|  ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ    |
|  |  Spring                                                     |   |
|  |   ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ     ㅡㅡㅡㅡ     |   |
|  |  |  name  |  | age  |   |person |  |person2|   |address|    |   |
|  |  |        |  |      |   |       |  |       |   |       |    |   |
|  |   ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ    ㅡㅡㅡㅡ     ㅡㅡㅡㅡ     |   |
|  |                                                             |   |
|   ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ   | 
ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ 
지난 몇 단계에선 Spring 컨텍스트를 시작했고, Spring 내에서는 여러 개의 Bean을 만들었다
이 모든 것을 Spring Bean이라 부른다 
즉 Spring 프레임워크에서 관리하는 것은 무엇이든 Spring Bean이 될 수 있다



POJO, Java Bean, Spring Bean에 대한 배경을 알게 되었으니 비교해 보겠다
● Java Bean: classes adhering to 3 constraints: 
=> Java Bean은 세 가지 제약을 준수하는 클래스일 뿐이다 
 ■ 1: Have public default (no argument) constructors 
 public 기본생성자, no-arg 생성자가 있고
 ■ 2: Allow access to their properties using getter and setter methods  
 게터와 세터 메서드를 사용하여 프로퍼티에 엑세스 할 수 있고 
 ■ 3: Implements java.io.Serializable
 세 번째로 Java Serialiazble을 구현해야 한다 

● POJO: Plain Old Java Object 
POJO 클래스는 아무 제약이 없으며, 모든 Java 클래스는 생성하면 아무 제약도 없는 일반적인 오래된 Java 객체가 되며
 ■ No constraints 
 ■ Any Java Object is POJO! 
모든 Java 객체는 POJO이다

● Spring Bean: Any Java Object that is managed by Spring
Spring Bean은 Spring이 관리하는 모든 Java 객체이다
 ■ Spring uses IOC Container (Bean Factory or Application Context) to manage these objects 
앞서 본것과 같이 Spring 사용자는 컨테이너, Bean Factory 또는 애플리케이션 컨텍스트를 사용하여 객체를 관리한다
IOC 컨테이너가 관리하는 모든 객체는 Spring Bean이다



/*
정리)
이 단계에선 Java Bean, POJO, Spring Bean의 차이에 대해 알아보았다 
*/
