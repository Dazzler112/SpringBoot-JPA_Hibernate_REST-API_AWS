

지난 시간에는 문자열을 반환하는 간단한 REST API를 만들었다, 
하지만 보통 모든 REST API는 JSON을 반환한다
이번 시간에는 REST API에서 JSON을 반환하는 방법을 알아보겠다


-----------------------------------------------------------------------------------------------------------------------------


⏺ HelloWorldController 클래스파일


package com.in28minutes.rest.webservices.restfulwebservices.helloworld;

import org.springframework.web.bind.annotation.*;

//REST API
@RestController
public class HelloWorldController {


	@GetMapping(path = "/hello-world")
	public String helloWorld() {
		return "Hello World";
	}

  //1: helloWorld()메서드를 복사한 다음, 이번에는 /hello-world-bean을 반환하게 할 것이다, 아랫부분에도 helloWorldBean()으로 이름을 바꿔준다
	@GetMapping(path = "/hello-world-bean")
	public HelloWorldBean helloWorldBean() {

  //1-1: 그리고 이번에는 Hello World를 반환하는 대신 HelloWorldBean을 생성해서 그걸 반환할 것이다
  //예상할 수 있듯 컴파일 에러가 날 것이다, 아직 HelloWorldBean은 존재하지 않기 때문이다, ctrl+1을 해서 Creat class 'HelloWorldBean'을 선택한다
  //IDE가 클래스를 생성하도록 만든다, 같은 소스 폴더를 사용할 거고 IDE가 제안하는 패키지를 그대로 사용한다 그리고 슈퍼클래스는 사용하지 않을거니 지우고 Finish 클릭
  //그리고 생성하고 다시 HelloWorldController클래스로 돌아가면 생성자가 존재하지 않는다는 컴파일 에러가 뜬다 ( Type mismatch: cannot convert from HelloWorldBean to String ) 이부분에서 ctrl+1을 해서 Create constructor를 클릭한다 //1-2: HelloWorldBean클래스로..

  //1-5: 컴파일 에러가 또 발생했는데, 이 부분의 반환 유형이 올바르지 않다고 한다 ( Type mismatch: cannot convert from HelloWorldBean to String ) String이다 ,ctrl+1해서 메서드 변환 유형을 HelloWorldBean으로 변경한다
  //1-5 계속: 메서드 반환 유형을 HelloWorldBean으로 바뀌었고 저장한다, 그러면 모두 컴파일링되고 있는 걸 볼 수 있다, 지금까지 HelloWorldBean을 위한 메서드를 생성했고, HelloWorldBean이 반환될 것이다 문자열을 반환하는 대신 클래스의 인스턴스를 반환하는 것이다
    return new HelloWorldBean("Hello World");
	}

}

-----------------------------------------------------------------


⏺ HelloWorldBean 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.helloworld;

public class HelloWorldBean {

  //1-4: 이렇게 private String message 필드가 생겼다, this.message = message 까지 되었다 , 이제 게터와 세터, toString를 생성한다 우클릭>Source > Generate Getters and Setters를 선택 > message 선택하고 Sellect All 클릭후 생성
  private String message;

  //1-2: 그러면 여기에 생성자가 생긴다 ()이곳에 message라는 이름을 부여한다, 그리고 이걸 HellowWorldBean에 저장할 거고
	public HelloWorldBean(String message) {
    //1-3: 여기에 this.message = message 를 해준다, 그리고 물론 여기에도 컴파일 에러가 생긴다 ctrl+1을 해서 Create field를 선택한다//1-4:생성자 위로..
		this.message = message;
	}

  //1-4 계속: 게터와 세터가 생성되었다 그다음 toString 메서드를 생성할 것이다 우클릭>Source>Generate toString 클릭 > 기본값 그대로 두고 생성
  	public String getMessage() {
		return message;
	}

	public void setMessage(String message) {
		this.message = message;
	}

  //1-4 계속2: 이렇게 toString 메서드도 생성됐다, 지금 간단한 Java Bean을 만들고 있는 거고 저장한다 //1-5: HelloWorldController 클래스파일로...
	@Override
	public String toString() {
		return "HelloWorldBean [message=" + message + "]";
	}
}

-----------------------------------------------------------------------------------------------------------------------------

HelloWorldBean 이라는 클래스를 생성했고, 
-----------------------------
package com.in28minutes.rest.webservices.restfulwebservices.helloworld;

public class HelloWorldBean {

	private String message;

	public HelloWorldBean(String message) {
		this.message = message;
	}
	public String getMessage() {
		return message;
	}
	public void setMessage(String message) {
		this.message = message;
	}
	@Override
	public String toString() {
		return "HelloWorldBean [message=" + message + "]";
	}	
}
-----------------------------
여기에는 message라는 이름의 멤버 변수가 포함돼 있다
Hello World를 message의 값으로 설정했고 

	@GetMapping(path = "/hello-world-bean")
	public HelloWorldBean helloWorldBean() {
		return new HelloWorldBean("Hello World");
	}

Bean을 생성했고 그걸 반환할 것이다
이 URL을 실행하면 뭐가 나오나 보자
hello-world-bean를 입력한다 엔터를 누르면 

-----------------------------------------------------------------------------------------------------------------------------
                                                                                      
http://localhost:8080/hello-world-bean 사이트화면 ==>
                                                                                                     ________
                                                                                          Raw       | Parsed |
                                                                                                     ‾‾‾‾‾‾‾‾
{
"message": "Hello World"
}

-----------------------------------------------------------------------------------------------------------------------------
JSON 응답이 돌아온다
message라는 속성이 Hello World라는 값과 함께 표시된다


원시 형태 응답을 보면 이런형태로

-----------------------------------------------------------------------------------------------------------------------------

http://localhost:8080/hello-world-bean 사이트화면 ==>

                                                                                        ________
                                                                                       |  Raw   |    Parsed
                                                                                        ‾‾‾‾‾‾‾‾


{"message":"Hello World"}

-----------------------------------------------------------------------------------------------------------------------------
Hello World가 나타난다
JSON Formatter라는 크롬 확장프로그램을 설치해서 Raw/Parsed 를 선택해서 볼 수 있음
이 확장 프로그램이 원시 문자열을 JSON 포맷으로 변환해준다








이번 시간에는 간단한 REST API를 하나 더 만들어 봤다
지금까지는 HelloWorldController 클래스에만 집중하면 됐다
그리고 모두 알아서 실행되었다
방금 Bean이 반환되었는데 자동으로 JSON 응답으로 변환됐다
그럼 백엔드에서 어떤 일이 벌어진 것일까???
다음 시간에 이 부분을 마저 알아보겠다
