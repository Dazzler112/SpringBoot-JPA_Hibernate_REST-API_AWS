

Social Media Application - Resources & Methods

● Users REST API                                                                                   [
  ■ Retrieve all Users                                                                                -  {
    ○ GET/users                                                                                             id: 1,
  ■ Create a User                                                                                           name: "Adam",
    ○ POST/users                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                         },                                                                                                                                                                           
                                                                                                      -  {
                                                                                                            id: 2,
                                                                                                            name: "Eve",
                                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                         },                                    
                                                                                                     -  {
                                                                                                            id: 3,
                                                                                                            name: "Jack",
                                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                        }                                       
                                                                                                    ] 

지난 시간엔 REST API로 사용자를 생성했다
POST /users로 요청을 보내면서 사용자 정보도 전달해서 사용자를 생성했다
그때 돌아온 값이 200인 걸 봤는데 이걸 개선할 방법이 있을까? 그전에




먼저 REST API의 다양한 응답 상태를 살펴보겠다


Response Status for REST API

● Return the correct response status                                                                [
  ■ Resource is not found => 404                                                                      -  {
  ■ Server exception => 500                                                                                 id: 1,
  ■ Validation error => 400                                                                                 name: "Adam",
● Important Response Statuses                                                                               birthDate: "2024-05-18T17:16:30.057+0000"
  ■ 200 - Success                                                                                        },                                                                                                                                                                           
  ■ 201 - Created                                                                                     -  {
  ■ 204 - No Content                                                                                        id: 2,
  ■ 401 - Unauthorized (when authorization fails)                                                           name: "Eve",
  ■ 400 - Bad Request (such as validation error)                                                            birthDate: "2024-05-18T17:16:30.057+0000"
  ■ 404 - Resource Not Found                                                                             },                                    
                                                                                                     -  {
                                                                                                            id: 3,
                                                                                                            name: "Jack",
                                                                                                            birthDate: "2024-05-18T17:16:30.057+0000"
                                                                                                        }                                       
                                                                                                    ]


● Return the correct response status
REST API를 구현할 때 말이다, 정확한 응답 상태를 반환하는 것이 중요하다
  ■ Resource is not found => 404
리소스를 찾지 못할 땐 아까 입력한 리소스가 존재하지 않는 거였을 때 404가 반환되었다

직접 확인해보자 localhost8080: 그 다음 존재하지 않는 URL을 입력해 보자
------------------------------------------------------------------------------------------------------------------------------

http://localhost:8080/aaaa 없는 사이트 화면 ==>


Whitelabel Error Page
This application has no explicit mapping for /error, so you are seeing this as a fallback.

Tue May 21 17:13:11 KST 2024
There was an unexpected error (type=Not Found, status=404).
No static resource aaaa.
org.springframework.web.servlet.resource.NoResourceFoundException: No static resource aaaa.
	at ....
------------------------------------------------------------------------------------------------------------------------------
404가 반환됐다
리소스를 찾지 못했단 뜻이다
좋다 , 좋은 결과이다
Spring Boot가 기본으로 제공한 것이였다, Spring Boot 가 이런 에러 페이지랑 에러 응답을 제공했다, 
이와 비슷하게

  ■ Server exception => 500   
만약 서버에서 예외가 발생했다면 그땐 500 응답 상태를 반환하기를 권장한다 
  ■ Validation error => 400
검증 에러가 났다면, 어떤 정보를 전달했는데 해당 정보가 검증을 통과 못하면 그때 권장되는 응답은 400이다

이렇게 REST API를 구현할 때는 적합한 응답 상태를 반환하는 것이 무척 중요하다

● Important Response Statuses
다른 중요한 응답 상태들을 보겠다 
  ■ 200 - Success
200은 성공이다 
지금까지 우리가 구현한 REST API는 계속 200을 반환했다 
  ■ 201 - Created 
201도 있는데, POST 요청으로 새 리소스를 생성했을 때 반환하는 응답 상태는 201이다
  ■ 204 - No Content
또 다른 응답 상태로는 No content도 있는데 콘텐츠를 업데이트 하기 위해 PUT 요청을 보낸다면 
콘텐츠가 없음을 응답 상태로 보내야 할 상황도 있을 것이다 
  ■ 401 - Unauthorized (when authorization fails)
또 하나는 Unauthorized도 있다
이 과정 중에 나중엔 REST API에 인증이랑 인가도 넣을 것이다
사용자가 요청에 올바른 정보를 제공하지 않을 때는 401 응답 상태를 반환한다
  ■ 400 - Bad Request (such as validation error)
400도 있는데 이건 요청이 좋지 않다는 것이다 검증 에러 같은 것이다
  ■ 404 - Resource Not Found
404는 이미 얘기했지, 리소스가 없다는 거고 500은 서버 에러이다


REST API를 만들 때는 HTTP를 잘 활용해야 한다 
URL을 잘 설계해야 한다 
요청 메소드를 잘 선택해야 한다 
세 번째로 중요한 건 REST API에서 올바른 응답 상태를 반환하는 것이다

지금 우리 POST 요청에 적합한 응답 상태는 201이다 

	//POST /users
	@PostMapping("/users")
	public void createUser(@RequestBody User user) {
		service.save(user);
	}
그러면 여기서 어떻게 하면 201을 반환하게 할 수 있을까?

------------------------------------------------------------------------------------------------------------------------------


⏺ UserResource 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.util.*;

import org.springframework.web.bind.annotation.*;

@RestController
public class UserResource {

	private UserDaoService service;
	
	public UserResource(UserDaoService service) {
		this.service = service;
	}
	
	//GET /users
	@GetMapping("/users")
	public List<User> retrieveAllUsers() {
		
		return service.findAll();
	}
	
	//GET /users
	@GetMapping("/users/{id}")
	public User retrieveUser(@PathVariable int id) {
		
		return service.findOne(id);

	}

/*
	//POST /users
	@PostMapping("/users")
	public void createUser(@RequestBody User user) {
		service.save(user);

  //1:ResponseEntity를 이용할 것이다 Spring Framework의 클래스이다, org.springframework.http 패키지이다 이 클래스 안에 created()라는 메소드가 있다, 상태별로 메소드가 존재한다 accepted, badRequest, created, noContent, notFound등이 있다
  //응답 상태별로 메소드가 여러 개 있고 이 중에서 반환하려는 것에 해당하는 메소드를 호출하면 된다 지금은 created에 해당하는 상태를 반환하고 싶다, 빌더를 이용해 CREATED 상태를 생성해야 한다, created를 선택해서 넣겠다
  //일단 지금은 location 값을 null로 하고 이건 나중에 다시 바꿔주겠다, 일단은 ResponseEntity.created(null)로 호출해 준다 그리고 뒤에 .build()를 추가해 준다 추가해 준 다음 ctrl+1을 누르고 메소드 반환값 타입을 ResponseEntity로 바꾸기를 선택한다
	  return ResponseEntity.created(null).build();
  }
*/
                  |  (ResponseEntity로 반환값 바꾼 뒤의 메소드 상태)
                  V
  //1-1: 좋다 이제 반환하는 건 ResponseEntity이다
	//POST /users
	@PostMapping("/users")
  //1-1계속: ResponseEntity의 타입은 User여야 겠지? (ResponseEntity<Object>를 <User>로 바꿔주기) 이것도 바꿔준다, 그리고 서버를 재기동시킨다
	public ResponseEntity<User> createUser(@RequestBody User user) {
		service.save(user);
		
		return ResponseEntity.created(null).build();
	}
}

------------------------------------------------------------------------------------------------------------------------------
너가 하나 기억해야 할 점은 지금 정적 목록을 활용하고 있다는 것이다
	static {
		users.add(new User(++usersCount, "Adam", LocalDate.now().minusYears(30)));
		users.add(new User(++usersCount, "Eve", LocalDate.now().minusYears(25)));
		users.add(new User(++usersCount, "Jim", LocalDate.now().minusYears(20)));
	}
서버가 재기동될 때마다 목록이 리셋된다
서버가 다시 시작되면 목록엔 사용자가 3명이 있는 것이다

localhost:8080/users를 실행하면 3명의 정보가 나온다
[
  {
    "id": 1,
    "name": "Adam",
    "birthDate": "1994-05-21"
  },
  {
    "id": 2,
    "name": "Eve",
    "birthDate": "1999-05-21"
  },
  {
    "id": 3,
    "name": "Jim",
    "birthDate": "2004-05-21"
  }
]
사용자를 추가하겠다

------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | POST     | ▼ |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |  ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________     __________________      |    {
☑ | Content-Type | : | application/json | x   |       name: "Ravi",                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |       birthDate": "1999-05-20"                                
  ______________                              |    }                                
 ( + Add header )                             |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                              |                                    
  🗝 Add authorization         🗑              |                                    
                                              |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation


------------------------------------------------------------------------------------------------------------------------------
Ravi를 추가하고 이 정보 그대로 이 URL로 POST 요청을 보내겠다 보내기를 누른다                        |
                                                                                               V
------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  201                (초록색 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Content-Length:	0 byte                        |    
Date:	 Tue, 21 May 2024 09:21:10 GMT        |                                          
Keep-Alive: timeout=60	                      |                                       
Connection: keep-alive                        |                    NO CONTENT                       
                                              |   
                                              |                                    
                                              |                                    
                                              |


------------------------------------------------------------------------------------------------------------------------------
응답 상태가 201로 바뀐 걸 볼 수 있다 
POST 메소드를 실행할 때 생성 관련 응답 상태가 반환됐다

좋다 조금 더 개선해 보겠다
REST API를 만들때 이 REST API를 소비하는 사람 입장에서 생각을 해야 한다
이 REST API의 소비자는 사용자를 생성하려고 하는데 사용자가 생성되면 201 상태를 반환한다
여기 추가로 어떤 사용자가 생성됐는지 알려줄 순 없을까? 그 정보를 반환할 수 있을까? 
예를 들어 생성된 사용자는 얘이다, 하고 /users/4를 반환할 순 없을까, 이것이다
/users/4를 URL로 반환하면 소비자는 여기에 요청을 보낼 수 있게 되겠지
localhost:8080/users/4로 조회를 할 수 있게말이다
------------------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users/4 사이트 화면==>


{
"id": 4,
"name": "Ravi",
"birthDate": "1999-05-20"
}

------------------------------------------------------------------------------------------------------------------------------

이 URL을 반환하면 소비자는 이걸 통해 생성된 사용자의 정보를 조회할 수 있다 

그럼 이건 어떻게 구현하면 될까?
보통은 생성된 리소스의 URL을 반환할 때 사용하는 HTTP 헤더가 있다
바로 location 헤더인데, created 메소드, ResponseEntity의 created 메소드는 사실 URI location을 인자로 받는다 
바로 구현해 보도록 하겠다

------------------------------------------------------------------------------------------------------------------------------



⏺ UserResource 클래스파일



package com.in28minutes.rest.webservices.restfulwebservices.user;

import java.util.*;

import org.springframework.http.*;
import org.springframework.web.bind.annotation.*;

@RestController
public class UserResource {

	private UserDaoService service;
	
	public UserResource(UserDaoService service) {
		this.service = service;
	}
	
	@GetMapping("/users")
	public List<User> retrieveAllUsers() {
		
		return service.findAll();
	}
	
	@GetMapping("/users/{id}")
	public User retrieveUser(@PathVariable int id) {
		
		return service.findOne(id);

	}

	@PostMapping("/users")
	public ResponseEntity<User> createUser(@RequestBody User user) {
    //2-2: 이름은 savedUser라고 하겠다 그리고 //2-3: 다시 URI location으로.. 
		User savedUser = service.save(user);

    //2-1:여기에 URL 전체를 넣는 대신 현재 요청이 보내지는 URL을 활용하겠다, 현재 요청은 항상 이 URL로(/users) 온다, 여기에 /4라고 붙여주고 싶다 그런데 /4라고 바로 붙여주는 게 아니라 /users다음에 아이디 값을 붙여줘야겠지?, 이 아이디엔 사용자의 아이디 값을 넣어줘야겠고 즉 user.getID 값인 거다
    //그럼 /users 부분을 취득하고 거기에 /{id}를 붙여주는 작업이 필요하다 이 id 부분은 user.getID의 값이 들어가야 하고 자, 바로 적용해 보자
    //자, 다시 먼저 현재 메소드의 URL이 필요하다 이런 데 유용한 Spring이 제공하는 빌트인 유틸리티 메소드가 있는데 ServletUri을 입력하고 ctrl+스페이스바를 누르면 클래스가 나온다 ServletUriComponentsBuilder라고 나온다 안에 보면 fromCurrentRequest란 메소드가 있다 현재 요청에 해당하는 URL을 반환한다. (/users)이 부분은 준비가 됐다, 본 요청에 해당하는 URL은 준비가 됐다
    //다음으로 추가할 건 경로이다 path()를 추가해 준다 /{id}를 여기에 넣어준다 현재 요청에 해당하는 URL에 이 부분을 추가하고 싶다, 이 id라는 부분은 바꿔줘야 한다. 생성된 사용자의 아이디로 말이다 .buildAndExpand를 추가하고 그리고 아이디 값을 넣어줘야 하는데 service.save(user)가 User를 반환한다 반환값을 새 변수에 저장하겠다 //2-2: service.save(user); 여기로..

    //2-3: savedUser.getId()를 호출해준다 그리고 이 값을 URI로 변환해 줘야한다 코드가 좀 복잡해 보일 수 있는데 빠르게 한 번 보자
		// /users/4 => /users /{id},  user.getID
		URI location = ServletUriComponentsBuilder.fromCurrentRequest()
						.path("{id}")
						.buildAndExpand(savedUser.getId())
						.toUri();  

    //2: location이라고 써준 다음 ctrl + 1 을 눌러 location이라는 지역 변수를 생성한다, 이 정보를 알고 싶으니 이걸 생성해서 HTTP 응답에 담아 보내야 한다 //2-1: service.save(user); 아래로 작성..
		return ResponseEntity.created(location).build();
	}
}

------------------------------------------------------------------------------------------------------------------------------
단계별로 보고 이해를 해 보자
ServletUriComponentsBuilder.fromCurrentRequest() <= 현재 요청의 URL에 추가하고 싶은 건 path("/{id}")이다
이 변수는 생성된 사용자의 아이디로 바꿔주고 싶다 .buildAndExpand(savedUser.getId())
그걸 URL로 변환하고 변환해줘야 한다 
여기에 반환된 location이 있고, 이 location 을 ResponseEntity에 담아(return ResponseEntity.created(location).build();) 보내는 것이다
이걸 저장하면 서버가 재기동한다
현재 사용자는 3명뿐이다 

/users로 확인해보면

------------------------------------------------------------------------------------------------------------------------------

🌎 http://localhost:8080/users 사이트화면 ==>


[
  {
    "id": 1,
    "name": "Adam",
    "birthDate": "1994-05-21"
  },
  {
    "id": 2,
    "name": "Eve",
    "birthDate": "1999-05-21"
  },
  {
    "id": 3,
    "name": "Jim",
    "birthDate": "2004-05-21"
  }
]
------------------------------------------------------------------------------------------------------------------------------

사용자가 3명 나온다
이제 Talend API Tester에서 POST 요청을 보내면 

------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | POST     | ▼ |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |  ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________     __________________      |    {
☑ | Content-Type | : | application/json | x   |       name: "Ravi",                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |       birthDate": "1999-05-20"                                
  ______________                              |    }                                
 ( + Add header )                             |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                              |                                    
  🗝 Add authorization         🗑              |                                    
                                              |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation


------------------------------------------------------------------------------------------------------------------------------ 
                                                                                                    |
                                                                                                    V
------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)


  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  201                (초록색 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Content-Length:	0 byte                        |    
Date:	 Tue, 21 May 2024 10:37:30 GMT        |                                          
Keep-Alive: timeout=60	                      |                                       
Connection:	keep-alive                    |                    NO CONTENT                       
Location:  http://localhost:8080/users4       |   
                                              |                                    
                                              |                                    
                                              |


------------------------------------------------------------------------------------------------------------------------------

응답값이 201로 오는 걸 확인할 수 있다
아래로 내려와서 보면 Location 헤더가 있다 http://localhost:8080/users가 온 이유는 현재 요청의 경로를 참고했기 떄문이다 ( URI location = ServletUriComponentsBuilder.fromCurrentRequest()... )
현재 요청의 경로이다
  ______________      ____________________________________________________________    ___________________
 | POST     | ▼ |    |    http://localhost:8080/users                             |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
여기에 입력돼 있는 값 그래로이다 
현재 요청의 경로가 담겨 오고 ServletUriComponentsBuilder.fromCurrentRequest()
거기에 변수를 붙였고 .path("{id}")
해당 변수는 값으로 대체된 것이다 .buildAndExpand(savedUser.getId())
id 부분은 생성된 사용자의 아이디 값으로 대체된 것이다, 그래서 4인것이다
그래서 /4가 붙여져 반환된 것이다
그 값이 location 헤더에 담겨 왔다 Location:  http://localhost:8080/users4 (Location:  http://localhost:8080/users4 의 링크를 누르면 Method GET 으로 바뀌고 SEND를 눌러 조회할 수 있다)
이 API의 소비자는 해당 URL을 이용해 조회할 수 있다 생성된 사용자의 정보를 말이다 보내기를 눌러 생성된 사용자의 정보를 확인할 수 있다 

--------------------------------------------------------------------------------------------------------------------------------

🖇 Talend API Tester 화면 ==>    (더 자세한건 크롬 확장프로그램 Talend API Tester 실행해서 확인..)

  METHOD                SCHEME :// HOST [ ":" PORT ] [ PATH [ "?" QUERY ]]
  ______________      ____________________________________________________________    ___________________
 | GET     | ▼  |    |    http://localhost:8080/users/4                           |  |  ✈ Send       | ▽ |
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                        ▶ QUERY PARAMETERS
  HEADERS   ⬇                   | Form ▼ |  ◀ | ▶  BODY                                   | Text ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
   ______________     __________________      |    
☑ | Content-Type | : | application/json | x   |    XHR does not allow payload for GET request.                           
   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾     ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      |                                   
  ______________                              |                                
 ( + Add header )                             |                                    
  ‾‾‾‾‾‾‾‾‾‾‾‾‾‾                              |                                    
  🗝 Add authorization         🗑              |                                    
                                              |    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                   Text JSON XML HTML | Format Body |
                                                    ☑ Enable body evaluation

  Response
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  200                (초록색 바탕)
___________________________________________________________________________________________________

  HEADERS                     | pretty ▼ |  ◀ | ▶  BODY                                 | pretty ▼ |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾     |   ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Content-Type:	application/json              |    {
Transfer-Encoding:	chunked               |       id": 4,                                  
Date:	Tue, 21 May 2024 10:48:22 GMT         |       "name": "Ravi", 
                                              |       "birthDate": "1999-05-20"                             
                                              |   }                                 
Keep-Alive:	timeout=60                    |                                    
Connection:	keep-alive                    |   lines nums  📄 copy              length: 47 bytes                                  
 ▶ COMPLETE REQUEST HEADERS                   |
--------------------------------------------------------------------------------------------------------------------------------





이번 시간엔 createUser() 메소드를 개선해서 201을 반환하도록 했고 
생성된 리소스의 location 값을 응답값 헤더에 넣어서 반환했다
REST API를 만들 땐 꼭 소비자의 입장에서 생각하길 바란다 
