

Full Stack - Todo REST API - Resources and Methods

● REST API                                                                  ----------------------------------------------------------------------------------------------------------------------
  ■ Hello World REST API:    
    ○ Hello Wrold:                                                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      ◦ @GetMapping(path = "/hello-world")                                      in28Minutes   Home Todos                         (베이지? 바탕)                                           Logout                                            
    ○ Hello Wrold Bean:                                                         _______________________________________________________________________________________________________________
      ◦ @GetMapping(path = "/hello-world-bean")                                                                                
    ○ Hello Wrold Path Variable:                                                                                
      ◦ @GetMapping(path = "/hello-world/path-variable/{name}")                       Your Todos
● Todo REST API:                                                                                
    ○ Retrieve Todos                                                                  Description	                      Taget Date	   Is Done?
      ◦ @GetMapping("/users/{username}/todos")                                       ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
    ○ Retrieve Todo                                                                                                                                      ________________      _______________
      ◦ @GetMapping("/users/{username}/todos/{id}")                                   Learn AWS                         2025-07-022	   false            | Update (녹바탕) |   | Delete(노바탕) |    
    ○ Delete Todo                                                                                                                                        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      ◦ @DeleteMapping("/users/{username}/todos/{id}")                                ---------------------------------------------------------------------------------------------------------
    ○ Update Todo                                                                                                                                        ________________      _______________
      ◦ @PutMapping("/users/{username}/todos/{id}")                                   Learn DevOps                      2025-07-022	   false            | Update (녹바탕) |   | Delete(노바탕) |    
    ○ Create Todo                                                                                                                                        ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
      ◦ @PostMapping("/users/{username}/todos")                                       ---------------------------------------------------------------------------------------------------------
                                                                                                                                                         ________________      _______________
                                                                                      Learn React                       2025-07-022	   false            | Update (녹바탕) |   | Delete(노바탕) |    
                                                                                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                      ---------------------------------------------------------------------------------------------------------
                                                                                                                                                         ________________      _______________
                                                                                      Learn Angular                     2025-07-022	   false            | Update (녹바탕) |   | Delete(노바탕) |    
                                                                                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾      ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
                                                                                      ---------------------------------------------------------------------------------------------------------
                                                                                
                                                                                ----------------------------------------------------------------------------------------------------------------------
                                                                                
이번 단계에선 Todo REST API에 집중해보자
먼저 Retrieve Todos API부터 만들어보겠다
    ○ Retrieve Todos
      ◦ @GetMapping("/users/{username}/todos")    
특정한 사용자에 관련된 Todo 세부정보를 받는 것이 우리의 목표지
우리는 이런 /users/, 패스변수 {username}, 그리고 todos로 된 이 URL로 GetMapping을 만들려고 한다
그럼 너는 in28minutes라는 사용자의 Todo를 요청 받으면 in28minutes에 관련된 Todo의 값을 받아야 할 것이고
그걸 다시 리턴해야 할 것이다, 우리가 이 프로젝트를 만들 때
이미 파일이 두 개 있었지, 바로 Todo와 TodoService이다

----------------------------------------------------------------------------------------------------------------------

⏺ sts


⏺ Todo.java


package com.in28minutes.rest.webservices.restfulwebservices.todo;

import java.time.LocalDate;

public class Todo {

	public Todo() {
		
	}
	
	public Todo(int id, String username, String description, LocalDate targetDate, boolean done) {
		super();
		this.id = id;
		this.username = username;
		this.description = description;
		this.targetDate = targetDate;
		this.done = done;
	}

	private int id;

	private String username;
	
	private String description;
	private LocalDate targetDate;
	private boolean done;

	public int getId() {
		return id;
	}

	public void setId(int id) {
		this.id = id;
	}

	public String getUsername() {
		return username;
	}

	public void setUsername(String username) {
		this.username = username;
	}

	public String getDescription() {
		return description;
	}

	public void setDescription(String description) {
		this.description = description;
	}

	public LocalDate getTargetDate() {
		return targetDate;
	}

	public void setTargetDate(LocalDate targetDate) {
		this.targetDate = targetDate;
	}

	public boolean isDone() {
		return done;
	}

	public void setDone(boolean done) {
		this.done = done;
	}

	@Override
	public String toString() {
		return "Todo [id=" + id + ", username=" + username + ", description=" + description + ", targetDate="
				+ targetDate + ", done=" + done + "]";
	}

}

----------------------------------------------------------------------------------------------------------------------

Todo는 아주 간단한 Java POJO, 즉 Plain Old Java Object이다
거기엔 id, username, description, targetDate, done이 있고, 생성자가 있다
우린 또 무인수 생성자도 있고 <=(	public Todo() {	}  )
게터와 세터도 있고 toString()을 정의했다, 이렇게 이건 POJO이고
이게 우리가 강의 초반에 Todo 웹 애플리케이션을 만들 때 사용한 것이다

----------------------------------------------------------------------------------------------------------------------

⏺ sts


⏺ TodoService.java




package com.in28minutes.rest.webservices.restfulwebservices.todo;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.function.Predicate;

import org.springframework.stereotype.Service;

@Service
public class TodoService {
	
	private static List<Todo> todos = new ArrayList<>();
	
	private static int todosCount = 0;
	
	static {
		todos.add(new Todo(++todosCount, "in28minutes","Get AWS Certified", 
							LocalDate.now().plusYears(10), false ));
		todos.add(new Todo(++todosCount, "in28minutes","Learn DevOps", 
				LocalDate.now().plusYears(11), false ));
		todos.add(new Todo(++todosCount, "in28minutes","Learn Full Stack Development", 
				LocalDate.now().plusYears(12), false ));
	}
	
	public List<Todo> findByUsername(String username){
		Predicate<? super Todo> predicate = 
				todo -> todo.getUsername().equalsIgnoreCase(username);
		return todos.stream().filter(predicate).toList();
	}
	
	public Todo addTodo(String username, String description, LocalDate targetDate, boolean done) {
		Todo todo = new Todo(++todosCount,username,description,targetDate,done);
		todos.add(todo);
		return todo;
	}
	
	public void deleteById(int id) {
		Predicate<? super Todo> predicate = todo -> todo.getId() == id;
		todos.removeIf(predicate);
	}

	public Todo findById(int id) {
		Predicate<? super Todo> predicate = todo -> todo.getId() == id;
		Todo todo = todos.stream().filter(predicate).findFirst().get();
		return todo;
	}

	public void updateTodo(Todo todo) {
		deleteById(todo.getId());
		todos.add(todo);
	}
}
----------------------------------------------------------------------------------------------------------------------

그리고 TodoService도 역시 우리가 웹 애플리케이션을 제작할 때 사용한 그것이다
여기 아주 간단한 메서드들이 있는 걸 보게 될 것이고
이렇게 findByUsername(), 그리고 새 Todo를 추가할 때 사용하는 addTodo()
그리고 특정한 Todo를 삭제하는데 쓸 수 있는 deleteById()도 있고, 툭정한 Todo를 찾기 위한 findById()도 있고
그리고 updateTodo()도 있다, 
그리고 이 서비스에서 모든 작업은 하드코딩된 
----------------------------------------------------------
	static {
		todos.add(new Todo(++todosCount,"in28minutes","Get AWS Certified 1", 
				LocalDate.now().plusYears(1), false));
		todos.add(new Todo(++todosCount,"in28minutes","Learn DevOps 1", 
				LocalDate.now().plusYears(2), false));
		todos.add(new Todo(++todosCount,"in28minutes","Learn Full Stack Development 1", 
				LocalDate.now().plusYears(3), false));
	}
----------------------------------------------------------
Todo 데이터에 대해 이루어졌지

그럼 예를 들어 findByUsername()는 리스트를 하나씩 검색해서 특정한 username과 매칭되는 것들을 찾아서
필터링된 리스트를 리턴하지
우린 지금 Todo 리소스를 만드려고 한다

그럼 가서 그걸 만들어보자, 새로 클래스를 만들고 이름을 TodoResource라고 한다

----------------------------------------------------------------------------------------------------------------------

⏺ sts


⏺ TodoService.java




package com.in28minutes.rest.webservices.restfulwebservices.todo;

import org.springframework.web.bind.annotation.*;

//1: 그리고 이건 @RestController가 될 거고
@RestController
public class TodoResource {

    //1-4: 그리고 TodoService를 호출하려고 하는데 그럼 정의해보자 private TodoService todoService;라 하고 임포트를 정리해보자
    //이렇게 TodoService가 임포트되었고
    private TodoService todoService;

    //1-1: 우리가 정의하려는 첫 번째 메서드는 @GetMapping이다, 그리고 public void retrieveTodos라고 해준다
    	@GetMapping("")  //<= 1-2: 그리고 여기에 매핑을 넣어줄까?, 매핑은 "/users/{username}/todos"이다
	    public void retrieveTodos(@PathVariable String username) { //<= 1-3: 그리고 우린 패스 변수를 잡으려고 하고, 그럼 너는 @PathVariable이라고 해준다, 그럼 import org.springframework.web.bind.annotation.RestController가 보일거고 org.springframework.web.bind.annotation.GetMapping도 있지
                                                                  //그리고 이건 String username이 될 것이다
		
	    }
}
----------------------------------------------------------------------------------------------------------------------
                                                      |
                                                      V
----------------------------------------------------------------------------------------------------------------------

⏺ sts


⏺ TodoService.java




package com.in28minutes.rest.webservices.restfulwebservices.todo;

import org.springframework.web.bind.annotation.*;

@RestController
public class TodoResource {

	private TodoService todoService;

  //2: 우린 생성자 주입을 사용할 것이다, 그럼 public이라 하고 이걸 파라미터로 받는 생성자를 만들어보자 TodoResource를 복사하고
  //이걸 생성자 파라미터로 넣어주고 (TodoService todoService)
  public TodoResource(TodoService todoService) {

    //2-1: 그리고 this.TodoService = todoService; 라고 해준다
    this.todoService = todoService;
  }

	@GetMapping("/users/{username}/todos")
	public void retrieveTodos(@PathVariable String username) {
		
	}
}

----------------------------------------------------------------------------------------------------------------------
                                                  |
                                                  V
----------------------------------------------------------------------------------------------------------------------

⏺ sts


⏺ TodoService.java




package com.in28minutes.rest.webservices.restfulwebservices.todo;

import org.springframework.web.bind.annotation.*;

@RestController
public class TodoResource {

	private TodoService todoService;
	
	public TodoResource(TodoService todoService) {
		this.todoService = todoService;
	}
	
	@GetMapping("/users/{username}/todos")
         //3-1: 리턴타입이 void에서 List<Todo>로 변경됨.. 
	public List<Todo> retrieveTodos(@PathVariable String username) {
		
      //3:이제 todoService를 사용할 차례고, 그럼 todoService.findByUsername()이라고 하고 username을 넣는다, 그리고 우린 뭘 하려고 하지?
      //이걸 리턴하려고 한다 그럼 앞에 return 이라고 해주자, 이제 임포트를 정리하고 ctrl+1을 눌러서 메서드 리턴 타입을 'List<Todo>'로 변경한다, 좋다, 이제 실행을 해보면
      return todoService.findByUsername();
	}
}

----------------------------------------------------------------------------------------------------------------------

그리고 이제 
브라우저로 가서 URL을 실행해보자, users/in28minutes라고 모두 소문자로 쓰고 /todos라고 해준다
                                                      |
                                                      V
--------------------------------------------------------------------------------------------


🌎 http://localhost:8080/users/in28minutes/todos 사이트화면 ==>


[
  {
    "id": 1,
    "username": "in28minutes",
    "description": "Get AWS Certified",
    "targetDate": "2034-07-27",
    "done": false
  },
  {
    "id": 2,
    "username": "in28minutes",
    "description": "Learn DevOps",
    "targetDate": "2035-07-27",
    "done": false
  },
  {
    "id": 3,
    "username": "in28minutes",
    "description": "Learn Full Stack Development",
    "targetDate": "2036-07-27",
    "done": false
  }
]

--------------------------------------------------------------------------------------------

좋다
여기 Todo 리스트가 들어오고 있고 
여기 in28minutes가 있고 Get AWS Certified가 있지
각각에 targetDate가 있고, 모두가 미완료 상태이다
그것들에 관련된 id도 있지

이렇게 우리는 Todo에 관한 REST API를 이제 
우리는 프론트엔드 애플리케이션에서 이걸 소비하려고 한다
그 방법은 다음 단계에서 알아보자
