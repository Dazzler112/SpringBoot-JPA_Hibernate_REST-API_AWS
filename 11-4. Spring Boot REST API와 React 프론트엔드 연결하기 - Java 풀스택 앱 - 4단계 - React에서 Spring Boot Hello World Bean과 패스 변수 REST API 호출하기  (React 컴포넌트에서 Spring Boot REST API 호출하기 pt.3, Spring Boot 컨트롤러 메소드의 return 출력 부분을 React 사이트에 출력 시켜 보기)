

지난 단계에서 우린 요청에 성공했다 
그리고 요청에 성공하면 뭘 헀지?

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx

	
function WelcomeComponent() {

    const {username} = useParams()

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }

    function successfulResponse(response) {
        console.log(response)
    }

    function errorResponse(error) {
        console.log(error)
    }

--------------------------------------------------------------------------------------------

successfulResponse()를 호출했다
그리고 response가 프린트되는 걸 확인했다 <= .then( (response) => successfulResponse(response) )
이제 우리는 요청에 성공하면 메시지를 받고 그걸 환영 페이지에 표시하려고 한다

그걸 어떻게 할까? WelcomeComponent에서 상태를 사용하기 시작할 것이다,
그럼 너는 페이지에 메시지를 표시하길 원하고 그러면 우린 상태를 사용할 거고

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'
//1 계속: useState가 임포트됨.. 
import { useState } from 'react'

function WelcomeComponent() {

    const {username} = useParams()

    //1: 그 상태에 메시지를 넣을 것이다, 그럼 이렇게 useState()를 호출할 거고 기본값은 (null)일 것이다
    //이렇게 최초 메시지는 null일 것이고, 이렇게 useState를 리액트에서 임포트했지, 그러면 이건 2개의 원소로 된 배열을 리턴하게 되지, 우린이 부분을 충분히 연습을 했지?
    //너는 [] 여기 뭘 적얼지 아주 잘 알 것이다 그럼 [message, setMessage]라고 적고 message의 초기값은 null이 될 것이다 //1-1: return 안으로..
    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }

    function successfulResponse(response) {
        console.log(response)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
    
          //1-1: 그리고 우린 여기에 <div>를 만들 것이다, 그럼 <div>라고 하고 className="text-info"라고 해주자 평소대로 여기 큰 따옴표를 사용할 거고
          //그리고 여기에 {message}라고 넣어줄 것이다
          <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

그리고 여기로 가보면, 기본값으로서
                                      |
                                      V
--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------

--------------------------------------------------------------------------------------------

아무것도 보이지 않을 것이다

이제 우리는 요청에 성공한 경우에 쓸 메시지를 채울 거고

그럼 successfulResopnse()에서 

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'
import { useState } from 'react'

function WelcomeComponent() {

    const {username} = useParams()

    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }

    function successfulResponse(response) {
        console.log(response)

        //2: response 데이터를 이용해서 setMessage()를 호출한다, response 데이터는 어떻게 받을까?
        setMessage(response)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
            <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

그럼 Console로 가서 보자
그리고 Call Hello World를 클릭하면

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:9
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {data: 'Hello World', status: 200, statusText: '',           WelcomeComponent.jsx:19
     headers: AxiosHeaders, config: {...}. ...}
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  cleanup                                                        WelcomeComponent.jsx:11 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

실제로 여기 data라는 속성이 있는 걸 볼 수 있지, 그럼 response.data라고 하면 Hello World를 받겠지


--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'
import { useState } from 'react'

function WelcomeComponent() {

    const {username} = useParams()

    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }

    function successfulResponse(response) {
        console.log(response)

        //3: 그럼 setMessage(response.data)라고 해주자, 좋아 보이고, 이걸 저장하고 돌아가 보자
        setMessage(response.data)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
            <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

Call Hello World를 클릭하면


--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

                                       Hello World

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:9
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {data: 'Hello World', status: 200, statusText: '',           WelcomeComponent.jsx:19
     headers: AxiosHeaders, config: {...}. ...}
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  cleanup                                                        WelcomeComponent.jsx:11 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
--------------------------------------------------------------------------------------------

여기 버튼 아래에 Hello World가 나오는 걸 볼 수 있다
그럼 REST API로 부터 응답이 오는지 확인해볼까?

HelloWorldController로 돌아가보겠다,

--------------------------------------------------------------------------------------------

⏺ sts


⏺ HelloWorldController.java



package com.in28minutes.rest.webservices.restfulwebservices.helloworld;

import java.util.*;

import org.springframework.context.*;
import org.springframework.context.i18n.*;
import org.springframework.web.bind.annotation.*;

//REST API
@RestController
public class HelloWorldController {

	private MessageSource messageSource;
	
	public HelloWorldController(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	@GetMapping(path = "/hello-world")
	public String helloWorld() {

    //4: 그리고 "Hello World v2"라고 해보자
		return "Hello World v2";
	}
	
	@GetMapping(path = "/hello-world-bean")
	public HelloWorldBean helloWorldBean() {
		return new HelloWorldBean("Hello World");
	}
	
	// Path Parameters
	// /users/{id}/todos/{id} => /users/1/todos/101
	// /hello-world/path-variable/{name}
	// /hello-world/path-variable/Ranga
	
	@GetMapping(path = "hello-world/path-variable/{name}")
	public HelloWorldBean helloWorldPathVariable(@PathVariable String name) {
		return new HelloWorldBean(String.format("Hello World, %s", name));
	}
	
	@GetMapping(path = "/hello-world-internationalized")
	public String helloWorldInternationalized() {
		Locale locale = LocaleContextHolder.getLocale();
		return messageSource.getMessage("good.morning.message", null, "Default Message", locale);
		
//		return "Hello World V2";
		 
		  //1:good.morning.message=Good Morning
		  //2:
//		  - Example: `en` - English (Good Morning)
//		  - Example: `nl` - Dutch (Goedmorgen)
//		  - Example: `fr` - French (Bonjour)
//		  - Example: `de` - Deutsch (Guten Morgen)		

	}
	
}

--------------------------------------------------------------------------------------------

그리고 Spring Boot 애플리케이션이 변경사항을 잡을 때까지 기다리고, Call Hello World를 클릭한다

--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

                                       Hello World v2

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:12
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {data: 'Hello World v2', status: 200, statusText: '', heade  WelcomeComponent.jsx:21
    rs: AxiosHeaders, config: {…}, …}
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  cleanup                                                        WelcomeComponent.jsx:14 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
--------------------------------------------------------------------------------------------

이렇게 Hello World v2를 볼 수 있다
멋지지? 좋다

이렇게 우리는 백엔드 REST API로부터 응답을 받고 있고, 그걸 페이지에 표시하고 있다

이제 우리는 아주 비슷하게 /hello-world-bean을 호출해보자
너는 /hello-world-bean을 호출하고, 응답이 돌아오면 여기 화면에 있는 
--------------------------------
	@GetMapping(path = "/hello-world-bean")
	public HelloWorldBean helloWorldBean() {
		return new HelloWorldBean("Hello World");
	}
--------------------------------
Hello World라는 메시지를 표시하기 바란다
어떻게 하면 될까?


그럼 

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'
import { useState } from 'react'

function WelcomeComponent() {

    const {username} = useParams()

    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

            //5: 이걸 호출하는 대신에 다른 URL을 호출하면 되지
            //5-2: ctrl + / 로 주석처리..  //5-3: successfulResponse() 함수로..
      //  axios.get('http://localhost:8080/hello-world')      (<= 주석처리)
      //      .then( (response) => successfulResponse(response) )
      //      .catch( (error) => errorResponse(error) )
      //      .finally( () => console.log('cleanup') )

            //5-1: 맞지? 그럼 axios.get()에서 'hello-world-bean'이라고 해주면 되고, 위에는 코멘트로 빼주겠다
        axios.get('http://localhost:8080/hello-world')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )
    }

    function successfulResponse(response) {
        console.log(response)

        //5-3: 그리고 여기 있는 setMessage()를 제거해보자, 이렇게 setMessage를 쓰기 전에 response에 무엇이 있는지 확인해보자, 그럼 이걸 저장하고
      //  setMessage(response.data)  (<= 주석처리)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
            <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

돌아가 보겠다 그리고 Call Hello World를 클릭해보자
                                            |
                                            V
--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

                                       Hello World v2

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:12
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {data: {…}, status: 200, statusText: '', head                WelcomeComponent.jsx:26
    ers: AxiosHeaders, config: {…}, …}
    config: {transitional: {…}, adapter: Array(3), transform
    Request: Array(1), transformResponse: Array(1), timeout: 0, …}
    data: {message: 'Hello World'}
    headers: AxiosHeaders {content-type: 'application/json'}
    request: XMLHttpRequest {onreadystatechange: null, readyState: 4, 
    timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
    status: 200
    statusText: ""
    [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  cleanup                                                        WelcomeComponent.jsx:19 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
--------------------------------------------------------------------------------------------

그럼 우린 무얼 이렇게 Hello World를 되돌려 받고 있지 (<= data: {message: 'Hello World'} ),


--------------------------------------------------------------------------------------------

⏺ sts


⏺ HelloWorldController.java



package com.in28minutes.rest.webservices.restfulwebservices.helloworld;

import java.util.*;

import org.springframework.context.*;
import org.springframework.context.i18n.*;
import org.springframework.web.bind.annotation.*;

//REST API
@RestController
public class HelloWorldController {

	private MessageSource messageSource;
	
	public HelloWorldController(MessageSource messageSource) {
		this.messageSource = messageSource;
	}

	@GetMapping(path = "/hello-world")
	public String helloWorld() {
		return "Hello World v2";
	}

	@GetMapping(path = "/hello-world-bean")
	public HelloWorldBean helloWorldBean() {

  //6: 그럼 100% 확신할 수 있게 이걸 "Hello World Bean v1"으로 바꾼다, 그리고 이걸 저장한다
		return new HelloWorldBean("Hello World Bean v1");
	}
	...
--------------------------------------------------------------------------------------------

그럼 이제 Call Hello World를 클릭해 보자
                                        |
                                        V
--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

                                       Hello World v2

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:12
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {data: {…}, status: 200, statusText: '', head                WelcomeComponent.jsx:26
    ers: AxiosHeaders, config: {…}, …}
    config: {transitional: {…}, adapter: Array(3), transform
    Request: Array(1), transformResponse: Array(1), timeout: 0, …}
    data: {message: 'Hello World Bean v1'}
    headers: AxiosHeaders {content-type: 'application/json'}
    request: XMLHttpRequest {onreadystatechange: null, readyState: 4, 
    timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
    status: 200
    statusText: ""
    [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  cleanup                                                        WelcomeComponent.jsx:19 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
--------------------------------------------------------------------------------------------

데이터를 돌려받고 있고, 지금 돌아오고 있는 데이터가 JSON인 걸 알 수 있지
data를 보면 메시지가 포함되어 있는 JSON에 불과하다는 걸 알 수 있다 
보는 것처럼 data에 message라는 속성이 포함되어 있지 (<= data: {message: 'Hello World Bean v1'})

이걸 사용하려면 

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import axios from 'axios'
import { useState } from 'react'

function WelcomeComponent() {

    const {username} = useParams()

    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

        // axios.get('http://localhost:8080/hello-world')
        //     .then( (response) => successfulResponse(response) )
        //     .catch( (error) => errorResponse(error) )
        //     .finally( () => console.log('cleanup') )

            axios.get('http://localhost:8080/hello-world-bean')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )            
    }

    function successfulResponse(response) {
        console.log(response)
        // setMessage(response.data)

        //7: 너는 실제로 setMessage(response.data)라고 해주면 되고
        //data 안에는 message가 있다 (<= 개발자도구 콘솔창의 data: {message: 'Hello World Bean v1'})
        //그럼 response.data.message라고 해서 message라는 속성을 잡는다, 이걸 저장하고 
        setMessage(response.data.message)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
            <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

돌아가서 콘솔창을 정리하고
Call Hello World를 클릭한다
                              |
                              V
--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

                                    Hello World Bean v1

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:12
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {data: {…}, status: 200, statusText: '', head                WelcomeComponent.jsx:26
    ers: AxiosHeaders, config: {…}, …}
    config: {transitional: {…}, adapter: Array(3), transform
    Request: Array(1), transformResponse: Array(1), timeout: 0, …}
    data: {message: 'Hello World Bean v1'}
    headers: AxiosHeaders {content-type: 'application/json'}
    request: XMLHttpRequest {onreadystatechange: null, readyState: 4, 
    timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
    status: 200
    statusText: ""
    [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  cleanup                                                        WelcomeComponent.jsx:19 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
--------------------------------------------------------------------------------------------

그러면 화면에 Hello World Bean v1라고 나오는 걸 볼 수 있지 





지난 몇 단계에서 우리는 프론트엔드 코드로부터 Hello World REST API를 호출 할 수 있었다
그리고 응답을 받아서 그걸 화면에 표시할 수 있었지
이렇게 우린 작동하는 뭔가를 갖게 되었고, 그럼 다음 단계에선 그걸 리팩터링하고 
그걸 더 활용할 수 있게 만들어 보자
다음 단계에서 보겠다
