


Welcome in28minutes
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Your Todos
id	Description		Taget Date	Is Done?
1 Learn AWS			2025-04-23	false
2 Learn DevOps			2026-04-23	false
3 Learn Full Stack Development	2027-04-23	false


우리는 페이지에 간단하게 스타일을 주고 있다 
우린 HTML을 사용해서 테이블, 헤딩 등을 만들었다
하지만 너가 웹 페이지를 아름답게 꾸미려면 CSS(Cascading Style Sheets)를 사용해야 한다

CSS는 애플리케이션의 외관과 느낌을 개선하도록 도움을 준다
그래서 CSS와 함께 HTML을 사용하면 웹 페이지를 더 멋있게 만들 수 있다 
그리고 Bootstrap은 가장 널리 사용되는 캐스케이딩 스타일시트 프레임워크다

지금 Bootstrap 최신 버전은 Bootstrap5이다
이번 단계에서 우리는 Bootstrap을 이용해 페이지를 형식화할 것이다

몇 년 전엔 Bootstrap을 사용하려 할 때는 Bootstrap 웹사이트로 가서 
Bootstrap CSS 파일을 다운로드하고 그걸 static 폴더에 넣어줘야 했다

이제 Bootstrap의 새 버전이 있으면, 역시 그걸 반복해줘야 한다
상당히 손이 많이 가는 작업이다

지난 몇 년 동안에 webjars라는 새로운 프로세스가 정말 큰 인기를 끌게 되었다 
그럼 이번 단계에서 우리는 수동으로 Bootstrap을 다운로드하지 않고 webjars를 사용할 것이다
그러면 우린 그걸 자동으로 하게 된다 그걸 어떻게 할 수 있을까?

우리는 pom.xml에서 수많은 의존성을 지정했다 Spring 프레임워크, jsp api, glassfish-jstl등등 우린 그걸 하나도 다운로드하지 않았다
그건 모두 Maven이 대신 다운로드했다
비슷하게 우리는 Bootstrap을 webjars로 다운로드할 수 있다 
그럼 지금 어떻게 하는지 알아보자

-----------------------------------------------------------------------------

⏺ pom.xml파일


......

<dependencies>
		
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	
	
		<dependency>
			<groupId>org.apache.tomcat.embed</groupId>
			<artifactId>tomcat-embed-jasper</artifactId>
			<scope>provided</scope>
		</dependency>	
	
		<dependency>
			<groupId>jakarta.servlet.jsp.jstl</groupId>
			<artifactId>jakarta.servlet.jsp.jstl-api</artifactId>
			<version>3.0.0</version>
		</dependency>
		
		<dependency>
			<groupId>org.eclipse.jetty</groupId>
			<artifactId>glassfish-jstl</artifactId>
			<version>11.0.20</version>
		</dependency>

    <!-- 또 다른 의존성을 추가해야 한다 <dependecy>넣고 <groupId>를 넣고 <artifactId>를 넣는다 그리고 또<version>을 넣어줘야 한다-->
    <!--지금까지 우리는 <version>을 넣은적이 없다, 왜냐면 이것들의 모든 버전을 spring-boot-starter-parent가 관리하기 때문이다-->
    <!--너가 pom.xml탭 바로 옆에 있는 Effective POM 탭으로 가서 spring-boot-starter-web을 검색해보면 버전이 여기서 관리되고 있는걸 볼 수 있다, 버전이 상위에 지정되어 있다 <version>3.3.0-M3</version> 3.3.0-M3이다-->
    <!--다른 것도 좀 볼까? 하나를 선택해보자 glassfish-jstl을 찾아보자, 그럼 Effective POM으로 간다 <glassfish-jstl.version>3.0.1</glassfish-jstl.version> 버전이 여기서 관리되고 있다 우리가 사용하고 있는 버전은 현재 3.0.1이다 버전은 상위 POM에 있고, 그래서 우리는 버전 지정에 대해 신경 쓸 필요가 없다-->
	  <!--하지만 Bootstrap의 경우에, 정적 콘텐츠인 경우에 이 모든 버전들이 spring-boot-starter-parent에 의해 관리되지 않는다 그래서 우리가 버전도 지정해줘야 하는 것이다-->
    <!--이건 하나의 의존성이고 우린 또 다른 의존성을 추가할 수도 있다 Bootstrap을 사용하기 위해선 jQuery에 대한 의존성도 필요하다 그럼 이제 여기에 첫번째는 Bootstrap의존성을 넣고 아래에는 jQuery의존성을 넣을 것이다 그 둘의 groupId는 동일하다-->
    <!--org.webjars다, Bootstrap의 <artifactId>는 쉽게 알 수 있다 바로 bootstrap이다 그리고 우리가 사용해야 할 버전은 5.1.3이다-->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>bootstrap</artifactId>
			<version>5.1.3</version>
		</dependency>

    <!--jQuery의 경우에도 groupId는 동일하게 org.webjars이고 artifactId는 jquery가 될 것이다 버전은 3.6.0이 될것이고 이걸 저장해보자-->
		<dependency>
			<groupId>org.webjars</groupId>
			<artifactId>jquery</artifactId>
			<version>3.6.0</version>
		</dependency>

  </dependencies>
......

-----------------------------------------------------------------------------
❗ 그리고 너는 pom.xml을 변경할 때마다 꼭 중지하고 시작해야 한다는 걸 잊지 말아야 한다 ❗
중지 후 다시 시작, 그리고 Package Explorer에서 Maven Dependencies를 열고 bootstrap을 입력해보자 
bootstrap-5.1.3jar을 볼 수 있고, 그 안에 resources, webjars 등이 있다, 이렇게 전체 경로를 볼 수 있고
▼ 📚 Maven Dependencies
  ▼ 🧴 bootstrap-5.1.3jar
    ▼ 📁 META-INF
      ▼ 📁 resources
        ▼ 📁 webjars
          ▼ 📁 bootstrap
            ▼ 📁 5.1.3
              ▼ 📁 css
                ▼ 📄 bootstrap.css
                  .....
                  📄 bootstrap.min.css
                  ......
bootstrap.css가있고, bootstrap 최소와 css도 있다  bootstrap.css<== 이건 온전한 bootstrap.css이고 
bootstrap.min.css <= 이건 훨씬 크기가 작은 최소화 버전이다, 이걸 사용하는 게 좋다
그럼 오른쪽 클릭을 하고 Copy Qualified Name을 선택한다 

넌 그걸 
/META-INF/resources/webjars/bootstrap/5.1.3/css/bootstrap.min.css 를 볼 수 있다
너가 만일 왼쪽 메뉴를 사용하고 거리로 갈 수 없다면 타이핑해서 넣을 수도 있다

▼ 📚 Maven Dependencies
  ▼ 🧴 bootstrap-5.1.3.jar
    ▼ 📁 META-INF
      ▼ 📁 resources
        ▼ 📁 webjars
          ▼ 📁 bootstrap
            ▼ 📁 5.1.3
              ▼ 📁 js
                ▼ ...
                  ....
                  📄 bootstrap.min.js
                  ......
bootstrap.min.js를 사용할 것이고 오른쪽 Copy Qualified Name을 선택 
/META-INF/resources/webjars/bootstrap/5.1.3/js/bootstrap.min.js 

위에껀 bootstrap.min.css이고 아래는 bootstrap.min.js이다


그럼 jquery도 살펴보자
너는 jquery라고 타이핑할 수도 있고, 

▼ 📚 Maven Dependencies
  ▼ 🧴 jquery-3.6.0.jar
    ▼ 📁 META-INF
      ▼ 📁 resources
        ▼ 📁 webjars
          ▼ 📁 jquery
            ▼ 📁 3.6.0
              ▼ ...
                📑 jquery.min.js
                ....
여기서도 최소화된 버전을 사용하려 한다 jquery.min.js를 오른쪽 Copy Qualified Name
/META-INF/resources/webjars/jquery/3.6.0/jquery.min.js

그럼 우리는 jsp파일에서 이 세 가지를 사용하려 한다
/META-INF/resources/webjars/bootstrap/5.1.3/css/bootstrap.min.css
/META-INF/resources/webjars/bootstrap/5.1.3/js/bootstrap.min.js 
/META-INF/resources/webjars/jquery/3.6.0/jquery.min.js


그럼 가서 그것들을 추가해보자 그럼 listTodos.jsp에서 
이것들을 붙여넣을 것이다

---------------------------------------------------------------------------------------------------------------


⏺ listTodos.jsp 파일

<%@ taglib prefix="c" uri="http://java.sun.com/jsp/jstl/core" %>

<html>
  <head>
    <!--1: 너가 웹페이지를 로딩할 때는 언제나 CSS 파일이 먼저 로딩될 것이다 너는 <link>태그를 써서 CSS를 추가할 수 있다, 그럼 <link>라고 입력하고 그리고 link에 너는 href 속성을 추가할 수 있다 -->
    <!--너의 css 파일이 어디에 있냐? 그리고 또 하나는 스타일시트이다, 그럼 그게 "stylesheet"라고 해준다 rel="stylesheet" 이건 이게 css 파일이라고 알려주는 것이고, 우리는 여기 안에 href를 넣을 수 있다-->
    <!--하나 기억할 점은, 너가 webjars로부터 파일을 사용할 때 언제나 META-INF/resources/를 지정할 필요가 없다는 점이다, 그럼 넌 META-INF/resources/를 삭제할 수 있다 -->
    <!--이렇게 바로 webjars/로 시작하면 된다 webjars/bootstrap/5.1.3/css/bootstrap.min.css 그리고 여기에 넌 bootstrap.min.css를 넣으려고 한다-->
    <!--그럼 그게 href=""여기 들어가야 하는 값이다, 최상단에서 <head> 바로 아래에 우리는 css 파일을 넣어준다 -->
    <link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">

    <!--2:그리고 우린 JavaScript 파일도 로딩하려고 한다 보통 JavaScript는 HTML로 할 수 있는 것들에 추가로 역동적인 것들을 많이 넣는 데 사용한다 -->
    <!--그리고 너는 JavaScript파일을 추가하려 할 떄는 항상 <body>의 종료 태그의 바로 앞에다가 넣는다 //2-1: 아래로..-->
    <link>
    <title>
    	List Todos Page
    </title>
  </head>
  <body>
  		<!-- <div>Welcome to in28minutes</div> -->
  		<div>Welcome ${name}</div> 
  		<hr>
  		<h1>Your Todos</h1>
  		
  		<table>
  			<thead>
  				<tr>
  				<th>id</th>
  				<th>Description</th>
  				<th>Taget Date</th>
  				<th>Is Done?</th>
  				</tr>			
  			</thead>
  			<tbody>
  			<c:forEach items="${todos}" var="todo">
  				<tr>
  					<td>${todo.id}</td>
  					<td>${todo.description}</td>
  					<td>${todo.targetDate}</td>
  					<td>${todo.done}</td>
  				</tr>
  			</c:forEach>
  			</tbody>
  		</table>
      
      <!--2-1: 그럼 여기에 넣어주겠다 그리고 실제로 JavaScript를 넣기 위해 이 <script>태그를 사용한다 그럼<script>라고 넣고 src=라고 하고 이 파일들에 대한 링크를 넣는다 -->
      <!--그럼 이렇게 webjars와 jquery를 복사해서 넣는다 그리고 저장 그리고 이제 우리의 Todos 페이지를 다시 실행해보자-->
			<script type="webjars/bootstrap/5.1.3/js/bootstrap.min.js "></script>
			<script type="webjars/jquery/3.6.0/jquery.min.js"></script>
  
  </body>
</html>

---------------------------------------------------------------------------------------------------------------
                                              |
                                              V
---------------------------------------------------------------------

http://localhost:8087/list-todos 사이트 화면 ==>


Welcome in28minutes
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
Your Todos
id	Description		Taget Date	Is Done?
1 Learn AWS			2025-04-23	false
2 Learn DevOps			2026-04-23	false
3 Learn Full Stack Development	2027-04-23	false


---------------------------------------------------------------------

이 형식이 약간 변한 걸 볼 수 있다 (직접 웹사이트에 봐야 확인 가능 폰트나 여백 스타일등이 바뀜)
이건 Bootstrap 때문이다, 그리고 오른쪽 클릭을 하고 inspect(검사)를 선택 그리고 Network탭으로 가서 새로고침
Doc를 보면 list-todos만 있는 걸 볼 수 있고, 그리고 list-todos에서 Response를 보면 webjars에 대한 링크를 볼 수 있다 

-------------------------------------------------------------------------------------------
Response탭 내용 ==>
<html>
	<head>
		<link href="webjars/bootstrap/5.1.3/css/bootstrap.min.css" rel="stylesheet">
		<title>
			List Todos Page
		</title>
	</head>
	<body>
			<!-- <div>Welcome to in28minutes</div> -->
			<div>Welcome in28minutes</div> 
			<hr>
			<h1>Your Todos</h1>
			
			<table>
				<thead>
					<tr>
					<th>id</th>
					<th>Description</th>
					<th>Taget Date</th>
					<th>Is Done?</th>
					</tr>			
				</thead>
				<tbody>
				
					<tr>
						<td>1</td>
						<td>Learn AWS</td>
						<td>2025-04-24</td>
						<td>false</td>
					</tr>
				
					<tr>
						<td>2</td>
						<td>Learn DevOps</td>
						<td>2026-04-24</td>
						<td>false</td>
					</tr>
				
					<tr>
						<td>3</td>
						<td>Learn Full Stack Development</td>
						<td>2027-04-24</td>
						<td>false</td>
					</tr>
				
				</tbody>
			</table>
			
			<script type="webjars/bootstrap/5.1.3/js/bootstrap.min.js "></script>
			<script type="webjars/jquery/3.6.0/jquery.min.js"></script>
	</body>
</html>
-------------------------------------------------------------------------------------------

이렇게 상단에 webjars/bootstrap에 대한 링크가 있다 그리고 하단에는 bootstrap과 jquery 모두에 적용되는
JavaScript 파일에 대한 링크가 있다 
그럼 Network탭에 Doc에서 All로 바꾸면 여기 list-todos가 있는게 보이고 그리고 bootstrap.min.css가 적절히 다운로드 된 것도 보일 것이다,
그리고 bootstrap.min.js가 있고 jquery.min.js도 다운로드 되어 있다 
브라우저로 되돌아오는 첫 번째 응답은 list-todos에서 오는 것이고, 브라우저는 list-todos의 콘텐츠에 bootstrap css파일에 대한 링크와 JavaScript 파일에 대한 링크가 있는 걸 발견한다
즉 bootstrap.min.js와 jquery.min.js에 대한 링크다
그러면 브라우저는 그것들도 모두 다운로드하게 된다 

그래서 너는 list-todos, bootstrap.min.css, bootstrap.min.js, jquery.min.js 각각에 대한 별도의 요청을 보게되는 것이다


너는 Bootstrap을 준비하기 위해 많은 어려운 작업을 해야 하는 걸 알게 되었다 
하지만 Bootstrap을 사용하면 엄청난 일들을 할 수 있다 그럼 그걸 다음 단계에서 확인해보자
