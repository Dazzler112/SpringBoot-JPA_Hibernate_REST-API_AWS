

Learning JPA and Hibernate - Approach
                                                                                         ______________________                                                                                                                            
● 01: Create a Spring Boot Project with H2                                              |   Spring Data JPA    |                                                                                                                       
● 02: Create COURSE table                                                                ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                             
● 03: Use Spring JDBC to play with COURSE tabel                                          ______________________                                                                                                                            
                                                                                        |         JPA          |                                                                                                                   
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
                                                                                         ______________________                                                                                                                             
                                                                                        |     Spring JDBC      |                                                                                                                      
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
                                                                                         ______________________                                                                                                                            
                                                                                        |         JDBC         |                                                                                                             
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

이번 단계에선 Spring JDBC를 중점적으로 살펴보겠다 
Spring JDBC를 사용해서 데이터를 삽입하고 COURSE테이블에 있는 데이터를 삭제할 수 있다 




JDBC to Spring JDBC to JPA to Spring Data JPA
                                                                                         ______________________                                                                                                                            
                                                                                        |   Spring Data JPA    |                                                                                                                       
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                             
                                                                                         ______________________                                                                                                                            
                                                                                        |         JPA          |                                                                                                                   
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
                                                                                         ______________________                                                                                                                             
                                                                                        |     Spring JDBC      |                                                                                                                      
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
                                                                                         ______________________                                                                                                                            
                                                                                        |         JDBC         |                                                                                                             
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  

먼저 JDBC와 Spring JDBC의 개념을 대략적으로 살펴보면서 시작하겠다 
지금 H2 콘솔에 생성된 테이블이 있다 

이 테이블에 데이터를 삽입하려면 
한 가지 방법은 들어가서 쿼리를 입력하는 건데 

-----------------------------------------------------------------------------------------------------------------

⏺  H2 Console 

-- INSERT INTO 다음에 테이블을 넣어야 한다 무슨 테이블이지? course이다 ()에 id, name, author을 넣는다 이게 값을 삽입하려는 필드다 
-- VALUES를 입력하고 1,''안에는 과정 이름을 넣는다, Learn AWS라고 넣고 , 작성자론 'in28minutes'를 넣어준다
-- 이제 여기서 insert 쿼리를 실행한다

INSERT INTO course(id, name, author)
VALUES(1,'Learn AWS','in28minutes');

-------------------------------------------------
실행결과:
INSERT INTO course(id, name, author)
VALUES(1,'Learn AWS','in28minutes');
Update count: 1
(2 ms)
-----------------------------------------------------------------------------------------------------------------

이제 자세한 내용을 보려면 어떻게 해야 할까?
select 쿼릴르 실행하면 된다 
-----------------------------------------------------------------------------------------------------------------

⏺  H2 Console 

-- SELECT * FROM course라고 한 다음 실행한다 
-- 실행을 누르면 전부 실행되는데  SELECT * FROM course 만 실행하고 싶다면 Run Selected(선택 실행)버튼을 누른다

INSERT INTO course(id, name, author)
VALUES(1,'Learn AWS','in28minutes');

SELECT * FROM course

-------------------------------------------------
실행결과:
SELECT * FROM course;
ID  	NAME  	AUTHOR  
1	Learn AWS	in28minutes
(1 row, 0 ms)

//선택실행을 누르면 이제 SELECT * FROM course 이부분만 실행된다 
SELECT * FROM course 가 Learn AWS와 in28minuates를 반환한다 
-----------------------------------------------------------------------------------------------------------------

이행을 삭제하고 싶다면??

-----------------------------------------------------------------------------------------------------------------

⏺  H2 Console 

-- DELETE FROM course WHERE ID = 1을 입력하고 Run Selected를 눌르면 

INSERT INTO course(id, name, author)
VALUES(1,'Learn AWS','in28minutes');

SELECT * FROM course

DELETE FROM course WHERE id = 1;
-------------------------------------------------
실행결과:
DELETE FROM course WHERE id = 1;
Update count: 1
(1 ms)

//그러면 테이블에서 행이 삭제된다 

-----------------------------------------------------------------------------------------------------------------


-----------------------------------------------------------------------------------------------------------------

⏺  H2 Console 

-- SELECT * FROM course를 선택 실행을 눌러보면 테이블에 행이 없다 

SELECT * FROM course
-------------------------------------------------
실행결과:
SELECT * FROM course;
ID  	NAME  	AUTHOR  
(no rows, 0 ms)
-----------------------------------------------------------------------------------------------------------------

보통 이렇게 테이블에 데이터를 삽입하는데 
테이블이 여러 개일 경우에는 데이터를 생성할 때 join같은 것을 사용할 수 있다 

INSERT INTO course(id, name, author)
VALUES(1,'Learn AWS','in28minutes');

SELECT * FROM course

DELETE FROM course WHERE id = 1;





JDBC to Spring JDBC to JPA to Spring Data JPA
                                                                                         ______________________                                                                                                                            
● JDBC                                                                                  |   Spring Data JPA    |                                                                                                                       
 ■ Write a lot of SQL queries! (delete from todo where id=?)                             ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                             
 ■ And write a lot of Java code                                                          ______________________                                                                                                                            
● Spring JDBC                                                                           |         JPA          |                                                                                                                   
 ■ Write a lot of SQL queries (delete from todo where id=?)                              ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
 ■ BUT lesser Java code                                                                  ______________________                                                                                                                             
                                                                                        |     Spring JDBC      |                                                                                                                      
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾                                                                                                                            
                                                                                         ______________________                                                                                                                            
                                                                                        |         JDBC         |                                                                                                             
                                                                                         ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  
 
● JDBC 
 ■ Write a lot of SQL queries! (delete from todo where id=?) 
 ■ And write a lot of Java code 
여기서 사용하는 언어는 SQL, 즉 구조적 쿼리 언어라고 하는 것인데 
JDBC와 Spring JDBC를 사용할 때 조차도 SQL 쿼리를 활용하게 된다 
● Spring JDBC   
 ■ Write a lot of SQL queries (delete from todo where id=?)  
그래서 JDBC와 Spring JDBC를 쓸 때는 SQL 쿼리를 많이 작성한다 
SELECT * FROM 이나 DELETE FROM등 아주 많은 SQL 쿼리를 쓴다 
 ■ BUT lesser Java code
하지만 JDBC와 Spring JDBC의 차이는 Spring JDBC로는 Java 코드를 훨씬 더 적게 써야 한다는 것이다 




JDBC to Spring JDBC

 ________________________________________________________________________________________________________________________
| public void deleteTodo (int id) {                                                                                      |                                                   
|    PreparedStatement st = null;                                                                                        |                                                 
|    try {                                                                                                               |                       
|         st = db.conn.prepareStatement("delete from todo where id=?");                                                  |                                                                               
|         st.setInt(1, id);                                                                                              |                                   
|         st.execute();                                                                                                  |                               
|     } catch (SQLException e) {                                                                                         |                                            
|         logger.fatal("Query Failed : '',e);                                                                            |                                                      
|     } finally {                                                                                                        |                             
|          if (st != null) {                                                                                             |                                   
|              try {st.close();}                                                                                         |                                   
|              catch (SQLException) {}                                                                                   |                                       
|           }                                                                                                            |                  
|      }                                                                                                                 |                 
| }                                                                                                                      |                   
|                                                                                                                        |                  
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  
이게 JDBC로 작성한 예문이고 
________________________________________________________________________________________________________________________
| public void deleteTodo (int id) {                                                                                      |
|        jdbcTemplate.update("delete from todo where id=", id);                                                          |
| }                                                                                                                      |
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
이건 Spring JDBC로 작성한 예문이다 

여기 보면 둘 다 실행할 쿼리는 delete from todo를 써서 특정 ID를 삭제하는 것이다 
JDBC도 delete from todo 특정 ID이고 
JDBC로 코드를 작성하면 어떻게 나타날까??
코드를 많이 작성해야 한다 

하지만 Spring JDBC로는 훨씬 더 적게 작성해야 한다 
그럼 Spring JDBC로 뭘 할 수 있게 될까?

첫 번째 연습으로 이 쿼리를 그대로 실행해 보자

기억해야 할 중요한 사항은 H2 콘솔의 데이터가 서버를 재시작할 때마다 새로고침된다는 것이다

INSERT INTO course(id, name, author)
VALUES(1,'Learn AWS','in28minutes');

SELECT * FROM course

DELETE FROM course WHERE id = 1;

이 쿼리를 어딘가에 저장하려면 바로 저장하고 
이제 할 일은 이 쿼리를 Spring JDBC로 실행하는 건데 
다음 단계에 알아보자


/*
소감)
SQL 쿼리문은 이미 학원에서 배웠기 때문에 알았던 부분이고 
workbench 로 IDE DB연동해서 하는 방법 외에
메모리 DB로 사용가능한 H2 Database는 처음이여서
처음 써본 것에 대해 신기했고 이렇게 쓸수도 있다는 사실이 흥미롭고 재미있었다
앞으로 교육이 더 기대된다
*/
