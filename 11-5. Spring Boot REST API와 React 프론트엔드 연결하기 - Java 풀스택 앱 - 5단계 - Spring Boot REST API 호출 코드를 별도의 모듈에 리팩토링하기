

이번 단계에선 리팩터링을 중점적으로 다뤄보겠다
우리는 컴포넌트에서 직접 API를 호출하고 있는데..

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ WelcomeComponent.jsx

...
    function callHelloWorldRestApi() {
        console.log('called')

        // axios.get('http://localhost:8080/hello-world')
        //     .then( (response) => successfulResponse(response) )
        //     .catch( (error) => errorResponse(error) )
        //     .finally( () => console.log('cleanup') )

            axios.get('http://localhost:8080/hello-world-bean')
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )            
    }
...

--------------------------------------------------------------------------------------------
그건 좋지 않다

우리가 작성하고 있는 이 메서드를 보지 말아보자
우린 여기서
axios.get('http://localhost:8080/hello-world-bean')  
REST API를 호출하고 있고
여기서는
.then( (response) => successfulResponse(response) )
REST API 호출에 성공하면 무엇을 해야되는지 
그리고
.catch( (error) => errorResponse(error) )
REST API 호출에 실패하면 뭘 해야 되는지 정의하고 있다

일반적으로 REST API 호출에 성공하면 데이터를 컴포넌트에 표시하게 되지 (<= .then( (response) => successfulResponse(response) ) )
그럼 뭔가에 성공하거나 실패하면 무엇을 해야 될까?
너는 그걸 특정한 컴포넌트에 맡길 수 있다
그럼 여기 있는 Welcome 컴포넌트는 뭔가가 성공했거나 실패했을 때 해야 될 일을 처리할 수 있지

하지만 REST API 호출의 세부적인 내용은 별도의 서비스에 맡기려고 한다
그럼 그걸 시작해보자

그럼 todo폴더 안에서 우리는 새 폴더를 만들고 폴더 이름을 api라고 해보자
그럼 API 호출을 하는 모든 서비스를 여기 api에 넣을 것이다
그럼 api폴더 오른쪽 클릭 > 새파일 > 이름을 HelloWorldApiService.js라고 해보자 
그리고 여기서 
axios.get('http://localhost:8080/hello-world-bean')
.then( (response) => successfulResponse(response) )
.catch( (error) => errorResponse(error) )
.finally( () => console.log('cleanup') )
이 호출을 하려고 한다
이 호출을 HelloWorldApiService.js 여기서 하는게 가장 적절하겠지

--------------------------------------------------------------------------------------------
⏺ vsc


⏺ HelloWorldApiService.js


1-5: 여기에 넣어줘야 한다, 이렇게 axios를 임포트 해야 하고
import axios from 'axios'


//1: 그럼 너는 함수를 하나 정의할 수 있고, 그럼 function retrieveHelloWorldBean() 이라고 해보자, 그리고 여긴 입력값이 없고
function retrieveHelloWorldBean() {
  //1-1: 그럼 여기에서 이걸 리턴하기만 하면 된다, 끝이다 //1-2: WelcomeComponenet.jsx로..
  return axios.get('http://localhost:8080/hello-world-bean')
}

-------------------------------------------------------


⏺ WelcomeComponent.jsx


import {useParams, Link} from 'react-router-dom'

//1-4: 여기 import를 잘라넣어 //1-5: HelloWorldApiService.js로..
// import axios from 'axios'
import { useState } from 'react'

function WelcomeComponent() {

    const {username} = useParams()

    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

        // axios.get('http://localhost:8080/hello-world')
        //     .then( (response) => successfulResponse(response) )
        //     .catch( (error) => errorResponse(error) )
        //     .finally( () => console.log('cleanup') )

        //1-3: 그럼 여기서 axios를 삭제해야 하고 
     //       axios.get('http://localhost:8080/hello-world-bean')  (<= 여기만 주석처리 실제 코드에선 삭제 ❗)
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )            
    }

    function successfulResponse(response) {
        console.log(response)
        // setMessage(response.data)
        setMessage(response.data.message)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
            <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------


--------------------------------------------------------------------------------------------
⏺ vsc


⏺ HelloWorldApiService.js



import axios from 'axios'


//2: 이걸 WelcomeComponenet에서 사용하려고 한다, 그럼 엑스포트를 할 수 있지 
//그럼 여기에 export function이라 하고, 이걸 다른 컴포넌트에서 사용할 것이라고 해주는 것이지, 그리고 이제 여기로 가서 //2-1: WelcomeComponent.jsx로..
export function retrieveHelloWorldBean() {
    return axios.get('http://localhost:8080/hello-world-bean')
}

-------------------------------------------------------


⏺ WelcomeComponent.jsx




import {useParams, Link} from 'react-router-dom'
import { useState } from 'react'

//2-2: 임포트가 이루어 지지, 그럼 import { retrieveHelloWorldBean } from './api/HelloWorldApiService' 이다 //2-3: 다시 callHelloWorldRestApi() 함수로..
import { retrieveHelloWorldBean } from './api/HelloWorldApiService'


function WelcomeComponent() {

    const {username} = useParams()

    const [message, setMessage] = useState(null)

    function callHelloWorldRestApi() {
        console.log('called')

      
      
        

        // axios.get('http://localhost:8080/hello-world')
        //     .then( (response) => successfulResponse(response) )
        //     .catch( (error) => errorResponse(error) )
        //     .finally( () => console.log('cleanup') )

        //2-1: 그 함수를 사용할 수 있다, 그럼 함수 이름을 넣고 ctrl + space를 눌러준다, 그리고 엔터키를 눌러주면 //2-2: 임포트로..
        //2-3: 그리고 우린 그걸 호출하려고 한다, 여기서 axios.get()을 삭제할 수 있지, retrieveHelloWorldBean()이라 넣고 형식화 할 수 있고, 이걸 저장해보자
          retrieveHelloWorldBean()
        //  axios.get('http://localhost:8080/hello-world') (<= 여기서만 주석 처리 실제코드는 삭제)
            .then( (response) => successfulResponse(response) )
            .catch( (error) => errorResponse(error) )
            .finally( () => console.log('cleanup') )            
    }

    function successfulResponse(response) {
        console.log(response)
        // setMessage(response.data)
        setMessage(response.data.message)
    }

    function errorResponse(error) {
        console.log(error)
    }

    return (
        <div className='WelcomeComponent'>
            <h1>Welcome {username}</h1>
            <div>
                Manage Your todos - <Link to="/todos">Go here</Link>
            </div>
            <div>
                <button className="btn btn-success m-5" onClick={callHelloWorldRestApi}>
                    Call Hello World</button>
            </div>
            <div className="text-info">{message}</div>
        </div>
    )
}

export default WelcomeComponent
--------------------------------------------------------------------------------------------

Call Hello World을 클릭한다
                                        |
                                        V
--------------------------------------------------------------------------------------------


🌎 http://localhost:3000/welcome/in28minutes 사이트화면 ==>

(title 명)
  
Todo App                |
‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾  



          in28minutes  Home  Todos                                            Logout
     ___________________________________________________________________________________

                                    Welcome in28minutes

                                Manage Your todos - Go here
                                    __________________
                                   | Call Hello World |
                                    ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾

                                    Hello World Bean v1

--------------------------------------------------------------------------------------------
  Elements  Console  Sources Network  Performance      >>                       🔅  ⁞  x
            ‾‾‾‾‾‾‾
-------------------------------------------------------------------------------------------
  called                                                         WelcomeComponent.jsx:12
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  ▶ {data: {…}, status: 200, statusText: '', head                WelcomeComponent.jsx:26
    ers: AxiosHeaders, config: {…}, …}
    config: {transitional: {…}, adapter: Array(3), transform
    Request: Array(1), transformResponse: Array(1), timeout: 0, …}
    data: {message: 'Hello World Bean v1'}
    headers: AxiosHeaders {content-type: 'application/json'}
    request: XMLHttpRequest {onreadystatechange: null, readyState: 4, 
    timeout: 0, withCredentials: false, upload: XMLHttpRequestUpload, …}
    status: 200
    statusText: ""
    [[Prototype]]: Object
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
  cleanup                                                        WelcomeComponent.jsx:19 
 ‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾
--------------------------------------------------------------------------------------------

보는 것 처럼 변한게 없지
Hello World Bean v1을 리턴하고 있다, 좋다
완벽하게 리팩터링을 했고 

여기서 보는 것 처럼 
----------------------------------------
export function retrieveHelloWorldBean() {
    return axios.get('http://localhost:8080/hello-world-bean')
}
----------------------------------------
이 함수는 작성하기가 아주 간단하지
그냥 어떤 값을 리턴하고 있을 뿐이다

